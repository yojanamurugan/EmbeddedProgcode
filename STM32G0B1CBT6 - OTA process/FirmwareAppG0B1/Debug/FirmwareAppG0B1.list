
FirmwareAppG0B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000472c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f0  080048f0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048f4  080048f4  000058f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000006c  08004964  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004964  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c79f  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001faf  00000000  00000000  00012833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000147e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c3  00000000  00000000  00015208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c37d  00000000  00000000  000159cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2f4  00000000  00000000  00031d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2a88  00000000  00000000  0003f03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1ac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  000f1b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f45a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047d0 	.word	0x080047d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080047d0 	.word	0x080047d0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fa6a 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f820 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8b4 	bl	80007a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f864 	bl	800070c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application v%d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <main+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	0019      	movs	r1, r3
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <main+0x40>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	001a      	movs	r2, r3
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <main+0x44>)
 8000652:	0018      	movs	r0, r3
 8000654:	f003 f9be 	bl	80039d4 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Running application main loop...\n");
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <main+0x48>)
 800065a:	0018      	movs	r0, r3
 800065c:	f003 fa20 	bl	8003aa0 <puts>
	  HAL_Delay(1000); // 1 second delay
 8000660:	23fa      	movs	r3, #250	@ 0xfa
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fad7 	bl	8000c18 <HAL_Delay>
	  printf("Running application main loop...\n");
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	e7f4      	b.n	8000658 <main+0x28>
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000000 	.word	0x20000000
 8000674:	080047e8 	.word	0x080047e8
 8000678:	08004808 	.word	0x08004808

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b095      	sub	sp, #84	@ 0x54
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2414      	movs	r4, #20
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	233c      	movs	r3, #60	@ 0x3c
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 fafd 	bl	8003c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	2310      	movs	r3, #16
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 faf6 	bl	8003c8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fe03 	bl	80012b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2202      	movs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2240      	movs	r2, #64	@ 0x40
 80006c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fe3b 	bl	8001348 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f88f 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2100      	movs	r1, #0
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f986 	bl	8001a08 <HAL_RCC_ClockConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000700:	f000 f87a 	bl	80007f8 <Error_Handler>
  }
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b015      	add	sp, #84	@ 0x54
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000712:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <MX_USART1_UART_Init+0x98>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000718:	22e1      	movs	r2, #225	@ 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fd3c 	bl	80021d4 <HAL_UART_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f84a 	bl	80007f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000766:	2100      	movs	r1, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f002 ff8f 	bl	800368c <HAL_UARTEx_SetTxFifoThreshold>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f841 	bl	80007f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f002 ffc6 	bl	800370c <HAL_UARTEx_SetRxFifoThreshold>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f838 	bl	80007f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_USART1_UART_Init+0x94>)
 800078a:	0018      	movs	r0, r3
 800078c:	f002 ff44 	bl	8003618 <HAL_UARTEx_DisableFifoMode>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f830 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000088 	.word	0x20000088
 80007a4:	40013800 	.word	0x40013800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_GPIO_Init+0x28>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_GPIO_Init+0x28>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <MX_GPIO_Init+0x28>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000

080007d4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <__io_putchar+0x20>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	f001 fd4b 	bl	8002280 <HAL_UART_Transmit>

  return ch;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000088 	.word	0x20000088

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <HAL_MspInit+0x4c>)
 800080c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <HAL_MspInit+0x4c>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	641a      	str	r2, [r3, #64]	@ 0x40
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <HAL_MspInit+0x4c>)
 8000824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_MspInit+0x4c>)
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	0549      	lsls	r1, r1, #21
 800082c:	430a      	orrs	r2, r1
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_MspInit+0x4c>)
 8000832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	055b      	lsls	r3, r3, #21
 8000838:	4013      	ands	r3, r2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800083e:	23c0      	movs	r3, #192	@ 0xc0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fa0c 	bl	8000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b09d      	sub	sp, #116	@ 0x74
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	235c      	movs	r3, #92	@ 0x5c
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f003 fa10 	bl	8003c8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	2410      	movs	r4, #16
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	234c      	movs	r3, #76	@ 0x4c
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 fa08 	bl	8003c8c <memset>
  if(huart->Instance==USART1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a27      	ldr	r2, [pc, #156]	@ (8000920 <HAL_UART_MspInit+0xcc>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d147      	bne.n	8000916 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fa61 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800089e:	f7ff ffab 	bl	80007f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008a8:	2180      	movs	r1, #128	@ 0x80
 80008aa:	01c9      	lsls	r1, r1, #7
 80008ac:	430a      	orrs	r2, r1
 80008ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	01db      	lsls	r3, r3, #7
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <HAL_UART_MspInit+0xd0>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d6:	215c      	movs	r1, #92	@ 0x5c
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	22c0      	movs	r2, #192	@ 0xc0
 80008dc:	00d2      	lsls	r2, r2, #3
 80008de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2202      	movs	r2, #2
 80008e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	23a0      	movs	r3, #160	@ 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fb69 	bl	8000fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	201b      	movs	r0, #27
 800090c:	f000 fa6a 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000910:	201b      	movs	r0, #27
 8000912:	f000 fa7c 	bl	8000e0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b01d      	add	sp, #116	@ 0x74
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	40013800 	.word	0x40013800
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f946 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <USART1_IRQHandler+0x14>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 fd30 	bl	80023c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	20000088 	.word	0x20000088

08000974 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000986:	e000      	b.n	800098a <_read+0x16>
 8000988:	bf00      	nop
 800098a:	0001      	movs	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
  }

  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b006      	add	sp, #24
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff03 	bl	80007d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
  }
  return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b006      	add	sp, #24
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	425b      	negs	r3, r3
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2280      	movs	r2, #128	@ 0x80
 8000a08:	0192      	lsls	r2, r2, #6
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f003 f962 	bl	8003d38 <__errno>
 8000a74:	0003      	movs	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	425b      	negs	r3, r3
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	18d2      	adds	r2, r2, r3
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <_sbrk+0x64>)
 8000a90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b006      	add	sp, #24
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20024000 	.word	0x20024000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	2000011c 	.word	0x2000011c
 8000aa8:	20000270 	.word	0x20000270

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff fff6 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f003 f92d 	bl	8003d44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aea:	f7ff fda1 	bl	8000630 <main>

08000aee <LoopForever>:

LoopForever:
  b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000afc:	080048f8 	.word	0x080048f8
  ldr r2, =_sbss
 8000b00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b04:	20000270 	.word	0x20000270

08000b08 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_COMP_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x3c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_Init+0x3c>)
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	0049      	lsls	r1, r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f810 	bl	8000b4c <HAL_InitTick>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e001      	b.n	8000b3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe64 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <HAL_InitTick+0x88>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d02b      	beq.n	8000bbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <HAL_InitTick+0x8c>)
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <HAL_InitTick+0x88>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	23fa      	movs	r3, #250	@ 0xfa
 8000b70:	0098      	lsls	r0, r3, #2
 8000b72:	f7ff fad1 	bl	8000118 <__udivsi3>
 8000b76:	0003      	movs	r3, r0
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f7ff facc 	bl	8000118 <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f953 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d112      	bne.n	8000bb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80a      	bhi.n	8000ba8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f922 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_InitTick+0x90>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e00d      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e008      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e003      	b.n	8000bc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b005      	add	sp, #20
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	18d2      	adds	r2, r2, r3
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	2000000c 	.word	0x2000000c
 8000c00:	20000120 	.word	0x20000120

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	20000120 	.word	0x20000120

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	0002      	movs	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	2000000c 	.word	0x2000000c

08000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	0019      	movs	r1, r3
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	40010000 	.word	0x40010000
 8000c88:	fffff9ff 	.word	0xfffff9ff

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	0002      	movs	r2, r0
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c9e:	d809      	bhi.n	8000cb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	231f      	movs	r3, #31
 8000ca8:	401a      	ands	r2, r3
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_EnableIRQ+0x30>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	4091      	lsls	r1, r2
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd4:	d828      	bhi.n	8000d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <__NVIC_SetPriority+0xd4>)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	33c0      	adds	r3, #192	@ 0xc0
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	589b      	ldr	r3, [r3, r2]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	@ 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	@ 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	481f      	ldr	r0, [pc, #124]	@ (8000d94 <__NVIC_SetPriority+0xd4>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	33c0      	adds	r3, #192	@ 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d26:	e031      	b.n	8000d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	400b      	ands	r3, r1
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3306      	adds	r3, #6
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3304      	adds	r3, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	0011      	movs	r1, r2
 8000d48:	2203      	movs	r2, #3
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	21ff      	movs	r1, #255	@ 0xff
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	22ff      	movs	r2, #255	@ 0xff
 8000d60:	401a      	ands	r2, r3
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0018      	movs	r0, r3
 8000d68:	2303      	movs	r3, #3
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <__NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001c      	movs	r4, r3
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4023      	ands	r3, r4
 8000d7c:	3b08      	subs	r3, #8
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	430a      	orrs	r2, r1
 8000d82:	3306      	adds	r3, #6
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	18c3      	adds	r3, r0, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b003      	add	sp, #12
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	045b      	lsls	r3, r3, #17
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d301      	bcc.n	8000db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db0:	2301      	movs	r3, #1
 8000db2:	e010      	b.n	8000dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <SysTick_Config+0x44>)
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	3a01      	subs	r2, #1
 8000dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff7c 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x44>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	210f      	movs	r1, #15
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	1c02      	adds	r2, r0, #0
 8000df4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	0002      	movs	r2, r0
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff33 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ffaf 	bl	8000d9c <SysTick_Config>
 8000e3e:	0003      	movs	r3, r0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e04f      	b.n	8000efa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2225      	movs	r2, #37	@ 0x25
 8000e5e:	5c9b      	ldrb	r3, [r3, r2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2224      	movs	r2, #36	@ 0x24
 8000e70:	2100      	movs	r1, #0
 8000e72:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e040      	b.n	8000efa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	210e      	movs	r1, #14
 8000e84:	438a      	bics	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e92:	491c      	ldr	r1, [pc, #112]	@ (8000f04 <HAL_DMA_Abort+0xbc>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eac:	221c      	movs	r2, #28
 8000eae:	401a      	ands	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	000a      	movs	r2, r1
 8000eba:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ec4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00c      	beq.n	8000ee8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed8:	490a      	ldr	r1, [pc, #40]	@ (8000f04 <HAL_DMA_Abort+0xbc>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ee6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2225      	movs	r2, #37	@ 0x25
 8000eec:	2101      	movs	r1, #1
 8000eee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2224      	movs	r2, #36	@ 0x24
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	fffffeff 	.word	0xfffffeff

08000f08 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	210f      	movs	r1, #15
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2225      	movs	r2, #37	@ 0x25
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d006      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e048      	b.n	8000fc4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5c:	491d      	ldr	r1, [pc, #116]	@ (8000fd4 <HAL_DMA_Abort_IT+0xcc>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	221c      	movs	r2, #28
 8000f68:	401a      	ands	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00c      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f92:	4910      	ldr	r1, [pc, #64]	@ (8000fd4 <HAL_DMA_Abort_IT+0xcc>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fa0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2225      	movs	r2, #37	@ 0x25
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2224      	movs	r2, #36	@ 0x24
 8000fae:	2100      	movs	r1, #0
 8000fb0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	4798      	blx	r3
    }
  }
  return status;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	fffffeff 	.word	0xfffffeff

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e14d      	b.n	8001284 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x28>
 8000ffe:	e13e      	b.n	800127e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	4013      	ands	r3, r2
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	43da      	mvns	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	2201      	movs	r2, #1
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	4013      	ands	r3, r2
 8001082:	2b03      	cmp	r3, #3
 8001084:	d017      	beq.n	80010b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4013      	ands	r3, r2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d123      	bne.n	800110a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	58d3      	ldr	r3, [r2, r3]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2207      	movs	r2, #7
 80010d4:	4013      	ands	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2107      	movs	r1, #7
 80010ee:	400b      	ands	r3, r1
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	6939      	ldr	r1, [r7, #16]
 8001108:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	401a      	ands	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	23c0      	movs	r3, #192	@ 0xc0
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_GPIO_Init+0x174>
 800114a:	e098      	b.n	800127e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800114c:	4a53      	ldr	r2, [pc, #332]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3318      	adds	r3, #24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	23a0      	movs	r3, #160	@ 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x1d6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a48      	ldr	r2, [pc, #288]	@ (80012a0 <HAL_GPIO_Init+0x2c8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1d2>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a47      	ldr	r2, [pc, #284]	@ (80012a4 <HAL_GPIO_Init+0x2cc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1ce>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a46      	ldr	r2, [pc, #280]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1ca>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a45      	ldr	r2, [pc, #276]	@ (80012ac <HAL_GPIO_Init+0x2d4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1c6>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 800119e:	2305      	movs	r3, #5
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x1d8>
 80011ae:	2300      	movs	r3, #0
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	2103      	movs	r1, #3
 80011b4:	400a      	ands	r2, r1
 80011b6:	00d2      	lsls	r2, r2, #3
 80011b8:	4093      	lsls	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011c0:	4936      	ldr	r1, [pc, #216]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3318      	adds	r3, #24
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ce:	4b33      	ldr	r3, [pc, #204]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	035b      	lsls	r3, r3, #13
 80011e6:	4013      	ands	r3, r2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	039b      	lsls	r3, r3, #14
 8001210:	4013      	ands	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001222:	4a1e      	ldr	r2, [pc, #120]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 8001224:	2384      	movs	r3, #132	@ 0x84
 8001226:	58d3      	ldr	r3, [r2, r3]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	4013      	ands	r3, r2
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001248:	4914      	ldr	r1, [pc, #80]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 800124a:	2284      	movs	r2, #132	@ 0x84
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001250:	4a12      	ldr	r2, [pc, #72]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	58d3      	ldr	r3, [r2, r3]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	4013      	ands	r3, r2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001276:	4909      	ldr	r1, [pc, #36]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	40da      	lsrs	r2, r3
 800128c:	1e13      	subs	r3, r2, #0
 800128e:	d000      	beq.n	8001292 <HAL_GPIO_Init+0x2ba>
 8001290:	e6aa      	b.n	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021800 	.word	0x40021800
 80012a0:	50000400 	.word	0x50000400
 80012a4:	50000800 	.word	0x50000800
 80012a8:	50000c00 	.word	0x50000c00
 80012ac:	50001000 	.word	0x50001000

080012b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d11f      	bne.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	0013      	movs	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	189b      	adds	r3, r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4912      	ldr	r1, [pc, #72]	@ (800132c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7fe ff18 	bl	8000118 <__udivsi3>
 80012e8:	0003      	movs	r3, r0
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ee:	e008      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	e001      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e009      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	401a      	ands	r2, r3
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	429a      	cmp	r2, r3
 8001312:	d0ed      	beq.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	40007000 	.word	0x40007000
 8001324:	fffff9ff 	.word	0xfffff9ff
 8001328:	20000004 	.word	0x20000004
 800132c:	000f4240 	.word	0x000f4240

08001330 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	23e0      	movs	r3, #224	@ 0xe0
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4013      	ands	r3, r2
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f000 fb50 	bl	80019fc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x20>
 8001366:	e07c      	b.n	8001462 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001368:	4bc3      	ldr	r3, [pc, #780]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2238      	movs	r2, #56	@ 0x38
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001372:	4bc1      	ldr	r3, [pc, #772]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b10      	cmp	r3, #16
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x40>
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d002      	beq.n	800138e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4bba      	ldr	r3, [pc, #744]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d062      	beq.n	8001460 <HAL_RCC_OscConfig+0x118>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d15e      	bne.n	8001460 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e32a      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_OscConfig+0x7a>
 80013b2:	4bb1      	ldr	r3, [pc, #708]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4bb0      	ldr	r3, [pc, #704]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	0249      	lsls	r1, r1, #9
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e020      	b.n	8001404 <HAL_RCC_OscConfig+0xbc>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	23a0      	movs	r3, #160	@ 0xa0
 80013c8:	02db      	lsls	r3, r3, #11
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10e      	bne.n	80013ec <HAL_RCC_OscConfig+0xa4>
 80013ce:	4baa      	ldr	r3, [pc, #680]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4ba9      	ldr	r3, [pc, #676]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	02c9      	lsls	r1, r1, #11
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	4ba6      	ldr	r3, [pc, #664]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4ba5      	ldr	r3, [pc, #660]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	0249      	lsls	r1, r1, #9
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xbc>
 80013ec:	4ba2      	ldr	r3, [pc, #648]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013f2:	49a2      	ldr	r1, [pc, #648]	@ (800167c <HAL_RCC_OscConfig+0x334>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4b9f      	ldr	r3, [pc, #636]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80013fe:	49a0      	ldr	r1, [pc, #640]	@ (8001680 <HAL_RCC_OscConfig+0x338>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d014      	beq.n	8001436 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fbfa 	bl	8000c04 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fbf5 	bl	8000c04 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	@ 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e2e9      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001428:	4b93      	ldr	r3, [pc, #588]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0xce>
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fbe5 	bl	8000c04 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fbe0 	bl	8000c04 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e2d4      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	4b89      	ldr	r3, [pc, #548]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xf8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x126>
 800146c:	e099      	b.n	80015a2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146e:	4b82      	ldr	r3, [pc, #520]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2238      	movs	r2, #56	@ 0x38
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001478:	4b7f      	ldr	r3, [pc, #508]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2203      	movs	r2, #3
 800147e:	4013      	ands	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b10      	cmp	r3, #16
 8001486:	d102      	bne.n	800148e <HAL_RCC_OscConfig+0x146>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d002      	beq.n	8001494 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d135      	bne.n	8001500 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	4b78      	ldr	r3, [pc, #480]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4013      	ands	r3, r2
 800149e:	d005      	beq.n	80014ac <HAL_RCC_OscConfig+0x164>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e2a7      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b72      	ldr	r3, [pc, #456]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a74      	ldr	r2, [pc, #464]	@ (8001684 <HAL_RCC_OscConfig+0x33c>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	021a      	lsls	r2, r3, #8
 80014bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001688 <HAL_RCC_OscConfig+0x340>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	4b68      	ldr	r3, [pc, #416]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014dc:	4b66      	ldr	r3, [pc, #408]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0adb      	lsrs	r3, r3, #11
 80014e2:	2207      	movs	r2, #7
 80014e4:	4013      	ands	r3, r2
 80014e6:	4a69      	ldr	r2, [pc, #420]	@ (800168c <HAL_RCC_OscConfig+0x344>)
 80014e8:	40da      	lsrs	r2, r3
 80014ea:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <HAL_RCC_OscConfig+0x348>)
 80014ec:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014ee:	4b69      	ldr	r3, [pc, #420]	@ (8001694 <HAL_RCC_OscConfig+0x34c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fb2a 	bl	8000b4c <HAL_InitTick>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d051      	beq.n	80015a0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e27d      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d030      	beq.n	800156a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001508:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5e      	ldr	r2, [pc, #376]	@ (8001688 <HAL_RCC_OscConfig+0x340>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	4b58      	ldr	r3, [pc, #352]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b56      	ldr	r3, [pc, #344]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b55      	ldr	r3, [pc, #340]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001522:	2180      	movs	r1, #128	@ 0x80
 8001524:	0049      	lsls	r1, r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fb6b 	bl	8000c04 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fb66 	bl	8000c04 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e25a      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001546:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4013      	ands	r3, r2
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b49      	ldr	r3, [pc, #292]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a4b      	ldr	r2, [pc, #300]	@ (8001684 <HAL_RCC_OscConfig+0x33c>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b43      	ldr	r3, [pc, #268]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001570:	4949      	ldr	r1, [pc, #292]	@ (8001698 <HAL_RCC_OscConfig+0x350>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fb45 	bl	8000c04 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fb40 	bl	8000c04 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e234      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001592:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x238>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2208      	movs	r2, #8
 80015a8:	4013      	ands	r3, r2
 80015aa:	d047      	beq.n	800163c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015ac:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2238      	movs	r2, #56	@ 0x38
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b18      	cmp	r3, #24
 80015b6:	d10a      	bne.n	80015ce <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d03c      	beq.n	800163c <HAL_RCC_OscConfig+0x2f4>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d138      	bne.n	800163c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e216      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80015d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 80015dc:	2101      	movs	r1, #1
 80015de:	430a      	orrs	r2, r1
 80015e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb0f 	bl	8000c04 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fb0a 	bl	8000c04 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1fe      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d0f1      	beq.n	80015ec <HAL_RCC_OscConfig+0x2a4>
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800160c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001610:	2101      	movs	r1, #1
 8001612:	438a      	bics	r2, r1
 8001614:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff faf5 	bl	8000c04 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff faf0 	bl	8000c04 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1e4      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d1f1      	bne.n	8001620 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_RCC_OscConfig+0x300>
 8001646:	e0c7      	b.n	80017d8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001648:	231f      	movs	r3, #31
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2238      	movs	r2, #56	@ 0x38
 8001656:	4013      	ands	r3, r2
 8001658:	2b20      	cmp	r3, #32
 800165a:	d11f      	bne.n	800169c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_RCC_OscConfig+0x330>)
 800165e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_RCC_OscConfig+0x320>
 8001666:	e0b7      	b.n	80017d8 <HAL_RCC_OscConfig+0x490>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d000      	beq.n	8001672 <HAL_RCC_OscConfig+0x32a>
 8001670:	e0b2      	b.n	80017d8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1c2      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40021000 	.word	0x40021000
 800167c:	fffeffff 	.word	0xfffeffff
 8001680:	fffbffff 	.word	0xfffbffff
 8001684:	ffff80ff 	.word	0xffff80ff
 8001688:	ffffc7ff 	.word	0xffffc7ff
 800168c:	00f42400 	.word	0x00f42400
 8001690:	20000004 	.word	0x20000004
 8001694:	20000008 	.word	0x20000008
 8001698:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800169c:	4bb5      	ldr	r3, [pc, #724]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800169e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	4013      	ands	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x364>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x366>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d011      	beq.n	80016d6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4bb0      	ldr	r3, [pc, #704]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80016b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b6:	4baf      	ldr	r3, [pc, #700]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	0549      	lsls	r1, r1, #21
 80016bc:	430a      	orrs	r2, r1
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016c0:	4bac      	ldr	r3, [pc, #688]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80016c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	055b      	lsls	r3, r3, #21
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016ce:	231f      	movs	r3, #31
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	4ba8      	ldr	r3, [pc, #672]	@ (8001978 <HAL_RCC_OscConfig+0x630>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e2:	4ba5      	ldr	r3, [pc, #660]	@ (8001978 <HAL_RCC_OscConfig+0x630>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001978 <HAL_RCC_OscConfig+0x630>)
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	0049      	lsls	r1, r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa88 	bl	8000c04 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fa83 	bl	8000c04 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e177      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	4b9a      	ldr	r3, [pc, #616]	@ (8001978 <HAL_RCC_OscConfig+0x630>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x3e6>
 8001720:	4b94      	ldr	r3, [pc, #592]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001724:	4b93      	ldr	r3, [pc, #588]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001726:	2101      	movs	r1, #1
 8001728:	430a      	orrs	r2, r1
 800172a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800172c:	e01c      	b.n	8001768 <HAL_RCC_OscConfig+0x420>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x408>
 8001736:	4b8f      	ldr	r3, [pc, #572]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001738:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800173a:	4b8e      	ldr	r3, [pc, #568]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800173c:	2104      	movs	r1, #4
 800173e:	430a      	orrs	r2, r1
 8001740:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001742:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001744:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001746:	4b8b      	ldr	r3, [pc, #556]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0x420>
 8001750:	4b88      	ldr	r3, [pc, #544]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001752:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001754:	4b87      	ldr	r3, [pc, #540]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001756:	2101      	movs	r1, #1
 8001758:	438a      	bics	r2, r1
 800175a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800175c:	4b85      	ldr	r3, [pc, #532]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800175e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001760:	4b84      	ldr	r3, [pc, #528]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001762:	2104      	movs	r1, #4
 8001764:	438a      	bics	r2, r1
 8001766:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d014      	beq.n	800179a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fa48 	bl	8000c04 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	e009      	b.n	800178e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa43 	bl	8000c04 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	4a7d      	ldr	r2, [pc, #500]	@ (800197c <HAL_RCC_OscConfig+0x634>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e136      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178e:	4b79      	ldr	r3, [pc, #484]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x432>
 8001798:	e013      	b.n	80017c2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff fa33 	bl	8000c04 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a2:	e009      	b.n	80017b8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa2e 	bl	8000c04 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	4a73      	ldr	r2, [pc, #460]	@ (800197c <HAL_RCC_OscConfig+0x634>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e121      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017c2:	231f      	movs	r3, #31
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80017ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80017d2:	496b      	ldr	r1, [pc, #428]	@ (8001980 <HAL_RCC_OscConfig+0x638>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2220      	movs	r2, #32
 80017de:	4013      	ands	r3, r2
 80017e0:	d039      	beq.n	8001856 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01b      	beq.n	8001822 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017ea:	4b62      	ldr	r3, [pc, #392]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	03c9      	lsls	r1, r1, #15
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa04 	bl	8000c04 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001802:	f7ff f9ff 	bl	8000c04 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0f3      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001814:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x4ba>
 8001820:	e019      	b.n	8001856 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001822:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001828:	4956      	ldr	r1, [pc, #344]	@ (8001984 <HAL_RCC_OscConfig+0x63c>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff f9e9 	bl	8000c04 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0d8      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800184a:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <HAL_RCC_OscConfig+0x518>
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001860:	4b44      	ldr	r3, [pc, #272]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2238      	movs	r2, #56	@ 0x38
 8001866:	4013      	ands	r3, r2
 8001868:	2b10      	cmp	r3, #16
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x526>
 800186c:	e07b      	b.n	8001966 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d156      	bne.n	8001924 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800187c:	4942      	ldr	r1, [pc, #264]	@ (8001988 <HAL_RCC_OscConfig+0x640>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f9bf 	bl	8000c04 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f9ba 	bl	8000c04 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0ae      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	4013      	ands	r3, r2
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018aa:	4b32      	ldr	r3, [pc, #200]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a37      	ldr	r2, [pc, #220]	@ (800198c <HAL_RCC_OscConfig+0x644>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d6:	431a      	orrs	r2, r3
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018de:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	0449      	lsls	r1, r1, #17
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	0549      	lsls	r1, r1, #21
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f983 	bl	8000c04 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f97e 	bl	8000c04 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e072      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	049b      	lsls	r3, r3, #18
 800191e:	4013      	ands	r3, r2
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x5bc>
 8001922:	e06a      	b.n	80019fa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800192a:	4917      	ldr	r1, [pc, #92]	@ (8001988 <HAL_RCC_OscConfig+0x640>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f968 	bl	8000c04 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f963 	bl	8000c04 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e057      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_OscConfig+0x62c>)
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <HAL_RCC_OscConfig+0x648>)
 8001960:	400a      	ands	r2, r1
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	e049      	b.n	80019fa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d112      	bne.n	8001994 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e044      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	40021000 	.word	0x40021000
 8001978:	40007000 	.word	0x40007000
 800197c:	00001388 	.word	0x00001388
 8001980:	efffffff 	.word	0xefffffff
 8001984:	ffbfffff 	.word	0xffbfffff
 8001988:	feffffff 	.word	0xfeffffff
 800198c:	11c1808c 	.word	0x11c1808c
 8001990:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x6bc>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2203      	movs	r2, #3
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d126      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2270      	movs	r2, #112	@ 0x70
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d11f      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	23fe      	movs	r3, #254	@ 0xfe
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	23f8      	movs	r3, #248	@ 0xf8
 80019cc:	039b      	lsls	r3, r3, #14
 80019ce:	401a      	ands	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10e      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	23e0      	movs	r3, #224	@ 0xe0
 80019dc:	051b      	lsls	r3, r3, #20
 80019de:	401a      	ands	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	0f5b      	lsrs	r3, r3, #29
 80019ec:	075a      	lsls	r2, r3, #29
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b008      	add	sp, #32
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0e9      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b76      	ldr	r3, [pc, #472]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2207      	movs	r2, #7
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d91e      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4393      	bics	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	4b70      	ldr	r3, [pc, #448]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f8e2 	bl	8000c04 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f8dd 	bl	8000c04 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a6a      	ldr	r2, [pc, #424]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0ca      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5a:	4b67      	ldr	r3, [pc, #412]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d006      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a7c:	4b60      	ldr	r3, [pc, #384]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b5f      	ldr	r3, [pc, #380]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	21e0      	movs	r1, #224	@ 0xe0
 8001a84:	01c9      	lsls	r1, r1, #7
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001c04 <HAL_RCC_ClockConfig+0x1fc>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	4b59      	ldr	r3, [pc, #356]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d057      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d12b      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e097      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	049b      	lsls	r3, r3, #18
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d11f      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e08b      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d113      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e07f      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af8:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e074      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b06:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e06d      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b14:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2207      	movs	r2, #7
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b28:	f7ff f86c 	bl	8000c04 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f867 	bl	8000c04 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e054      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1ec      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d21e      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f844 	bl	8000c04 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f83f 	bl	8000c04 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e02c      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4013      	ands	r3, r2
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	@ (8001c08 <HAL_RCC_ClockConfig+0x200>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc2:	f000 f829 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	220f      	movs	r2, #15
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_RCC_ClockConfig+0x204>)
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	58d3      	ldr	r3, [r2, r3]
 8001bd8:	221f      	movs	r2, #31
 8001bda:	4013      	ands	r3, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_ClockConfig+0x208>)
 8001be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7fe ffaf 	bl	8000b4c <HAL_InitTick>
 8001bee:	0003      	movs	r3, r0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffff0ff 	.word	0xfffff0ff
 8001c08:	ffff8fff 	.word	0xffff8fff
 8001c0c:	0800482c 	.word	0x0800482c
 8001c10:	20000004 	.word	0x20000004
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2238      	movs	r2, #56	@ 0x38
 8001c24:	4013      	ands	r3, r2
 8001c26:	d10f      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c28:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0adb      	lsrs	r3, r3, #11
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4013      	ands	r3, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	4835      	ldr	r0, [pc, #212]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c3e:	f7fe fa6b 	bl	8000118 <__udivsi3>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e05d      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2238      	movs	r2, #56	@ 0x38
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c54:	4b30      	ldr	r3, [pc, #192]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e054      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2238      	movs	r2, #56	@ 0x38
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d138      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	4824      	ldr	r0, [pc, #144]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c88:	f7fe fa46 	bl	8000118 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	0019      	movs	r1, r3
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	227f      	movs	r2, #127	@ 0x7f
 8001c98:	4013      	ands	r3, r2
 8001c9a:	434b      	muls	r3, r1
 8001c9c:	617b      	str	r3, [r7, #20]
        break;
 8001c9e:	e00d      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	481c      	ldr	r0, [pc, #112]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca4:	f7fe fa38 	bl	8000118 <__udivsi3>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	227f      	movs	r2, #127	@ 0x7f
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	434b      	muls	r3, r1
 8001cb8:	617b      	str	r3, [r7, #20]
        break;
 8001cba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0f5b      	lsrs	r3, r3, #29
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	6978      	ldr	r0, [r7, #20]
 8001cce:	f7fe fa23 	bl	8000118 <__udivsi3>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2238      	movs	r2, #56	@ 0x38
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d103      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2238      	movs	r2, #56	@ 0x38
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b18      	cmp	r3, #24
 8001cf6:	d103      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cf8:	23fa      	movs	r3, #250	@ 0xfa
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e001      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d04:	693b      	ldr	r3, [r7, #16]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d34:	f7ff fff2 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d38:	0004      	movs	r4, r0
 8001d3a:	f7ff faf9 	bl	8001330 <LL_RCC_GetAPB1Prescaler>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	0b1a      	lsrs	r2, r3, #12
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	58d3      	ldr	r3, [r2, r3]
 8001d48:	221f      	movs	r2, #31
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	40dc      	lsrs	r4, r3
 8001d4e:	0023      	movs	r3, r4
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	0800486c 	.word	0x0800486c

08001d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d64:	2313      	movs	r3, #19
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d80:	e0ad      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2011      	movs	r0, #17
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	055b      	lsls	r3, r3, #21
 8001d92:	4013      	ands	r3, r2
 8001d94:	d110      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0549      	lsls	r1, r1, #21
 8001da0:	430a      	orrs	r2, r1
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da4:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dbe:	2180      	movs	r1, #128	@ 0x80
 8001dc0:	0049      	lsls	r1, r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff1d 	bl	8000c04 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dce:	e00b      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe ff18 	bl	8000c04 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d904      	bls.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dde:	2313      	movs	r3, #19
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2203      	movs	r2, #3
 8001de4:	701a      	strb	r2, [r3, #0]
        break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de8:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001df4:	2313      	movs	r3, #19
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d15e      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e02:	23c0      	movs	r3, #192	@ 0xc0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d014      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	4a24      	ldr	r2, [pc, #144]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	0249      	lsls	r1, r1, #9
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e38:	491e      	ldr	r1, [pc, #120]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d016      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe feda 	bl	8000c04 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e54:	e00c      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fed5 	bl	8000c04 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d904      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e66:	2313      	movs	r3, #19
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	701a      	strb	r2, [r3, #0]
            break;
 8001e6e:	e004      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d0ed      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e7a:	2313      	movs	r3, #19
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e98:	e016      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2213      	movs	r2, #19
 8001ea0:	18ba      	adds	r2, r7, r2
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	fffffcff 	.word	0xfffffcff
 8001eb4:	fffeffff 	.word	0xfffeffff
 8001eb8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2213      	movs	r2, #19
 8001ec2:	18ba      	adds	r2, r7, r2
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ec8:	2311      	movs	r3, #17
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4bb6      	ldr	r3, [pc, #728]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed6:	4bb5      	ldr	r3, [pc, #724]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed8:	49b5      	ldr	r1, [pc, #724]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee8:	4bb0      	ldr	r3, [pc, #704]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eec:	2203      	movs	r2, #3
 8001eee:	4393      	bics	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4bad      	ldr	r3, [pc, #692]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f06:	4ba9      	ldr	r3, [pc, #676]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4ba5      	ldr	r3, [pc, #660]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f24:	4ba1      	ldr	r3, [pc, #644]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	2230      	movs	r2, #48	@ 0x30
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b9e      	ldr	r3, [pc, #632]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f42:	4b9a      	ldr	r3, [pc, #616]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	4a9b      	ldr	r2, [pc, #620]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	4b96      	ldr	r3, [pc, #600]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	015b      	lsls	r3, r3, #5
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001f62:	4b92      	ldr	r3, [pc, #584]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	4a94      	ldr	r2, [pc, #592]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	4b8e      	ldr	r3, [pc, #568]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f82:	4b8a      	ldr	r3, [pc, #552]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	4a8d      	ldr	r2, [pc, #564]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f90:	4b86      	ldr	r3, [pc, #536]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fa2:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	4a86      	ldr	r2, [pc, #536]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc0:	4b7a      	ldr	r3, [pc, #488]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	4b77      	ldr	r3, [pc, #476]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2240      	movs	r2, #64	@ 0x40
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fde:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe2:	4a79      	ldr	r2, [pc, #484]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	4b6f      	ldr	r3, [pc, #444]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	01db      	lsls	r3, r3, #7
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d015      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	0899      	lsrs	r1, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800200a:	4b68      	ldr	r3, [pc, #416]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200c:	430a      	orrs	r2, r1
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	05db      	lsls	r3, r3, #23
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800201c:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b62      	ldr	r3, [pc, #392]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0249      	lsls	r1, r1, #9
 8002026:	430a      	orrs	r2, r1
 8002028:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002036:	4b5d      	ldr	r3, [pc, #372]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	039b      	lsls	r3, r3, #14
 8002052:	4013      	ands	r3, r2
 8002054:	d016      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002056:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	4a5c      	ldr	r2, [pc, #368]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002064:	4b51      	ldr	r3, [pc, #324]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	430a      	orrs	r2, r1
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	03db      	lsls	r3, r3, #15
 8002072:	429a      	cmp	r2, r3
 8002074:	d106      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002076:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	0449      	lsls	r1, r1, #17
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	03db      	lsls	r3, r3, #15
 800208c:	4013      	ands	r3, r2
 800208e:	d016      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002090:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	4a4e      	ldr	r2, [pc, #312]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800209e:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	045b      	lsls	r3, r3, #17
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020b0:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	0449      	lsls	r1, r1, #17
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4013      	ands	r3, r2
 80020c8:	d014      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	2203      	movs	r2, #3
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d106      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020e6:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0249      	lsls	r1, r1, #9
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	019b      	lsls	r3, r3, #6
 80020fc:	4013      	ands	r3, r2
 80020fe:	d014      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002100:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	220c      	movs	r2, #12
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800210e:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002110:	430a      	orrs	r2, r1
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	2b04      	cmp	r3, #4
 800211a:	d106      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	0249      	lsls	r1, r1, #9
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	045b      	lsls	r3, r3, #17
 8002132:	4013      	ands	r3, r2
 8002134:	d016      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002136:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a22      	ldr	r2, [pc, #136]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002146:	430a      	orrs	r2, r1
 8002148:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800214e:	2380      	movs	r3, #128	@ 0x80
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	429a      	cmp	r2, r3
 8002154:	d106      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215c:	2180      	movs	r1, #128	@ 0x80
 800215e:	0449      	lsls	r1, r1, #17
 8002160:	430a      	orrs	r2, r1
 8002162:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	049b      	lsls	r3, r3, #18
 800216c:	4013      	ands	r3, r2
 800216e:	d016      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	4a10      	ldr	r2, [pc, #64]	@ (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002180:	430a      	orrs	r2, r1
 8002182:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002196:	2180      	movs	r1, #128	@ 0x80
 8002198:	0449      	lsls	r1, r1, #17
 800219a:	430a      	orrs	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800219e:	2312      	movs	r3, #18
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	efffffff 	.word	0xefffffff
 80021b4:	fffff3ff 	.word	0xfffff3ff
 80021b8:	fffffcff 	.word	0xfffffcff
 80021bc:	fff3ffff 	.word	0xfff3ffff
 80021c0:	ffcfffff 	.word	0xffcfffff
 80021c4:	ffffcfff 	.word	0xffffcfff
 80021c8:	ffff3fff 	.word	0xffff3fff
 80021cc:	ffbfffff 	.word	0xffbfffff
 80021d0:	feffffff 	.word	0xfeffffff

080021d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e046      	b.n	8002274 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2288      	movs	r2, #136	@ 0x88
 80021ea:	589b      	ldr	r3, [r3, r2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2284      	movs	r2, #132	@ 0x84
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7fe fb2a 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2288      	movs	r2, #136	@ 0x88
 8002204:	2124      	movs	r1, #36	@ 0x24
 8002206:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 ff68 	bl	80030f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fc0e 	bl	8002a4c <UART_SetConfig>
 8002230:	0003      	movs	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e01c      	b.n	8002274 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	490d      	ldr	r1, [pc, #52]	@ (800227c <HAL_UART_Init+0xa8>)
 8002246:	400a      	ands	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	212a      	movs	r1, #42	@ 0x2a
 8002256:	438a      	bics	r2, r1
 8002258:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fff7 	bl	8003260 <UART_CheckIdleState>
 8002272:	0003      	movs	r3, r0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}
 800227c:	ffffb7ff 	.word	0xffffb7ff

08002280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2288      	movs	r2, #136	@ 0x88
 8002294:	589b      	ldr	r3, [r3, r2]
 8002296:	2b20      	cmp	r3, #32
 8002298:	d000      	beq.n	800229c <HAL_UART_Transmit+0x1c>
 800229a:	e090      	b.n	80023be <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_UART_Transmit+0x2a>
 80022a2:	1dbb      	adds	r3, r7, #6
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e088      	b.n	80023c0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d109      	bne.n	80022ce <HAL_UART_Transmit+0x4e>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	d001      	beq.n	80022ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e078      	b.n	80023c0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2290      	movs	r2, #144	@ 0x90
 80022d2:	2100      	movs	r1, #0
 80022d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2288      	movs	r2, #136	@ 0x88
 80022da:	2121      	movs	r1, #33	@ 0x21
 80022dc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022de:	f7fe fc91 	bl	8000c04 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1dba      	adds	r2, r7, #6
 80022ea:	2154      	movs	r1, #84	@ 0x54
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1dba      	adds	r2, r7, #6
 80022f4:	2156      	movs	r1, #86	@ 0x56
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	429a      	cmp	r2, r3
 8002304:	d108      	bne.n	8002318 <HAL_UART_Transmit+0x98>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e003      	b.n	8002320 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002320:	e030      	b.n	8002384 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	0013      	movs	r3, r2
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	f001 f840 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d005      	beq.n	8002344 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2288      	movs	r2, #136	@ 0x88
 800233c:	2120      	movs	r1, #32
 800233e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03d      	b.n	80023c0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	001a      	movs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	05d2      	lsls	r2, r2, #23
 8002356:	0dd2      	lsrs	r2, r2, #23
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3302      	adds	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e007      	b.n	8002372 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2256      	movs	r2, #86	@ 0x56
 8002376:	5a9b      	ldrh	r3, [r3, r2]
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b299      	uxth	r1, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2256      	movs	r2, #86	@ 0x56
 8002382:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2256      	movs	r2, #86	@ 0x56
 8002388:	5a9b      	ldrh	r3, [r3, r2]
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1c8      	bne.n	8002322 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0013      	movs	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	2140      	movs	r1, #64	@ 0x40
 800239e:	f001 f809 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2288      	movs	r2, #136	@ 0x88
 80023aa:	2120      	movs	r1, #32
 80023ac:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e006      	b.n	80023c0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2288      	movs	r2, #136	@ 0x88
 80023b6:	2120      	movs	r1, #32
 80023b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b008      	add	sp, #32
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b0aa      	sub	sp, #168	@ 0xa8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	22a4      	movs	r2, #164	@ 0xa4
 80023d8:	18b9      	adds	r1, r7, r2
 80023da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	20a0      	movs	r0, #160	@ 0xa0
 80023e4:	1839      	adds	r1, r7, r0
 80023e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	249c      	movs	r4, #156	@ 0x9c
 80023f0:	1939      	adds	r1, r7, r4
 80023f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023f4:	0011      	movs	r1, r2
 80023f6:	18bb      	adds	r3, r7, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4aa2      	ldr	r2, [pc, #648]	@ (8002684 <HAL_UART_IRQHandler+0x2bc>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	2298      	movs	r2, #152	@ 0x98
 8002400:	18bd      	adds	r5, r7, r2
 8002402:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002404:	18bb      	adds	r3, r7, r2
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11a      	bne.n	8002442 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800240c:	187b      	adds	r3, r7, r1
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d015      	beq.n	8002442 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002416:	183b      	adds	r3, r7, r0
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2220      	movs	r2, #32
 800241c:	4013      	ands	r3, r2
 800241e:	d105      	bne.n	800242c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002420:	193b      	adds	r3, r7, r4
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	055b      	lsls	r3, r3, #21
 8002428:	4013      	ands	r3, r2
 800242a:	d00a      	beq.n	8002442 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002430:	2b00      	cmp	r3, #0
 8002432:	d100      	bne.n	8002436 <HAL_UART_IRQHandler+0x6e>
 8002434:	e2dc      	b.n	80029f0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	0010      	movs	r0, r2
 800243e:	4798      	blx	r3
      }
      return;
 8002440:	e2d6      	b.n	80029f0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002442:	2398      	movs	r3, #152	@ 0x98
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d100      	bne.n	800244e <HAL_UART_IRQHandler+0x86>
 800244c:	e122      	b.n	8002694 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800244e:	239c      	movs	r3, #156	@ 0x9c
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a8c      	ldr	r2, [pc, #560]	@ (8002688 <HAL_UART_IRQHandler+0x2c0>)
 8002456:	4013      	ands	r3, r2
 8002458:	d106      	bne.n	8002468 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800245a:	23a0      	movs	r3, #160	@ 0xa0
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a8a      	ldr	r2, [pc, #552]	@ (800268c <HAL_UART_IRQHandler+0x2c4>)
 8002462:	4013      	ands	r3, r2
 8002464:	d100      	bne.n	8002468 <HAL_UART_IRQHandler+0xa0>
 8002466:	e115      	b.n	8002694 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002468:	23a4      	movs	r3, #164	@ 0xa4
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d012      	beq.n	800249a <HAL_UART_IRQHandler+0xd2>
 8002474:	23a0      	movs	r3, #160	@ 0xa0
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d00b      	beq.n	800249a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2290      	movs	r2, #144	@ 0x90
 800248e:	589b      	ldr	r3, [r3, r2]
 8002490:	2201      	movs	r2, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2190      	movs	r1, #144	@ 0x90
 8002498:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800249a:	23a4      	movs	r3, #164	@ 0xa4
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d011      	beq.n	80024ca <HAL_UART_IRQHandler+0x102>
 80024a6:	239c      	movs	r3, #156	@ 0x9c
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	4013      	ands	r3, r2
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2202      	movs	r2, #2
 80024b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2290      	movs	r2, #144	@ 0x90
 80024be:	589b      	ldr	r3, [r3, r2]
 80024c0:	2204      	movs	r2, #4
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2190      	movs	r1, #144	@ 0x90
 80024c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ca:	23a4      	movs	r3, #164	@ 0xa4
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2204      	movs	r2, #4
 80024d2:	4013      	ands	r3, r2
 80024d4:	d011      	beq.n	80024fa <HAL_UART_IRQHandler+0x132>
 80024d6:	239c      	movs	r3, #156	@ 0x9c
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d00b      	beq.n	80024fa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2290      	movs	r2, #144	@ 0x90
 80024ee:	589b      	ldr	r3, [r3, r2]
 80024f0:	2202      	movs	r2, #2
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2190      	movs	r1, #144	@ 0x90
 80024f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024fa:	23a4      	movs	r3, #164	@ 0xa4
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2208      	movs	r2, #8
 8002502:	4013      	ands	r3, r2
 8002504:	d017      	beq.n	8002536 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002506:	23a0      	movs	r3, #160	@ 0xa0
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	4013      	ands	r3, r2
 8002510:	d105      	bne.n	800251e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002512:	239c      	movs	r3, #156	@ 0x9c
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a5b      	ldr	r2, [pc, #364]	@ (8002688 <HAL_UART_IRQHandler+0x2c0>)
 800251a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2208      	movs	r2, #8
 8002524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2290      	movs	r2, #144	@ 0x90
 800252a:	589b      	ldr	r3, [r3, r2]
 800252c:	2208      	movs	r2, #8
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2190      	movs	r1, #144	@ 0x90
 8002534:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002536:	23a4      	movs	r3, #164	@ 0xa4
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4013      	ands	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_UART_IRQHandler+0x1a4>
 8002544:	23a0      	movs	r3, #160	@ 0xa0
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	04db      	lsls	r3, r3, #19
 800254e:	4013      	ands	r3, r2
 8002550:	d00c      	beq.n	800256c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2290      	movs	r2, #144	@ 0x90
 8002560:	589b      	ldr	r3, [r3, r2]
 8002562:	2220      	movs	r2, #32
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2190      	movs	r1, #144	@ 0x90
 800256a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2290      	movs	r2, #144	@ 0x90
 8002570:	589b      	ldr	r3, [r3, r2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d100      	bne.n	8002578 <HAL_UART_IRQHandler+0x1b0>
 8002576:	e23d      	b.n	80029f4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002578:	23a4      	movs	r3, #164	@ 0xa4
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2220      	movs	r2, #32
 8002580:	4013      	ands	r3, r2
 8002582:	d015      	beq.n	80025b0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002584:	23a0      	movs	r3, #160	@ 0xa0
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d106      	bne.n	800259e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002590:	239c      	movs	r3, #156	@ 0x9c
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	055b      	lsls	r3, r3, #21
 800259a:	4013      	ands	r3, r2
 800259c:	d008      	beq.n	80025b0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2290      	movs	r2, #144	@ 0x90
 80025b4:	589b      	ldr	r3, [r3, r2]
 80025b6:	2194      	movs	r1, #148	@ 0x94
 80025b8:	187a      	adds	r2, r7, r1
 80025ba:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2240      	movs	r2, #64	@ 0x40
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b40      	cmp	r3, #64	@ 0x40
 80025c8:	d004      	beq.n	80025d4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2228      	movs	r2, #40	@ 0x28
 80025d0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025d2:	d04c      	beq.n	800266e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 ff5c 	bl	8003494 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2240      	movs	r2, #64	@ 0x40
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b40      	cmp	r3, #64	@ 0x40
 80025e8:	d13c      	bne.n	8002664 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ea:	f3ef 8310 	mrs	r3, PRIMASK
 80025ee:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	2090      	movs	r0, #144	@ 0x90
 80025f4:	183a      	adds	r2, r7, r0
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	2301      	movs	r3, #1
 80025fa:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025fe:	f383 8810 	msr	PRIMASK, r3
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	438a      	bics	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	183b      	adds	r3, r7, r0
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2280      	movs	r2, #128	@ 0x80
 8002626:	589b      	ldr	r3, [r3, r2]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	589b      	ldr	r3, [r3, r2]
 8002632:	4a17      	ldr	r2, [pc, #92]	@ (8002690 <HAL_UART_IRQHandler+0x2c8>)
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	589b      	ldr	r3, [r3, r2]
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe fc63 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d01c      	beq.n	8002680 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	2180      	movs	r1, #128	@ 0x80
 8002652:	5852      	ldr	r2, [r2, r1]
 8002654:	0010      	movs	r0, r2
 8002656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e012      	b.n	8002680 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f9e1 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002662:	e00d      	b.n	8002680 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f9dc 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e008      	b.n	8002680 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f9d7 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2290      	movs	r2, #144	@ 0x90
 800267a:	2100      	movs	r1, #0
 800267c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800267e:	e1b9      	b.n	80029f4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	46c0      	nop			@ (mov r8, r8)
    return;
 8002682:	e1b7      	b.n	80029f4 <HAL_UART_IRQHandler+0x62c>
 8002684:	0000080f 	.word	0x0000080f
 8002688:	10000001 	.word	0x10000001
 800268c:	04000120 	.word	0x04000120
 8002690:	08003561 	.word	0x08003561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d000      	beq.n	800269e <HAL_UART_IRQHandler+0x2d6>
 800269c:	e13e      	b.n	800291c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800269e:	23a4      	movs	r3, #164	@ 0xa4
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	d100      	bne.n	80026ac <HAL_UART_IRQHandler+0x2e4>
 80026aa:	e137      	b.n	800291c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026ac:	23a0      	movs	r3, #160	@ 0xa0
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2210      	movs	r2, #16
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_UART_IRQHandler+0x2f2>
 80026b8:	e130      	b.n	800291c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2240      	movs	r2, #64	@ 0x40
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d000      	beq.n	80026d2 <HAL_UART_IRQHandler+0x30a>
 80026d0:	e0a4      	b.n	800281c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	589b      	ldr	r3, [r3, r2]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	217e      	movs	r1, #126	@ 0x7e
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d100      	bne.n	80026ec <HAL_UART_IRQHandler+0x324>
 80026ea:	e185      	b.n	80029f8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	225c      	movs	r2, #92	@ 0x5c
 80026f0:	5a9b      	ldrh	r3, [r3, r2]
 80026f2:	187a      	adds	r2, r7, r1
 80026f4:	8812      	ldrh	r2, [r2, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d300      	bcc.n	80026fc <HAL_UART_IRQHandler+0x334>
 80026fa:	e17d      	b.n	80029f8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	187a      	adds	r2, r7, r1
 8002700:	215e      	movs	r1, #94	@ 0x5e
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	589b      	ldr	r3, [r3, r2]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	4013      	ands	r3, r2
 8002714:	d170      	bne.n	80027f8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002716:	f3ef 8310 	mrs	r3, PRIMASK
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800271e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002720:	2301      	movs	r3, #1
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002726:	f383 8810 	msr	PRIMASK, r3
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	49b4      	ldr	r1, [pc, #720]	@ (8002a08 <HAL_UART_IRQHandler+0x640>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002742:	f383 8810 	msr	PRIMASK, r3
}
 8002746:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002748:	f3ef 8310 	mrs	r3, PRIMASK
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800274e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	677b      	str	r3, [r7, #116]	@ 0x74
 8002752:	2301      	movs	r3, #1
 8002754:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	438a      	bics	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002770:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002774:	f383 8810 	msr	PRIMASK, r3
}
 8002778:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277a:	f3ef 8310 	mrs	r3, PRIMASK
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002782:	673b      	str	r3, [r7, #112]	@ 0x70
 8002784:	2301      	movs	r3, #1
 8002786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2140      	movs	r1, #64	@ 0x40
 800279c:	438a      	bics	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a6:	f383 8810 	msr	PRIMASK, r3
}
 80027aa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	228c      	movs	r2, #140	@ 0x8c
 80027b0:	2120      	movs	r1, #32
 80027b2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80027c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c4:	2301      	movs	r3, #1
 80027c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ca:	f383 8810 	msr	PRIMASK, r3
}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2110      	movs	r1, #16
 80027dc:	438a      	bics	r2, r1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	589b      	ldr	r3, [r3, r2]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7fe fb28 	bl	8000e48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	225c      	movs	r2, #92	@ 0x5c
 8002802:	5a9a      	ldrh	r2, [r3, r2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	215e      	movs	r1, #94	@ 0x5e
 8002808:	5a5b      	ldrh	r3, [r3, r1]
 800280a:	b29b      	uxth	r3, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f90d 	bl	8002a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800281a:	e0ed      	b.n	80029f8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	225c      	movs	r2, #92	@ 0x5c
 8002820:	5a99      	ldrh	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	225e      	movs	r2, #94	@ 0x5e
 8002826:	5a9b      	ldrh	r3, [r3, r2]
 8002828:	b29a      	uxth	r2, r3
 800282a:	208e      	movs	r0, #142	@ 0x8e
 800282c:	183b      	adds	r3, r7, r0
 800282e:	1a8a      	subs	r2, r1, r2
 8002830:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	225e      	movs	r2, #94	@ 0x5e
 8002836:	5a9b      	ldrh	r3, [r3, r2]
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d100      	bne.n	8002840 <HAL_UART_IRQHandler+0x478>
 800283e:	e0dd      	b.n	80029fc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002840:	183b      	adds	r3, r7, r0
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d100      	bne.n	800284a <HAL_UART_IRQHandler+0x482>
 8002848:	e0d8      	b.n	80029fc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284a:	f3ef 8310 	mrs	r3, PRIMASK
 800284e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002850:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002852:	2488      	movs	r4, #136	@ 0x88
 8002854:	193a      	adds	r2, r7, r4
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f383 8810 	msr	PRIMASK, r3
}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4967      	ldr	r1, [pc, #412]	@ (8002a0c <HAL_UART_IRQHandler+0x644>)
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	193b      	adds	r3, r7, r4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f383 8810 	msr	PRIMASK, r3
}
 8002880:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002882:	f3ef 8310 	mrs	r3, PRIMASK
 8002886:	61bb      	str	r3, [r7, #24]
  return(result);
 8002888:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800288a:	2484      	movs	r4, #132	@ 0x84
 800288c:	193a      	adds	r2, r7, r4
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	2301      	movs	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f383 8810 	msr	PRIMASK, r3
}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	495a      	ldr	r1, [pc, #360]	@ (8002a10 <HAL_UART_IRQHandler+0x648>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	228c      	movs	r2, #140	@ 0x8c
 80028be:	2120      	movs	r1, #32
 80028c0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ce:	f3ef 8310 	mrs	r3, PRIMASK
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d6:	2480      	movs	r4, #128	@ 0x80
 80028d8:	193a      	adds	r2, r7, r4
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2110      	movs	r1, #16
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800290c:	183b      	adds	r3, r7, r0
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f88d 	bl	8002a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800291a:	e06f      	b.n	80029fc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800291c:	23a4      	movs	r3, #164	@ 0xa4
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	035b      	lsls	r3, r3, #13
 8002926:	4013      	ands	r3, r2
 8002928:	d010      	beq.n	800294c <HAL_UART_IRQHandler+0x584>
 800292a:	239c      	movs	r3, #156	@ 0x9c
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	03db      	lsls	r3, r3, #15
 8002934:	4013      	ands	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	@ 0x80
 800293e:	0352      	lsls	r2, r2, #13
 8002940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 fe4e 	bl	80035e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800294a:	e05a      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800294c:	23a4      	movs	r3, #164	@ 0xa4
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	4013      	ands	r3, r2
 8002956:	d016      	beq.n	8002986 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002958:	23a0      	movs	r3, #160	@ 0xa0
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	4013      	ands	r3, r2
 8002962:	d106      	bne.n	8002972 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002964:	239c      	movs	r3, #156	@ 0x9c
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	4013      	ands	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002976:	2b00      	cmp	r3, #0
 8002978:	d042      	beq.n	8002a00 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	0010      	movs	r0, r2
 8002982:	4798      	blx	r3
    }
    return;
 8002984:	e03c      	b.n	8002a00 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002986:	23a4      	movs	r3, #164	@ 0xa4
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	4013      	ands	r3, r2
 8002990:	d00a      	beq.n	80029a8 <HAL_UART_IRQHandler+0x5e0>
 8002992:	23a0      	movs	r3, #160	@ 0xa0
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	@ 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 fdf4 	bl	800358e <UART_EndTransmit_IT>
    return;
 80029a6:	e02c      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029a8:	23a4      	movs	r3, #164	@ 0xa4
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	4013      	ands	r3, r2
 80029b4:	d00b      	beq.n	80029ce <HAL_UART_IRQHandler+0x606>
 80029b6:	23a0      	movs	r3, #160	@ 0xa0
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	05db      	lsls	r3, r3, #23
 80029c0:	4013      	ands	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fe1d 	bl	8003606 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029cc:	e019      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029ce:	23a4      	movs	r3, #164	@ 0xa4
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	045b      	lsls	r3, r3, #17
 80029d8:	4013      	ands	r3, r2
 80029da:	d012      	beq.n	8002a02 <HAL_UART_IRQHandler+0x63a>
 80029dc:	23a0      	movs	r3, #160	@ 0xa0
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da0d      	bge.n	8002a02 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fe04 	bl	80035f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029ee:	e008      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
      return;
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	e006      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
    return;
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	e004      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
      return;
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e002      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
      return;
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	e000      	b.n	8002a02 <HAL_UART_IRQHandler+0x63a>
    return;
 8002a00:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b02a      	add	sp, #168	@ 0xa8
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	fffffeff 	.word	0xfffffeff
 8002a0c:	fffffedf 	.word	0xfffffedf
 8002a10:	effffffe 	.word	0xeffffffe

08002a14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	1cbb      	adds	r3, r7, #2
 8002a40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b002      	add	sp, #8
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b090      	sub	sp, #64	@ 0x40
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a54:	231a      	movs	r3, #26
 8002a56:	2220      	movs	r2, #32
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	19db      	adds	r3, r3, r7
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4ac1      	ldr	r2, [pc, #772]	@ (8002d84 <UART_SetConfig+0x338>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4abc      	ldr	r2, [pc, #752]	@ (8002d88 <UART_SetConfig+0x33c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0018      	movs	r0, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4ab6      	ldr	r2, [pc, #728]	@ (8002d8c <UART_SetConfig+0x340>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <UART_SetConfig+0x80>
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4ab4      	ldr	r2, [pc, #720]	@ (8002d90 <UART_SetConfig+0x344>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	4ab0      	ldr	r2, [pc, #704]	@ (8002d94 <UART_SetConfig+0x348>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4393      	bics	r3, r2
 8002aec:	0018      	movs	r0, r3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	0003      	movs	r3, r0
 8002af8:	430b      	orrs	r3, r1
 8002afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4aa5      	ldr	r2, [pc, #660]	@ (8002d98 <UART_SetConfig+0x34c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d131      	bne.n	8002b6a <UART_SetConfig+0x11e>
 8002b06:	4ba5      	ldr	r3, [pc, #660]	@ (8002d9c <UART_SetConfig+0x350>)
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d01d      	beq.n	8002b4e <UART_SetConfig+0x102>
 8002b12:	d823      	bhi.n	8002b5c <UART_SetConfig+0x110>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d00c      	beq.n	8002b32 <UART_SetConfig+0xe6>
 8002b18:	d820      	bhi.n	8002b5c <UART_SetConfig+0x110>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <UART_SetConfig+0xd8>
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d00e      	beq.n	8002b40 <UART_SetConfig+0xf4>
 8002b22:	e01b      	b.n	8002b5c <UART_SetConfig+0x110>
 8002b24:	231b      	movs	r3, #27
 8002b26:	2220      	movs	r2, #32
 8002b28:	189b      	adds	r3, r3, r2
 8002b2a:	19db      	adds	r3, r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e154      	b.n	8002ddc <UART_SetConfig+0x390>
 8002b32:	231b      	movs	r3, #27
 8002b34:	2220      	movs	r2, #32
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e14d      	b.n	8002ddc <UART_SetConfig+0x390>
 8002b40:	231b      	movs	r3, #27
 8002b42:	2220      	movs	r2, #32
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	19db      	adds	r3, r3, r7
 8002b48:	2204      	movs	r2, #4
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e146      	b.n	8002ddc <UART_SetConfig+0x390>
 8002b4e:	231b      	movs	r3, #27
 8002b50:	2220      	movs	r2, #32
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	19db      	adds	r3, r3, r7
 8002b56:	2208      	movs	r2, #8
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e13f      	b.n	8002ddc <UART_SetConfig+0x390>
 8002b5c:	231b      	movs	r3, #27
 8002b5e:	2220      	movs	r2, #32
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	19db      	adds	r3, r3, r7
 8002b64:	2210      	movs	r2, #16
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e138      	b.n	8002ddc <UART_SetConfig+0x390>
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8c      	ldr	r2, [pc, #560]	@ (8002da0 <UART_SetConfig+0x354>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d131      	bne.n	8002bd8 <UART_SetConfig+0x18c>
 8002b74:	4b89      	ldr	r3, [pc, #548]	@ (8002d9c <UART_SetConfig+0x350>)
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	220c      	movs	r2, #12
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d01d      	beq.n	8002bbc <UART_SetConfig+0x170>
 8002b80:	d823      	bhi.n	8002bca <UART_SetConfig+0x17e>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d00c      	beq.n	8002ba0 <UART_SetConfig+0x154>
 8002b86:	d820      	bhi.n	8002bca <UART_SetConfig+0x17e>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <UART_SetConfig+0x146>
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d00e      	beq.n	8002bae <UART_SetConfig+0x162>
 8002b90:	e01b      	b.n	8002bca <UART_SetConfig+0x17e>
 8002b92:	231b      	movs	r3, #27
 8002b94:	2220      	movs	r2, #32
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	19db      	adds	r3, r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e11d      	b.n	8002ddc <UART_SetConfig+0x390>
 8002ba0:	231b      	movs	r3, #27
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	19db      	adds	r3, r3, r7
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e116      	b.n	8002ddc <UART_SetConfig+0x390>
 8002bae:	231b      	movs	r3, #27
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e10f      	b.n	8002ddc <UART_SetConfig+0x390>
 8002bbc:	231b      	movs	r3, #27
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e108      	b.n	8002ddc <UART_SetConfig+0x390>
 8002bca:	231b      	movs	r3, #27
 8002bcc:	2220      	movs	r2, #32
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	19db      	adds	r3, r3, r7
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e101      	b.n	8002ddc <UART_SetConfig+0x390>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a71      	ldr	r2, [pc, #452]	@ (8002da4 <UART_SetConfig+0x358>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d131      	bne.n	8002c46 <UART_SetConfig+0x1fa>
 8002be2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d9c <UART_SetConfig+0x350>)
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	2230      	movs	r2, #48	@ 0x30
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b30      	cmp	r3, #48	@ 0x30
 8002bec:	d01d      	beq.n	8002c2a <UART_SetConfig+0x1de>
 8002bee:	d823      	bhi.n	8002c38 <UART_SetConfig+0x1ec>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d00c      	beq.n	8002c0e <UART_SetConfig+0x1c2>
 8002bf4:	d820      	bhi.n	8002c38 <UART_SetConfig+0x1ec>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <UART_SetConfig+0x1b4>
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d00e      	beq.n	8002c1c <UART_SetConfig+0x1d0>
 8002bfe:	e01b      	b.n	8002c38 <UART_SetConfig+0x1ec>
 8002c00:	231b      	movs	r3, #27
 8002c02:	2220      	movs	r2, #32
 8002c04:	189b      	adds	r3, r3, r2
 8002c06:	19db      	adds	r3, r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e0e6      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2220      	movs	r2, #32
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	19db      	adds	r3, r3, r7
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e0df      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c1c:	231b      	movs	r3, #27
 8002c1e:	2220      	movs	r2, #32
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	19db      	adds	r3, r3, r7
 8002c24:	2204      	movs	r2, #4
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e0d8      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c2a:	231b      	movs	r3, #27
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	19db      	adds	r3, r3, r7
 8002c32:	2208      	movs	r2, #8
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e0d1      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c38:	231b      	movs	r3, #27
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	19db      	adds	r3, r3, r7
 8002c40:	2210      	movs	r2, #16
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e0ca      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a57      	ldr	r2, [pc, #348]	@ (8002da8 <UART_SetConfig+0x35c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d106      	bne.n	8002c5e <UART_SetConfig+0x212>
 8002c50:	231b      	movs	r3, #27
 8002c52:	2220      	movs	r2, #32
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	19db      	adds	r3, r3, r7
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e0be      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <UART_SetConfig+0x360>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d106      	bne.n	8002c76 <UART_SetConfig+0x22a>
 8002c68:	231b      	movs	r3, #27
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	189b      	adds	r3, r3, r2
 8002c6e:	19db      	adds	r3, r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e0b2      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <UART_SetConfig+0x364>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d106      	bne.n	8002c8e <UART_SetConfig+0x242>
 8002c80:	231b      	movs	r3, #27
 8002c82:	2220      	movs	r2, #32
 8002c84:	189b      	adds	r3, r3, r2
 8002c86:	19db      	adds	r3, r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e0a6      	b.n	8002ddc <UART_SetConfig+0x390>
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <UART_SetConfig+0x340>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d13e      	bne.n	8002d16 <UART_SetConfig+0x2ca>
 8002c98:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <UART_SetConfig+0x350>)
 8002c9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c9c:	23c0      	movs	r3, #192	@ 0xc0
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	22c0      	movs	r2, #192	@ 0xc0
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d027      	beq.n	8002cfa <UART_SetConfig+0x2ae>
 8002caa:	22c0      	movs	r2, #192	@ 0xc0
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d82a      	bhi.n	8002d08 <UART_SetConfig+0x2bc>
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d011      	beq.n	8002cde <UART_SetConfig+0x292>
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d822      	bhi.n	8002d08 <UART_SetConfig+0x2bc>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <UART_SetConfig+0x284>
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	00d2      	lsls	r2, r2, #3
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <UART_SetConfig+0x2a0>
 8002cce:	e01b      	b.n	8002d08 <UART_SetConfig+0x2bc>
 8002cd0:	231b      	movs	r3, #27
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e07e      	b.n	8002ddc <UART_SetConfig+0x390>
 8002cde:	231b      	movs	r3, #27
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	19db      	adds	r3, r3, r7
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e077      	b.n	8002ddc <UART_SetConfig+0x390>
 8002cec:	231b      	movs	r3, #27
 8002cee:	2220      	movs	r2, #32
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e070      	b.n	8002ddc <UART_SetConfig+0x390>
 8002cfa:	231b      	movs	r3, #27
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	19db      	adds	r3, r3, r7
 8002d02:	2208      	movs	r2, #8
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e069      	b.n	8002ddc <UART_SetConfig+0x390>
 8002d08:	231b      	movs	r3, #27
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	2210      	movs	r2, #16
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e062      	b.n	8002ddc <UART_SetConfig+0x390>
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <UART_SetConfig+0x344>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d157      	bne.n	8002dd0 <UART_SetConfig+0x384>
 8002d20:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <UART_SetConfig+0x350>)
 8002d22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d24:	23c0      	movs	r3, #192	@ 0xc0
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	22c0      	movs	r2, #192	@ 0xc0
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d040      	beq.n	8002db4 <UART_SetConfig+0x368>
 8002d32:	22c0      	movs	r2, #192	@ 0xc0
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d843      	bhi.n	8002dc2 <UART_SetConfig+0x376>
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d011      	beq.n	8002d66 <UART_SetConfig+0x31a>
 8002d42:	2280      	movs	r2, #128	@ 0x80
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d83b      	bhi.n	8002dc2 <UART_SetConfig+0x376>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <UART_SetConfig+0x30c>
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	0052      	lsls	r2, r2, #1
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <UART_SetConfig+0x328>
 8002d56:	e034      	b.n	8002dc2 <UART_SetConfig+0x376>
 8002d58:	231b      	movs	r3, #27
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	19db      	adds	r3, r3, r7
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e03a      	b.n	8002ddc <UART_SetConfig+0x390>
 8002d66:	231b      	movs	r3, #27
 8002d68:	2220      	movs	r2, #32
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	2202      	movs	r2, #2
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e033      	b.n	8002ddc <UART_SetConfig+0x390>
 8002d74:	231b      	movs	r3, #27
 8002d76:	2220      	movs	r2, #32
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	19db      	adds	r3, r3, r7
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e02c      	b.n	8002ddc <UART_SetConfig+0x390>
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	cfff69f3 	.word	0xcfff69f3
 8002d88:	ffffcfff 	.word	0xffffcfff
 8002d8c:	40008000 	.word	0x40008000
 8002d90:	40008400 	.word	0x40008400
 8002d94:	11fff4ff 	.word	0x11fff4ff
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40004400 	.word	0x40004400
 8002da4:	40004800 	.word	0x40004800
 8002da8:	40004c00 	.word	0x40004c00
 8002dac:	40005000 	.word	0x40005000
 8002db0:	40013c00 	.word	0x40013c00
 8002db4:	231b      	movs	r3, #27
 8002db6:	2220      	movs	r2, #32
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e00c      	b.n	8002ddc <UART_SetConfig+0x390>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	19db      	adds	r3, r3, r7
 8002dca:	2210      	movs	r2, #16
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e005      	b.n	8002ddc <UART_SetConfig+0x390>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	19db      	adds	r3, r3, r7
 8002dd8:	2210      	movs	r2, #16
 8002dda:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4ac1      	ldr	r2, [pc, #772]	@ (80030e8 <UART_SetConfig+0x69c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d005      	beq.n	8002df2 <UART_SetConfig+0x3a6>
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4ac0      	ldr	r2, [pc, #768]	@ (80030ec <UART_SetConfig+0x6a0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d000      	beq.n	8002df2 <UART_SetConfig+0x3a6>
 8002df0:	e093      	b.n	8002f1a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002df2:	231b      	movs	r3, #27
 8002df4:	2220      	movs	r2, #32
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	19db      	adds	r3, r3, r7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d015      	beq.n	8002e2c <UART_SetConfig+0x3e0>
 8002e00:	dc18      	bgt.n	8002e34 <UART_SetConfig+0x3e8>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d00d      	beq.n	8002e22 <UART_SetConfig+0x3d6>
 8002e06:	dc15      	bgt.n	8002e34 <UART_SetConfig+0x3e8>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <UART_SetConfig+0x3c6>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d005      	beq.n	8002e1c <UART_SetConfig+0x3d0>
 8002e10:	e010      	b.n	8002e34 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e12:	f7fe ff8d 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002e16:	0003      	movs	r3, r0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e1a:	e014      	b.n	8002e46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e1c:	4bb4      	ldr	r3, [pc, #720]	@ (80030f0 <UART_SetConfig+0x6a4>)
 8002e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e20:	e011      	b.n	8002e46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e22:	f7fe fef9 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002e26:	0003      	movs	r3, r0
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e2a:	e00c      	b.n	8002e46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e32:	e008      	b.n	8002e46 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e38:	231a      	movs	r3, #26
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	19db      	adds	r3, r3, r7
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
        break;
 8002e44:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d100      	bne.n	8002e4e <UART_SetConfig+0x402>
 8002e4c:	e135      	b.n	80030ba <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e52:	4ba8      	ldr	r3, [pc, #672]	@ (80030f4 <UART_SetConfig+0x6a8>)
 8002e54:	0052      	lsls	r2, r2, #1
 8002e56:	5ad3      	ldrh	r3, [r2, r3]
 8002e58:	0019      	movs	r1, r3
 8002e5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e5c:	f7fd f95c 	bl	8000118 <__udivsi3>
 8002e60:	0003      	movs	r3, r0
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d305      	bcc.n	8002e80 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d906      	bls.n	8002e8e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002e80:	231a      	movs	r3, #26
 8002e82:	2220      	movs	r2, #32
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	19db      	adds	r3, r3, r7
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e044      	b.n	8002f18 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e9a:	4b96      	ldr	r3, [pc, #600]	@ (80030f4 <UART_SetConfig+0x6a8>)
 8002e9c:	0052      	lsls	r2, r2, #1
 8002e9e:	5ad3      	ldrh	r3, [r2, r3]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	f7fd faa9 	bl	8000404 <__aeabi_uldivmod>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0e11      	lsrs	r1, r2, #24
 8002eb8:	021d      	lsls	r5, r3, #8
 8002eba:	430d      	orrs	r5, r1
 8002ebc:	0214      	lsls	r4, r2, #8
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	1900      	adds	r0, r0, r4
 8002ed0:	4169      	adcs	r1, r5
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f7fd fa90 	bl	8000404 <__aeabi_uldivmod>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	0013      	movs	r3, r2
 8002eea:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eee:	23c0      	movs	r3, #192	@ 0xc0
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d309      	bcc.n	8002f0a <UART_SetConfig+0x4be>
 8002ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	035b      	lsls	r3, r3, #13
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d204      	bcs.n	8002f0a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	e006      	b.n	8002f18 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002f0a:	231a      	movs	r3, #26
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	19db      	adds	r3, r3, r7
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002f16:	e0d0      	b.n	80030ba <UART_SetConfig+0x66e>
 8002f18:	e0cf      	b.n	80030ba <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d000      	beq.n	8002f28 <UART_SetConfig+0x4dc>
 8002f26:	e070      	b.n	800300a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002f28:	231b      	movs	r3, #27
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	19db      	adds	r3, r3, r7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d015      	beq.n	8002f62 <UART_SetConfig+0x516>
 8002f36:	dc18      	bgt.n	8002f6a <UART_SetConfig+0x51e>
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00d      	beq.n	8002f58 <UART_SetConfig+0x50c>
 8002f3c:	dc15      	bgt.n	8002f6a <UART_SetConfig+0x51e>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <UART_SetConfig+0x4fc>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d005      	beq.n	8002f52 <UART_SetConfig+0x506>
 8002f46:	e010      	b.n	8002f6a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f48:	f7fe fef2 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f50:	e014      	b.n	8002f7c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f52:	4b67      	ldr	r3, [pc, #412]	@ (80030f0 <UART_SetConfig+0x6a4>)
 8002f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f56:	e011      	b.n	8002f7c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f58:	f7fe fe5e 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f60:	e00c      	b.n	8002f7c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002f68:	e008      	b.n	8002f7c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002f6e:	231a      	movs	r3, #26
 8002f70:	2220      	movs	r2, #32
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
        break;
 8002f7a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d100      	bne.n	8002f84 <UART_SetConfig+0x538>
 8002f82:	e09a      	b.n	80030ba <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f88:	4b5a      	ldr	r3, [pc, #360]	@ (80030f4 <UART_SetConfig+0x6a8>)
 8002f8a:	0052      	lsls	r2, r2, #1
 8002f8c:	5ad3      	ldrh	r3, [r2, r3]
 8002f8e:	0019      	movs	r1, r3
 8002f90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f92:	f7fd f8c1 	bl	8000118 <__udivsi3>
 8002f96:	0003      	movs	r3, r0
 8002f98:	005a      	lsls	r2, r3, #1
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	0010      	movs	r0, r2
 8002faa:	f7fd f8b5 	bl	8000118 <__udivsi3>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d921      	bls.n	8002ffc <UART_SetConfig+0x5b0>
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	025b      	lsls	r3, r3, #9
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d21c      	bcs.n	8002ffc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	200e      	movs	r0, #14
 8002fc8:	2420      	movs	r4, #32
 8002fca:	1903      	adds	r3, r0, r4
 8002fcc:	19db      	adds	r3, r3, r7
 8002fce:	210f      	movs	r1, #15
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2207      	movs	r2, #7
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b299      	uxth	r1, r3
 8002fe0:	1903      	adds	r3, r0, r4
 8002fe2:	19db      	adds	r3, r3, r7
 8002fe4:	1902      	adds	r2, r0, r4
 8002fe6:	19d2      	adds	r2, r2, r7
 8002fe8:	8812      	ldrh	r2, [r2, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1902      	adds	r2, r0, r4
 8002ff4:	19d2      	adds	r2, r2, r7
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	e05e      	b.n	80030ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002ffc:	231a      	movs	r3, #26
 8002ffe:	2220      	movs	r2, #32
 8003000:	189b      	adds	r3, r3, r2
 8003002:	19db      	adds	r3, r3, r7
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e057      	b.n	80030ba <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800300a:	231b      	movs	r3, #27
 800300c:	2220      	movs	r2, #32
 800300e:	189b      	adds	r3, r3, r2
 8003010:	19db      	adds	r3, r3, r7
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d015      	beq.n	8003044 <UART_SetConfig+0x5f8>
 8003018:	dc18      	bgt.n	800304c <UART_SetConfig+0x600>
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00d      	beq.n	800303a <UART_SetConfig+0x5ee>
 800301e:	dc15      	bgt.n	800304c <UART_SetConfig+0x600>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <UART_SetConfig+0x5de>
 8003024:	2b02      	cmp	r3, #2
 8003026:	d005      	beq.n	8003034 <UART_SetConfig+0x5e8>
 8003028:	e010      	b.n	800304c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800302a:	f7fe fe81 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800302e:	0003      	movs	r3, r0
 8003030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003032:	e014      	b.n	800305e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <UART_SetConfig+0x6a4>)
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003038:	e011      	b.n	800305e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7fe fded 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800303e:	0003      	movs	r3, r0
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003042:	e00c      	b.n	800305e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800304a:	e008      	b.n	800305e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003050:	231a      	movs	r3, #26
 8003052:	2220      	movs	r2, #32
 8003054:	189b      	adds	r3, r3, r2
 8003056:	19db      	adds	r3, r3, r7
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
        break;
 800305c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800305e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d02a      	beq.n	80030ba <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003068:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <UART_SetConfig+0x6a8>)
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	5ad3      	ldrh	r3, [r2, r3]
 800306e:	0019      	movs	r1, r3
 8003070:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003072:	f7fd f851 	bl	8000118 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	001a      	movs	r2, r3
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	18d2      	adds	r2, r2, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f7fd f845 	bl	8000118 <__udivsi3>
 800308e:	0003      	movs	r3, r0
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d90a      	bls.n	80030ae <UART_SetConfig+0x662>
 8003098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	025b      	lsls	r3, r3, #9
 800309e:	429a      	cmp	r2, r3
 80030a0:	d205      	bcs.n	80030ae <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	e005      	b.n	80030ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80030ae:	231a      	movs	r3, #26
 80030b0:	2220      	movs	r2, #32
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	226a      	movs	r2, #106	@ 0x6a
 80030be:	2101      	movs	r1, #1
 80030c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	2268      	movs	r2, #104	@ 0x68
 80030c6:	2101      	movs	r1, #1
 80030c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2200      	movs	r2, #0
 80030ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	2200      	movs	r2, #0
 80030d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030d6:	231a      	movs	r3, #26
 80030d8:	2220      	movs	r2, #32
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	19db      	adds	r3, r3, r7
 80030de:	781b      	ldrb	r3, [r3, #0]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b010      	add	sp, #64	@ 0x40
 80030e6:	bdb0      	pop	{r4, r5, r7, pc}
 80030e8:	40008000 	.word	0x40008000
 80030ec:	40008400 	.word	0x40008400
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	0800488c 	.word	0x0800488c

080030f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	2208      	movs	r2, #8
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a4a      	ldr	r2, [pc, #296]	@ (800323c <UART_AdvFeatureConfig+0x144>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	2201      	movs	r2, #1
 8003128:	4013      	ands	r3, r2
 800312a:	d00b      	beq.n	8003144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a43      	ldr	r2, [pc, #268]	@ (8003240 <UART_AdvFeatureConfig+0x148>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	2202      	movs	r2, #2
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a3b      	ldr	r2, [pc, #236]	@ (8003244 <UART_AdvFeatureConfig+0x14c>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	2204      	movs	r2, #4
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a34      	ldr	r2, [pc, #208]	@ (8003248 <UART_AdvFeatureConfig+0x150>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d00b      	beq.n	80031aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <UART_AdvFeatureConfig+0x154>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	2220      	movs	r2, #32
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a25      	ldr	r2, [pc, #148]	@ (8003250 <UART_AdvFeatureConfig+0x158>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	2240      	movs	r2, #64	@ 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	d01d      	beq.n	8003212 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003254 <UART_AdvFeatureConfig+0x15c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10b      	bne.n	8003212 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <UART_AdvFeatureConfig+0x160>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	2280      	movs	r2, #128	@ 0x80
 8003218:	4013      	ands	r3, r2
 800321a:	d00b      	beq.n	8003234 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a0e      	ldr	r2, [pc, #56]	@ (800325c <UART_AdvFeatureConfig+0x164>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
  }
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	ffff7fff 	.word	0xffff7fff
 8003240:	fffdffff 	.word	0xfffdffff
 8003244:	fffeffff 	.word	0xfffeffff
 8003248:	fffbffff 	.word	0xfffbffff
 800324c:	ffffefff 	.word	0xffffefff
 8003250:	ffffdfff 	.word	0xffffdfff
 8003254:	ffefffff 	.word	0xffefffff
 8003258:	ff9fffff 	.word	0xff9fffff
 800325c:	fff7ffff 	.word	0xfff7ffff

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b092      	sub	sp, #72	@ 0x48
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2290      	movs	r2, #144	@ 0x90
 800326c:	2100      	movs	r1, #0
 800326e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003270:	f7fd fcc8 	bl	8000c04 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2208      	movs	r2, #8
 8003280:	4013      	ands	r3, r2
 8003282:	2b08      	cmp	r3, #8
 8003284:	d12d      	bne.n	80032e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	0391      	lsls	r1, r2, #14
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4a47      	ldr	r2, [pc, #284]	@ (80033ac <UART_CheckIdleState+0x14c>)
 8003290:	9200      	str	r2, [sp, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	f000 f88e 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d022      	beq.n	80032e2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a6:	2301      	movs	r3, #1
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	438a      	bics	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2288      	movs	r2, #136	@ 0x88
 80032d2:	2120      	movs	r1, #32
 80032d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	@ 0x84
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e060      	b.n	80033a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2204      	movs	r2, #4
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d146      	bne.n	800337e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f2:	2280      	movs	r2, #128	@ 0x80
 80032f4:	03d1      	lsls	r1, r2, #15
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4a2c      	ldr	r2, [pc, #176]	@ (80033ac <UART_CheckIdleState+0x14c>)
 80032fa:	9200      	str	r2, [sp, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f000 f859 	bl	80033b4 <UART_WaitOnFlagUntilTimeout>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d03b      	beq.n	800337e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003306:	f3ef 8310 	mrs	r3, PRIMASK
 800330a:	60fb      	str	r3, [r7, #12]
  return(result);
 800330c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4922      	ldr	r1, [pc, #136]	@ (80033b0 <UART_CheckIdleState+0x150>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003338:	f3ef 8310 	mrs	r3, PRIMASK
 800333c:	61bb      	str	r3, [r7, #24]
  return(result);
 800333e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
 8003342:	2301      	movs	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f383 8810 	msr	PRIMASK, r3
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	438a      	bics	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	228c      	movs	r2, #140	@ 0x8c
 800336e:	2120      	movs	r1, #32
 8003370:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2284      	movs	r2, #132	@ 0x84
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e012      	b.n	80033a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2288      	movs	r2, #136	@ 0x88
 8003382:	2120      	movs	r1, #32
 8003384:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	228c      	movs	r2, #140	@ 0x8c
 800338a:	2120      	movs	r1, #32
 800338c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2284      	movs	r2, #132	@ 0x84
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b010      	add	sp, #64	@ 0x40
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	01ffffff 	.word	0x01ffffff
 80033b0:	fffffedf 	.word	0xfffffedf

080033b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c4:	e051      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3301      	adds	r3, #1
 80033ca:	d04e      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fd fc1a 	bl	8000c04 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e051      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d03b      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b80      	cmp	r3, #128	@ 0x80
 80033f6:	d038      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d035      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2208      	movs	r2, #8
 8003406:	4013      	ands	r3, r2
 8003408:	2b08      	cmp	r3, #8
 800340a:	d111      	bne.n	8003430 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2208      	movs	r2, #8
 8003412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f83c 	bl	8003494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2290      	movs	r2, #144	@ 0x90
 8003420:	2108      	movs	r1, #8
 8003422:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2284      	movs	r2, #132	@ 0x84
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e02c      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	401a      	ands	r2, r3
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	429a      	cmp	r2, r3
 8003442:	d112      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2280      	movs	r2, #128	@ 0x80
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f81f 	bl	8003494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2290      	movs	r2, #144	@ 0x90
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2284      	movs	r2, #132	@ 0x84
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	425a      	negs	r2, r3
 800347a:	4153      	adcs	r3, r2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	001a      	movs	r2, r3
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d09e      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	@ 0x38
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	617b      	str	r3, [r7, #20]
  return(result);
 80034a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a6:	2301      	movs	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4926      	ldr	r1, [pc, #152]	@ (8003558 <UART_EndRxTransfer+0xc4>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	623b      	str	r3, [r7, #32]
  return(result);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d8:	2301      	movs	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	491b      	ldr	r1, [pc, #108]	@ (800355c <UART_EndRxTransfer+0xc8>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d118      	bne.n	800353a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003508:	f3ef 8310 	mrs	r3, PRIMASK
 800350c:	60bb      	str	r3, [r7, #8]
  return(result);
 800350e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003512:	2301      	movs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f383 8810 	msr	PRIMASK, r3
}
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2110      	movs	r1, #16
 800352a:	438a      	bics	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	228c      	movs	r2, #140	@ 0x8c
 800353e:	2120      	movs	r1, #32
 8003540:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b00e      	add	sp, #56	@ 0x38
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	fffffedf 	.word	0xfffffedf
 800355c:	effffffe 	.word	0xeffffffe

08003560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	225e      	movs	r2, #94	@ 0x5e
 8003572:	2100      	movs	r1, #0
 8003574:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2256      	movs	r2, #86	@ 0x56
 800357a:	2100      	movs	r1, #0
 800357c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0018      	movs	r0, r3
 8003582:	f7ff fa4f 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	60bb      	str	r3, [r7, #8]
  return(result);
 800359c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	2301      	movs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2140      	movs	r1, #64	@ 0x40
 80035b8:	438a      	bics	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2288      	movs	r2, #136	@ 0x88
 80035cc:	2120      	movs	r1, #32
 80035ce:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff fa1b 	bl	8002a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2284      	movs	r2, #132	@ 0x84
 8003624:	5c9b      	ldrb	r3, [r3, r2]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_UARTEx_DisableFifoMode+0x16>
 800362a:	2302      	movs	r3, #2
 800362c:	e027      	b.n	800367e <HAL_UARTEx_DisableFifoMode+0x66>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2284      	movs	r2, #132	@ 0x84
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2288      	movs	r2, #136	@ 0x88
 800363a:	2124      	movs	r1, #36	@ 0x24
 800363c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	438a      	bics	r2, r1
 8003654:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <HAL_UARTEx_DisableFifoMode+0x70>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2288      	movs	r2, #136	@ 0x88
 8003670:	2120      	movs	r1, #32
 8003672:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2284      	movs	r2, #132	@ 0x84
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b004      	add	sp, #16
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	dfffffff 	.word	0xdfffffff

0800368c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2284      	movs	r2, #132	@ 0x84
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e02e      	b.n	8003702 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2284      	movs	r2, #132	@ 0x84
 80036a8:	2101      	movs	r1, #1
 80036aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2288      	movs	r2, #136	@ 0x88
 80036b0:	2124      	movs	r1, #36	@ 0x24
 80036b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	438a      	bics	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	08d9      	lsrs	r1, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f854 	bl	8003790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2288      	movs	r2, #136	@ 0x88
 80036f4:	2120      	movs	r1, #32
 80036f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2284      	movs	r2, #132	@ 0x84
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2284      	movs	r2, #132	@ 0x84
 800371a:	5c9b      	ldrb	r3, [r3, r2]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003720:	2302      	movs	r3, #2
 8003722:	e02f      	b.n	8003784 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2284      	movs	r2, #132	@ 0x84
 8003728:	2101      	movs	r1, #1
 800372a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2288      	movs	r2, #136	@ 0x88
 8003730:	2124      	movs	r1, #36	@ 0x24
 8003732:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4a0e      	ldr	r2, [pc, #56]	@ (800378c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f813 	bl	8003790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2288      	movs	r2, #136	@ 0x88
 8003776:	2120      	movs	r1, #32
 8003778:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2284      	movs	r2, #132	@ 0x84
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b004      	add	sp, #16
 800378a:	bd80      	pop	{r7, pc}
 800378c:	f1ffffff 	.word	0xf1ffffff

08003790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	226a      	movs	r2, #106	@ 0x6a
 80037a4:	2101      	movs	r1, #1
 80037a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2268      	movs	r2, #104	@ 0x68
 80037ac:	2101      	movs	r1, #1
 80037ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037b0:	e043      	b.n	800383a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037b2:	260f      	movs	r6, #15
 80037b4:	19bb      	adds	r3, r7, r6
 80037b6:	2208      	movs	r2, #8
 80037b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037ba:	200e      	movs	r0, #14
 80037bc:	183b      	adds	r3, r7, r0
 80037be:	2208      	movs	r2, #8
 80037c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	0e5b      	lsrs	r3, r3, #25
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	240d      	movs	r4, #13
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	2107      	movs	r1, #7
 80037d2:	400a      	ands	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	0f5b      	lsrs	r3, r3, #29
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	250c      	movs	r5, #12
 80037e2:	197b      	adds	r3, r7, r5
 80037e4:	2107      	movs	r1, #7
 80037e6:	400a      	ands	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	197a      	adds	r2, r7, r5
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	4914      	ldr	r1, [pc, #80]	@ (8003844 <UARTEx_SetNbDataToProcess+0xb4>)
 80037f4:	5c8a      	ldrb	r2, [r1, r2]
 80037f6:	435a      	muls	r2, r3
 80037f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80037fa:	197b      	adds	r3, r7, r5
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	@ (8003848 <UARTEx_SetNbDataToProcess+0xb8>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003802:	0019      	movs	r1, r3
 8003804:	f7fc fd12 	bl	800022c <__divsi3>
 8003808:	0003      	movs	r3, r0
 800380a:	b299      	uxth	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	226a      	movs	r2, #106	@ 0x6a
 8003810:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003812:	19bb      	adds	r3, r7, r6
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	193a      	adds	r2, r7, r4
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	490a      	ldr	r1, [pc, #40]	@ (8003844 <UARTEx_SetNbDataToProcess+0xb4>)
 800381c:	5c8a      	ldrb	r2, [r1, r2]
 800381e:	435a      	muls	r2, r3
 8003820:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003822:	193b      	adds	r3, r7, r4
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	4a08      	ldr	r2, [pc, #32]	@ (8003848 <UARTEx_SetNbDataToProcess+0xb8>)
 8003828:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800382a:	0019      	movs	r1, r3
 800382c:	f7fc fcfe 	bl	800022c <__divsi3>
 8003830:	0003      	movs	r3, r0
 8003832:	b299      	uxth	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2268      	movs	r2, #104	@ 0x68
 8003838:	5299      	strh	r1, [r3, r2]
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b005      	add	sp, #20
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	080048a4 	.word	0x080048a4
 8003848:	080048ac 	.word	0x080048ac

0800384c <std>:
 800384c:	2300      	movs	r3, #0
 800384e:	b510      	push	{r4, lr}
 8003850:	0004      	movs	r4, r0
 8003852:	6003      	str	r3, [r0, #0]
 8003854:	6043      	str	r3, [r0, #4]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	@ 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6103      	str	r3, [r0, #16]
 8003860:	6143      	str	r3, [r0, #20]
 8003862:	6183      	str	r3, [r0, #24]
 8003864:	0019      	movs	r1, r3
 8003866:	2208      	movs	r2, #8
 8003868:	305c      	adds	r0, #92	@ 0x5c
 800386a:	f000 fa0f 	bl	8003c8c <memset>
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <std+0x50>)
 8003870:	6224      	str	r4, [r4, #32]
 8003872:	6263      	str	r3, [r4, #36]	@ 0x24
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <std+0x54>)
 8003876:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003878:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <std+0x58>)
 800387a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800387c:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <std+0x5c>)
 800387e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <std+0x60>)
 8003882:	429c      	cmp	r4, r3
 8003884:	d005      	beq.n	8003892 <std+0x46>
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <std+0x64>)
 8003888:	429c      	cmp	r4, r3
 800388a:	d002      	beq.n	8003892 <std+0x46>
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <std+0x68>)
 800388e:	429c      	cmp	r4, r3
 8003890:	d103      	bne.n	800389a <std+0x4e>
 8003892:	0020      	movs	r0, r4
 8003894:	3058      	adds	r0, #88	@ 0x58
 8003896:	f000 fa79 	bl	8003d8c <__retarget_lock_init_recursive>
 800389a:	bd10      	pop	{r4, pc}
 800389c:	08003ab5 	.word	0x08003ab5
 80038a0:	08003add 	.word	0x08003add
 80038a4:	08003b15 	.word	0x08003b15
 80038a8:	08003b41 	.word	0x08003b41
 80038ac:	20000124 	.word	0x20000124
 80038b0:	2000018c 	.word	0x2000018c
 80038b4:	200001f4 	.word	0x200001f4

080038b8 <stdio_exit_handler>:
 80038b8:	b510      	push	{r4, lr}
 80038ba:	4a03      	ldr	r2, [pc, #12]	@ (80038c8 <stdio_exit_handler+0x10>)
 80038bc:	4903      	ldr	r1, [pc, #12]	@ (80038cc <stdio_exit_handler+0x14>)
 80038be:	4804      	ldr	r0, [pc, #16]	@ (80038d0 <stdio_exit_handler+0x18>)
 80038c0:	f000 f86c 	bl	800399c <_fwalk_sglue>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	20000010 	.word	0x20000010
 80038cc:	0800461d 	.word	0x0800461d
 80038d0:	20000020 	.word	0x20000020

080038d4 <cleanup_stdio>:
 80038d4:	6841      	ldr	r1, [r0, #4]
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <cleanup_stdio+0x30>)
 80038d8:	b510      	push	{r4, lr}
 80038da:	0004      	movs	r4, r0
 80038dc:	4299      	cmp	r1, r3
 80038de:	d001      	beq.n	80038e4 <cleanup_stdio+0x10>
 80038e0:	f000 fe9c 	bl	800461c <_fflush_r>
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <cleanup_stdio+0x34>)
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <cleanup_stdio+0x1e>
 80038ec:	0020      	movs	r0, r4
 80038ee:	f000 fe95 	bl	800461c <_fflush_r>
 80038f2:	68e1      	ldr	r1, [r4, #12]
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <cleanup_stdio+0x38>)
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d002      	beq.n	8003900 <cleanup_stdio+0x2c>
 80038fa:	0020      	movs	r0, r4
 80038fc:	f000 fe8e 	bl	800461c <_fflush_r>
 8003900:	bd10      	pop	{r4, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000124 	.word	0x20000124
 8003908:	2000018c 	.word	0x2000018c
 800390c:	200001f4 	.word	0x200001f4

08003910 <global_stdio_init.part.0>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <global_stdio_init.part.0+0x28>)
 8003914:	4a09      	ldr	r2, [pc, #36]	@ (800393c <global_stdio_init.part.0+0x2c>)
 8003916:	2104      	movs	r1, #4
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4809      	ldr	r0, [pc, #36]	@ (8003940 <global_stdio_init.part.0+0x30>)
 800391c:	2200      	movs	r2, #0
 800391e:	f7ff ff95 	bl	800384c <std>
 8003922:	2201      	movs	r2, #1
 8003924:	2109      	movs	r1, #9
 8003926:	4807      	ldr	r0, [pc, #28]	@ (8003944 <global_stdio_init.part.0+0x34>)
 8003928:	f7ff ff90 	bl	800384c <std>
 800392c:	2202      	movs	r2, #2
 800392e:	2112      	movs	r1, #18
 8003930:	4805      	ldr	r0, [pc, #20]	@ (8003948 <global_stdio_init.part.0+0x38>)
 8003932:	f7ff ff8b 	bl	800384c <std>
 8003936:	bd10      	pop	{r4, pc}
 8003938:	2000025c 	.word	0x2000025c
 800393c:	080038b9 	.word	0x080038b9
 8003940:	20000124 	.word	0x20000124
 8003944:	2000018c 	.word	0x2000018c
 8003948:	200001f4 	.word	0x200001f4

0800394c <__sfp_lock_acquire>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4802      	ldr	r0, [pc, #8]	@ (8003958 <__sfp_lock_acquire+0xc>)
 8003950:	f000 fa1d 	bl	8003d8e <__retarget_lock_acquire_recursive>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	20000265 	.word	0x20000265

0800395c <__sfp_lock_release>:
 800395c:	b510      	push	{r4, lr}
 800395e:	4802      	ldr	r0, [pc, #8]	@ (8003968 <__sfp_lock_release+0xc>)
 8003960:	f000 fa16 	bl	8003d90 <__retarget_lock_release_recursive>
 8003964:	bd10      	pop	{r4, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	20000265 	.word	0x20000265

0800396c <__sinit>:
 800396c:	b510      	push	{r4, lr}
 800396e:	0004      	movs	r4, r0
 8003970:	f7ff ffec 	bl	800394c <__sfp_lock_acquire>
 8003974:	6a23      	ldr	r3, [r4, #32]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <__sinit+0x14>
 800397a:	f7ff ffef 	bl	800395c <__sfp_lock_release>
 800397e:	bd10      	pop	{r4, pc}
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__sinit+0x28>)
 8003982:	6223      	str	r3, [r4, #32]
 8003984:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <__sinit+0x2c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f6      	bne.n	800397a <__sinit+0xe>
 800398c:	f7ff ffc0 	bl	8003910 <global_stdio_init.part.0>
 8003990:	e7f3      	b.n	800397a <__sinit+0xe>
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	080038d5 	.word	0x080038d5
 8003998:	2000025c 	.word	0x2000025c

0800399c <_fwalk_sglue>:
 800399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399e:	0014      	movs	r4, r2
 80039a0:	2600      	movs	r6, #0
 80039a2:	9000      	str	r0, [sp, #0]
 80039a4:	9101      	str	r1, [sp, #4]
 80039a6:	68a5      	ldr	r5, [r4, #8]
 80039a8:	6867      	ldr	r7, [r4, #4]
 80039aa:	3f01      	subs	r7, #1
 80039ac:	d504      	bpl.n	80039b8 <_fwalk_sglue+0x1c>
 80039ae:	6824      	ldr	r4, [r4, #0]
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d1f8      	bne.n	80039a6 <_fwalk_sglue+0xa>
 80039b4:	0030      	movs	r0, r6
 80039b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039b8:	89ab      	ldrh	r3, [r5, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d908      	bls.n	80039d0 <_fwalk_sglue+0x34>
 80039be:	220e      	movs	r2, #14
 80039c0:	5eab      	ldrsh	r3, [r5, r2]
 80039c2:	3301      	adds	r3, #1
 80039c4:	d004      	beq.n	80039d0 <_fwalk_sglue+0x34>
 80039c6:	0029      	movs	r1, r5
 80039c8:	9800      	ldr	r0, [sp, #0]
 80039ca:	9b01      	ldr	r3, [sp, #4]
 80039cc:	4798      	blx	r3
 80039ce:	4306      	orrs	r6, r0
 80039d0:	3568      	adds	r5, #104	@ 0x68
 80039d2:	e7ea      	b.n	80039aa <_fwalk_sglue+0xe>

080039d4 <iprintf>:
 80039d4:	b40f      	push	{r0, r1, r2, r3}
 80039d6:	b507      	push	{r0, r1, r2, lr}
 80039d8:	4905      	ldr	r1, [pc, #20]	@ (80039f0 <iprintf+0x1c>)
 80039da:	ab04      	add	r3, sp, #16
 80039dc:	6808      	ldr	r0, [r1, #0]
 80039de:	cb04      	ldmia	r3!, {r2}
 80039e0:	6881      	ldr	r1, [r0, #8]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	f000 fafa 	bl	8003fdc <_vfiprintf_r>
 80039e8:	b003      	add	sp, #12
 80039ea:	bc08      	pop	{r3}
 80039ec:	b004      	add	sp, #16
 80039ee:	4718      	bx	r3
 80039f0:	2000001c 	.word	0x2000001c

080039f4 <_puts_r>:
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	0005      	movs	r5, r0
 80039fa:	000e      	movs	r6, r1
 80039fc:	6884      	ldr	r4, [r0, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <_puts_r+0x12>
 8003a02:	f7ff ffb3 	bl	800396c <__sinit>
 8003a06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a08:	07db      	lsls	r3, r3, #31
 8003a0a:	d405      	bmi.n	8003a18 <_puts_r+0x24>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	059b      	lsls	r3, r3, #22
 8003a10:	d402      	bmi.n	8003a18 <_puts_r+0x24>
 8003a12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a14:	f000 f9bb 	bl	8003d8e <__retarget_lock_acquire_recursive>
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	071b      	lsls	r3, r3, #28
 8003a1c:	d502      	bpl.n	8003a24 <_puts_r+0x30>
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11f      	bne.n	8003a64 <_puts_r+0x70>
 8003a24:	0021      	movs	r1, r4
 8003a26:	0028      	movs	r0, r5
 8003a28:	f000 f8d2 	bl	8003bd0 <__swsetup_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d019      	beq.n	8003a64 <_puts_r+0x70>
 8003a30:	2501      	movs	r5, #1
 8003a32:	426d      	negs	r5, r5
 8003a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d405      	bmi.n	8003a46 <_puts_r+0x52>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	d402      	bmi.n	8003a46 <_puts_r+0x52>
 8003a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a42:	f000 f9a5 	bl	8003d90 <__retarget_lock_release_recursive>
 8003a46:	0028      	movs	r0, r5
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	60a3      	str	r3, [r4, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da04      	bge.n	8003a5c <_puts_r+0x68>
 8003a52:	69a2      	ldr	r2, [r4, #24]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dc16      	bgt.n	8003a86 <_puts_r+0x92>
 8003a58:	290a      	cmp	r1, #10
 8003a5a:	d014      	beq.n	8003a86 <_puts_r+0x92>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	6022      	str	r2, [r4, #0]
 8003a62:	7019      	strb	r1, [r3, #0]
 8003a64:	68a3      	ldr	r3, [r4, #8]
 8003a66:	7831      	ldrb	r1, [r6, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	d1ed      	bne.n	8003a4a <_puts_r+0x56>
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da0f      	bge.n	8003a94 <_puts_r+0xa0>
 8003a74:	0022      	movs	r2, r4
 8003a76:	0028      	movs	r0, r5
 8003a78:	310a      	adds	r1, #10
 8003a7a:	f000 f867 	bl	8003b4c <__swbuf_r>
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d0d6      	beq.n	8003a30 <_puts_r+0x3c>
 8003a82:	250a      	movs	r5, #10
 8003a84:	e7d6      	b.n	8003a34 <_puts_r+0x40>
 8003a86:	0022      	movs	r2, r4
 8003a88:	0028      	movs	r0, r5
 8003a8a:	f000 f85f 	bl	8003b4c <__swbuf_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d1e8      	bne.n	8003a64 <_puts_r+0x70>
 8003a92:	e7cd      	b.n	8003a30 <_puts_r+0x3c>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	6022      	str	r2, [r4, #0]
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e7f0      	b.n	8003a82 <_puts_r+0x8e>

08003aa0 <puts>:
 8003aa0:	b510      	push	{r4, lr}
 8003aa2:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <puts+0x10>)
 8003aa4:	0001      	movs	r1, r0
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	f7ff ffa4 	bl	80039f4 <_puts_r>
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	2000001c 	.word	0x2000001c

08003ab4 <__sread>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	000c      	movs	r4, r1
 8003ab8:	250e      	movs	r5, #14
 8003aba:	5f49      	ldrsh	r1, [r1, r5]
 8003abc:	f000 f914 	bl	8003ce8 <_read_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	db03      	blt.n	8003acc <__sread+0x18>
 8003ac4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ac6:	181b      	adds	r3, r3, r0
 8003ac8:	6563      	str	r3, [r4, #84]	@ 0x54
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	4a02      	ldr	r2, [pc, #8]	@ (8003ad8 <__sread+0x24>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	e7f9      	b.n	8003aca <__sread+0x16>
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	ffffefff 	.word	0xffffefff

08003adc <__swrite>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	001f      	movs	r7, r3
 8003ae0:	898b      	ldrh	r3, [r1, #12]
 8003ae2:	0005      	movs	r5, r0
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	0016      	movs	r6, r2
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	d505      	bpl.n	8003af8 <__swrite+0x1c>
 8003aec:	230e      	movs	r3, #14
 8003aee:	5ec9      	ldrsh	r1, [r1, r3]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2302      	movs	r3, #2
 8003af4:	f000 f8e4 	bl	8003cc0 <_lseek_r>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <__swrite+0x34>)
 8003afc:	0028      	movs	r0, r5
 8003afe:	4013      	ands	r3, r2
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	0032      	movs	r2, r6
 8003b04:	230e      	movs	r3, #14
 8003b06:	5ee1      	ldrsh	r1, [r4, r3]
 8003b08:	003b      	movs	r3, r7
 8003b0a:	f000 f901 	bl	8003d10 <_write_r>
 8003b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b10:	ffffefff 	.word	0xffffefff

08003b14 <__sseek>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	000c      	movs	r4, r1
 8003b18:	250e      	movs	r5, #14
 8003b1a:	5f49      	ldrsh	r1, [r1, r5]
 8003b1c:	f000 f8d0 	bl	8003cc0 <_lseek_r>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	1c42      	adds	r2, r0, #1
 8003b24:	d103      	bne.n	8003b2e <__sseek+0x1a>
 8003b26:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <__sseek+0x28>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
 8003b2e:	2280      	movs	r2, #128	@ 0x80
 8003b30:	0152      	lsls	r2, r2, #5
 8003b32:	4313      	orrs	r3, r2
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b38:	e7f8      	b.n	8003b2c <__sseek+0x18>
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	ffffefff 	.word	0xffffefff

08003b40 <__sclose>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	230e      	movs	r3, #14
 8003b44:	5ec9      	ldrsh	r1, [r1, r3]
 8003b46:	f000 f8a9 	bl	8003c9c <_close_r>
 8003b4a:	bd10      	pop	{r4, pc}

08003b4c <__swbuf_r>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	0006      	movs	r6, r0
 8003b50:	000d      	movs	r5, r1
 8003b52:	0014      	movs	r4, r2
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d004      	beq.n	8003b62 <__swbuf_r+0x16>
 8003b58:	6a03      	ldr	r3, [r0, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <__swbuf_r+0x16>
 8003b5e:	f7ff ff05 	bl	800396c <__sinit>
 8003b62:	69a3      	ldr	r3, [r4, #24]
 8003b64:	60a3      	str	r3, [r4, #8]
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	d502      	bpl.n	8003b72 <__swbuf_r+0x26>
 8003b6c:	6923      	ldr	r3, [r4, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <__swbuf_r+0x3a>
 8003b72:	0021      	movs	r1, r4
 8003b74:	0030      	movs	r0, r6
 8003b76:	f000 f82b 	bl	8003bd0 <__swsetup_r>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d003      	beq.n	8003b86 <__swbuf_r+0x3a>
 8003b7e:	2501      	movs	r5, #1
 8003b80:	426d      	negs	r5, r5
 8003b82:	0028      	movs	r0, r5
 8003b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	b2ef      	uxtb	r7, r5
 8003b8c:	1ac0      	subs	r0, r0, r3
 8003b8e:	6963      	ldr	r3, [r4, #20]
 8003b90:	b2ed      	uxtb	r5, r5
 8003b92:	4283      	cmp	r3, r0
 8003b94:	dc05      	bgt.n	8003ba2 <__swbuf_r+0x56>
 8003b96:	0021      	movs	r1, r4
 8003b98:	0030      	movs	r0, r6
 8003b9a:	f000 fd3f 	bl	800461c <_fflush_r>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1ed      	bne.n	8003b7e <__swbuf_r+0x32>
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	701f      	strb	r7, [r3, #0]
 8003bb2:	6963      	ldr	r3, [r4, #20]
 8003bb4:	4283      	cmp	r3, r0
 8003bb6:	d004      	beq.n	8003bc2 <__swbuf_r+0x76>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	07db      	lsls	r3, r3, #31
 8003bbc:	d5e1      	bpl.n	8003b82 <__swbuf_r+0x36>
 8003bbe:	2d0a      	cmp	r5, #10
 8003bc0:	d1df      	bne.n	8003b82 <__swbuf_r+0x36>
 8003bc2:	0021      	movs	r1, r4
 8003bc4:	0030      	movs	r0, r6
 8003bc6:	f000 fd29 	bl	800461c <_fflush_r>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d0d9      	beq.n	8003b82 <__swbuf_r+0x36>
 8003bce:	e7d6      	b.n	8003b7e <__swbuf_r+0x32>

08003bd0 <__swsetup_r>:
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c88 <__swsetup_r+0xb8>)
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	0005      	movs	r5, r0
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	000c      	movs	r4, r1
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d004      	beq.n	8003be8 <__swsetup_r+0x18>
 8003bde:	6a03      	ldr	r3, [r0, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <__swsetup_r+0x18>
 8003be4:	f7ff fec2 	bl	800396c <__sinit>
 8003be8:	230c      	movs	r3, #12
 8003bea:	5ee2      	ldrsh	r2, [r4, r3]
 8003bec:	0713      	lsls	r3, r2, #28
 8003bee:	d423      	bmi.n	8003c38 <__swsetup_r+0x68>
 8003bf0:	06d3      	lsls	r3, r2, #27
 8003bf2:	d407      	bmi.n	8003c04 <__swsetup_r+0x34>
 8003bf4:	2309      	movs	r3, #9
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	2340      	movs	r3, #64	@ 0x40
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	4240      	negs	r0, r0
 8003c02:	e03a      	b.n	8003c7a <__swsetup_r+0xaa>
 8003c04:	0752      	lsls	r2, r2, #29
 8003c06:	d513      	bpl.n	8003c30 <__swsetup_r+0x60>
 8003c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d008      	beq.n	8003c20 <__swsetup_r+0x50>
 8003c0e:	0023      	movs	r3, r4
 8003c10:	3344      	adds	r3, #68	@ 0x44
 8003c12:	4299      	cmp	r1, r3
 8003c14:	d002      	beq.n	8003c1c <__swsetup_r+0x4c>
 8003c16:	0028      	movs	r0, r5
 8003c18:	f000 f8bc 	bl	8003d94 <_free_r>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c20:	2224      	movs	r2, #36	@ 0x24
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	4393      	bics	r3, r2
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	2308      	movs	r3, #8
 8003c32:	89a2      	ldrh	r2, [r4, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <__swsetup_r+0x86>
 8003c3e:	21a0      	movs	r1, #160	@ 0xa0
 8003c40:	2280      	movs	r2, #128	@ 0x80
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0089      	lsls	r1, r1, #2
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	400b      	ands	r3, r1
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <__swsetup_r+0x86>
 8003c4e:	0021      	movs	r1, r4
 8003c50:	0028      	movs	r0, r5
 8003c52:	f000 fd39 	bl	80046c8 <__smakebuf_r>
 8003c56:	230c      	movs	r3, #12
 8003c58:	5ee2      	ldrsh	r2, [r4, r3]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	400b      	ands	r3, r1
 8003c60:	420a      	tst	r2, r1
 8003c62:	d00b      	beq.n	8003c7c <__swsetup_r+0xac>
 8003c64:	2300      	movs	r3, #0
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	6963      	ldr	r3, [r4, #20]
 8003c6a:	425b      	negs	r3, r3
 8003c6c:	61a3      	str	r3, [r4, #24]
 8003c6e:	2000      	movs	r0, #0
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	4283      	cmp	r3, r0
 8003c74:	d101      	bne.n	8003c7a <__swsetup_r+0xaa>
 8003c76:	0613      	lsls	r3, r2, #24
 8003c78:	d4be      	bmi.n	8003bf8 <__swsetup_r+0x28>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	0791      	lsls	r1, r2, #30
 8003c7e:	d400      	bmi.n	8003c82 <__swsetup_r+0xb2>
 8003c80:	6963      	ldr	r3, [r4, #20]
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	e7f3      	b.n	8003c6e <__swsetup_r+0x9e>
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	2000001c 	.word	0x2000001c

08003c8c <memset>:
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	1882      	adds	r2, r0, r2
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memset+0xa>
 8003c94:	4770      	bx	lr
 8003c96:	7019      	strb	r1, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	e7f9      	b.n	8003c90 <memset+0x4>

08003c9c <_close_r>:
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	4d06      	ldr	r5, [pc, #24]	@ (8003cbc <_close_r+0x20>)
 8003ca2:	0004      	movs	r4, r0
 8003ca4:	0008      	movs	r0, r1
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	f7fc fe9d 	bl	80009e6 <_close>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_close_r+0x1c>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d000      	beq.n	8003cb8 <_close_r+0x1c>
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	20000260 	.word	0x20000260

08003cc0 <_lseek_r>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	0004      	movs	r4, r0
 8003cc4:	0008      	movs	r0, r1
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	001a      	movs	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	4d05      	ldr	r5, [pc, #20]	@ (8003ce4 <_lseek_r+0x24>)
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fc feaa 	bl	8000a28 <_lseek>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d103      	bne.n	8003ce0 <_lseek_r+0x20>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d000      	beq.n	8003ce0 <_lseek_r+0x20>
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	20000260 	.word	0x20000260

08003ce8 <_read_r>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	0004      	movs	r4, r0
 8003cec:	0008      	movs	r0, r1
 8003cee:	0011      	movs	r1, r2
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4d05      	ldr	r5, [pc, #20]	@ (8003d0c <_read_r+0x24>)
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	f7fc fe3c 	bl	8000974 <_read>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d103      	bne.n	8003d08 <_read_r+0x20>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d000      	beq.n	8003d08 <_read_r+0x20>
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000260 	.word	0x20000260

08003d10 <_write_r>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	0004      	movs	r4, r0
 8003d14:	0008      	movs	r0, r1
 8003d16:	0011      	movs	r1, r2
 8003d18:	001a      	movs	r2, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4d05      	ldr	r5, [pc, #20]	@ (8003d34 <_write_r+0x24>)
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	f7fc fe45 	bl	80009ae <_write>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d103      	bne.n	8003d30 <_write_r+0x20>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d000      	beq.n	8003d30 <_write_r+0x20>
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	20000260 	.word	0x20000260

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	@ (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	2000001c 	.word	0x2000001c

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	2600      	movs	r6, #0
 8003d48:	4c0c      	ldr	r4, [pc, #48]	@ (8003d7c <__libc_init_array+0x38>)
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d80 <__libc_init_array+0x3c>)
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	2600      	movs	r6, #0
 8003d56:	f000 fd3b 	bl	80047d0 <_init>
 8003d5a:	4c0a      	ldr	r4, [pc, #40]	@ (8003d84 <__libc_init_array+0x40>)
 8003d5c:	4d0a      	ldr	r5, [pc, #40]	@ (8003d88 <__libc_init_array+0x44>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	00b3      	lsls	r3, r6, #2
 8003d6a:	58eb      	ldr	r3, [r5, r3]
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	00b3      	lsls	r3, r6, #2
 8003d74:	58eb      	ldr	r3, [r5, r3]
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	080048f0 	.word	0x080048f0
 8003d80:	080048f0 	.word	0x080048f0
 8003d84:	080048f4 	.word	0x080048f4
 8003d88:	080048f0 	.word	0x080048f0

08003d8c <__retarget_lock_init_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_acquire_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <__retarget_lock_release_recursive>:
 8003d90:	4770      	bx	lr
	...

08003d94 <_free_r>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	0005      	movs	r5, r0
 8003d98:	1e0c      	subs	r4, r1, #0
 8003d9a:	d010      	beq.n	8003dbe <_free_r+0x2a>
 8003d9c:	3c04      	subs	r4, #4
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	da00      	bge.n	8003da6 <_free_r+0x12>
 8003da4:	18e4      	adds	r4, r4, r3
 8003da6:	0028      	movs	r0, r5
 8003da8:	f000 f8e0 	bl	8003f6c <__malloc_lock>
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <_free_r+0x90>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <_free_r+0x2c>
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	6014      	str	r4, [r2, #0]
 8003db8:	0028      	movs	r0, r5
 8003dba:	f000 f8df 	bl	8003f7c <__malloc_unlock>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d908      	bls.n	8003dd6 <_free_r+0x42>
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	1821      	adds	r1, r4, r0
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d1f3      	bne.n	8003db4 <_free_r+0x20>
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	1809      	adds	r1, r1, r0
 8003dd2:	6021      	str	r1, [r4, #0]
 8003dd4:	e7ee      	b.n	8003db4 <_free_r+0x20>
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <_free_r+0x4e>
 8003dde:	42a3      	cmp	r3, r4
 8003de0:	d9f9      	bls.n	8003dd6 <_free_r+0x42>
 8003de2:	6811      	ldr	r1, [r2, #0]
 8003de4:	1850      	adds	r0, r2, r1
 8003de6:	42a0      	cmp	r0, r4
 8003de8:	d10b      	bne.n	8003e02 <_free_r+0x6e>
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	1809      	adds	r1, r1, r0
 8003dee:	1850      	adds	r0, r2, r1
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	4283      	cmp	r3, r0
 8003df4:	d1e0      	bne.n	8003db8 <_free_r+0x24>
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	1841      	adds	r1, r0, r1
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	6053      	str	r3, [r2, #4]
 8003e00:	e7da      	b.n	8003db8 <_free_r+0x24>
 8003e02:	42a0      	cmp	r0, r4
 8003e04:	d902      	bls.n	8003e0c <_free_r+0x78>
 8003e06:	230c      	movs	r3, #12
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	e7d5      	b.n	8003db8 <_free_r+0x24>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	1821      	adds	r1, r4, r0
 8003e10:	428b      	cmp	r3, r1
 8003e12:	d103      	bne.n	8003e1c <_free_r+0x88>
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	1809      	adds	r1, r1, r0
 8003e1a:	6021      	str	r1, [r4, #0]
 8003e1c:	6063      	str	r3, [r4, #4]
 8003e1e:	6054      	str	r4, [r2, #4]
 8003e20:	e7ca      	b.n	8003db8 <_free_r+0x24>
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	2000026c 	.word	0x2000026c

08003e28 <sbrk_aligned>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003e68 <sbrk_aligned+0x40>)
 8003e2c:	000d      	movs	r5, r1
 8003e2e:	6831      	ldr	r1, [r6, #0]
 8003e30:	0004      	movs	r4, r0
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d102      	bne.n	8003e3c <sbrk_aligned+0x14>
 8003e36:	f000 fcad 	bl	8004794 <_sbrk_r>
 8003e3a:	6030      	str	r0, [r6, #0]
 8003e3c:	0029      	movs	r1, r5
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f000 fca8 	bl	8004794 <_sbrk_r>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d103      	bne.n	8003e50 <sbrk_aligned+0x28>
 8003e48:	2501      	movs	r5, #1
 8003e4a:	426d      	negs	r5, r5
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	2303      	movs	r3, #3
 8003e52:	1cc5      	adds	r5, r0, #3
 8003e54:	439d      	bics	r5, r3
 8003e56:	42a8      	cmp	r0, r5
 8003e58:	d0f8      	beq.n	8003e4c <sbrk_aligned+0x24>
 8003e5a:	1a29      	subs	r1, r5, r0
 8003e5c:	0020      	movs	r0, r4
 8003e5e:	f000 fc99 	bl	8004794 <_sbrk_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	d1f2      	bne.n	8003e4c <sbrk_aligned+0x24>
 8003e66:	e7ef      	b.n	8003e48 <sbrk_aligned+0x20>
 8003e68:	20000268 	.word	0x20000268

08003e6c <_malloc_r>:
 8003e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e6e:	2203      	movs	r2, #3
 8003e70:	1ccb      	adds	r3, r1, #3
 8003e72:	4393      	bics	r3, r2
 8003e74:	3308      	adds	r3, #8
 8003e76:	0005      	movs	r5, r0
 8003e78:	001f      	movs	r7, r3
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d234      	bcs.n	8003ee8 <_malloc_r+0x7c>
 8003e7e:	270c      	movs	r7, #12
 8003e80:	42b9      	cmp	r1, r7
 8003e82:	d833      	bhi.n	8003eec <_malloc_r+0x80>
 8003e84:	0028      	movs	r0, r5
 8003e86:	f000 f871 	bl	8003f6c <__malloc_lock>
 8003e8a:	4e37      	ldr	r6, [pc, #220]	@ (8003f68 <_malloc_r+0xfc>)
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	001c      	movs	r4, r3
 8003e90:	2c00      	cmp	r4, #0
 8003e92:	d12f      	bne.n	8003ef4 <_malloc_r+0x88>
 8003e94:	0039      	movs	r1, r7
 8003e96:	0028      	movs	r0, r5
 8003e98:	f7ff ffc6 	bl	8003e28 <sbrk_aligned>
 8003e9c:	0004      	movs	r4, r0
 8003e9e:	1c43      	adds	r3, r0, #1
 8003ea0:	d15f      	bne.n	8003f62 <_malloc_r+0xf6>
 8003ea2:	6834      	ldr	r4, [r6, #0]
 8003ea4:	9400      	str	r4, [sp, #0]
 8003ea6:	9b00      	ldr	r3, [sp, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d14a      	bne.n	8003f42 <_malloc_r+0xd6>
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d052      	beq.n	8003f56 <_malloc_r+0xea>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	0028      	movs	r0, r5
 8003eb4:	18e3      	adds	r3, r4, r3
 8003eb6:	9900      	ldr	r1, [sp, #0]
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	f000 fc6b 	bl	8004794 <_sbrk_r>
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	4283      	cmp	r3, r0
 8003ec2:	d148      	bne.n	8003f56 <_malloc_r+0xea>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	0028      	movs	r0, r5
 8003ec8:	1aff      	subs	r7, r7, r3
 8003eca:	0039      	movs	r1, r7
 8003ecc:	f7ff ffac 	bl	8003e28 <sbrk_aligned>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d040      	beq.n	8003f56 <_malloc_r+0xea>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d133      	bne.n	8003f4a <_malloc_r+0xde>
 8003ee2:	9b00      	ldr	r3, [sp, #0]
 8003ee4:	6033      	str	r3, [r6, #0]
 8003ee6:	e019      	b.n	8003f1c <_malloc_r+0xb0>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dac9      	bge.n	8003e80 <_malloc_r+0x14>
 8003eec:	230c      	movs	r3, #12
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ef4:	6821      	ldr	r1, [r4, #0]
 8003ef6:	1bc9      	subs	r1, r1, r7
 8003ef8:	d420      	bmi.n	8003f3c <_malloc_r+0xd0>
 8003efa:	290b      	cmp	r1, #11
 8003efc:	d90a      	bls.n	8003f14 <_malloc_r+0xa8>
 8003efe:	19e2      	adds	r2, r4, r7
 8003f00:	6027      	str	r7, [r4, #0]
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d104      	bne.n	8003f10 <_malloc_r+0xa4>
 8003f06:	6032      	str	r2, [r6, #0]
 8003f08:	6863      	ldr	r3, [r4, #4]
 8003f0a:	6011      	str	r1, [r2, #0]
 8003f0c:	6053      	str	r3, [r2, #4]
 8003f0e:	e005      	b.n	8003f1c <_malloc_r+0xb0>
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e7f9      	b.n	8003f08 <_malloc_r+0x9c>
 8003f14:	6862      	ldr	r2, [r4, #4]
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	d10e      	bne.n	8003f38 <_malloc_r+0xcc>
 8003f1a:	6032      	str	r2, [r6, #0]
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	f000 f82d 	bl	8003f7c <__malloc_unlock>
 8003f22:	0020      	movs	r0, r4
 8003f24:	2207      	movs	r2, #7
 8003f26:	300b      	adds	r0, #11
 8003f28:	1d23      	adds	r3, r4, #4
 8003f2a:	4390      	bics	r0, r2
 8003f2c:	1ac2      	subs	r2, r0, r3
 8003f2e:	4298      	cmp	r0, r3
 8003f30:	d0df      	beq.n	8003ef2 <_malloc_r+0x86>
 8003f32:	1a1b      	subs	r3, r3, r0
 8003f34:	50a3      	str	r3, [r4, r2]
 8003f36:	e7dc      	b.n	8003ef2 <_malloc_r+0x86>
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	e7ef      	b.n	8003f1c <_malloc_r+0xb0>
 8003f3c:	0023      	movs	r3, r4
 8003f3e:	6864      	ldr	r4, [r4, #4]
 8003f40:	e7a6      	b.n	8003e90 <_malloc_r+0x24>
 8003f42:	9c00      	ldr	r4, [sp, #0]
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	e7ad      	b.n	8003ea6 <_malloc_r+0x3a>
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d1fb      	bne.n	8003f4a <_malloc_r+0xde>
 8003f52:	2300      	movs	r3, #0
 8003f54:	e7da      	b.n	8003f0c <_malloc_r+0xa0>
 8003f56:	230c      	movs	r3, #12
 8003f58:	0028      	movs	r0, r5
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	f000 f80e 	bl	8003f7c <__malloc_unlock>
 8003f60:	e7c6      	b.n	8003ef0 <_malloc_r+0x84>
 8003f62:	6007      	str	r7, [r0, #0]
 8003f64:	e7da      	b.n	8003f1c <_malloc_r+0xb0>
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	2000026c 	.word	0x2000026c

08003f6c <__malloc_lock>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4802      	ldr	r0, [pc, #8]	@ (8003f78 <__malloc_lock+0xc>)
 8003f70:	f7ff ff0d 	bl	8003d8e <__retarget_lock_acquire_recursive>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	20000264 	.word	0x20000264

08003f7c <__malloc_unlock>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4802      	ldr	r0, [pc, #8]	@ (8003f88 <__malloc_unlock+0xc>)
 8003f80:	f7ff ff06 	bl	8003d90 <__retarget_lock_release_recursive>
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	20000264 	.word	0x20000264

08003f8c <__sfputc_r>:
 8003f8c:	6893      	ldr	r3, [r2, #8]
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	3b01      	subs	r3, #1
 8003f92:	6093      	str	r3, [r2, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da04      	bge.n	8003fa2 <__sfputc_r+0x16>
 8003f98:	6994      	ldr	r4, [r2, #24]
 8003f9a:	42a3      	cmp	r3, r4
 8003f9c:	db07      	blt.n	8003fae <__sfputc_r+0x22>
 8003f9e:	290a      	cmp	r1, #10
 8003fa0:	d005      	beq.n	8003fae <__sfputc_r+0x22>
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	1c58      	adds	r0, r3, #1
 8003fa6:	6010      	str	r0, [r2, #0]
 8003fa8:	7019      	strb	r1, [r3, #0]
 8003faa:	0008      	movs	r0, r1
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	f7ff fdcd 	bl	8003b4c <__swbuf_r>
 8003fb2:	0001      	movs	r1, r0
 8003fb4:	e7f9      	b.n	8003faa <__sfputc_r+0x1e>

08003fb6 <__sfputs_r>:
 8003fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb8:	0006      	movs	r6, r0
 8003fba:	000f      	movs	r7, r1
 8003fbc:	0014      	movs	r4, r2
 8003fbe:	18d5      	adds	r5, r2, r3
 8003fc0:	42ac      	cmp	r4, r5
 8003fc2:	d101      	bne.n	8003fc8 <__sfputs_r+0x12>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e007      	b.n	8003fd8 <__sfputs_r+0x22>
 8003fc8:	7821      	ldrb	r1, [r4, #0]
 8003fca:	003a      	movs	r2, r7
 8003fcc:	0030      	movs	r0, r6
 8003fce:	f7ff ffdd 	bl	8003f8c <__sfputc_r>
 8003fd2:	3401      	adds	r4, #1
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d1f3      	bne.n	8003fc0 <__sfputs_r+0xa>
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fdc <_vfiprintf_r>:
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b0a1      	sub	sp, #132	@ 0x84
 8003fe0:	000f      	movs	r7, r1
 8003fe2:	0015      	movs	r5, r2
 8003fe4:	001e      	movs	r6, r3
 8003fe6:	9003      	str	r0, [sp, #12]
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d004      	beq.n	8003ff6 <_vfiprintf_r+0x1a>
 8003fec:	6a03      	ldr	r3, [r0, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <_vfiprintf_r+0x1a>
 8003ff2:	f7ff fcbb 	bl	800396c <__sinit>
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff8:	07db      	lsls	r3, r3, #31
 8003ffa:	d405      	bmi.n	8004008 <_vfiprintf_r+0x2c>
 8003ffc:	89bb      	ldrh	r3, [r7, #12]
 8003ffe:	059b      	lsls	r3, r3, #22
 8004000:	d402      	bmi.n	8004008 <_vfiprintf_r+0x2c>
 8004002:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004004:	f7ff fec3 	bl	8003d8e <__retarget_lock_acquire_recursive>
 8004008:	89bb      	ldrh	r3, [r7, #12]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	d502      	bpl.n	8004014 <_vfiprintf_r+0x38>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d113      	bne.n	800403c <_vfiprintf_r+0x60>
 8004014:	0039      	movs	r1, r7
 8004016:	9803      	ldr	r0, [sp, #12]
 8004018:	f7ff fdda 	bl	8003bd0 <__swsetup_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	d00d      	beq.n	800403c <_vfiprintf_r+0x60>
 8004020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004022:	07db      	lsls	r3, r3, #31
 8004024:	d503      	bpl.n	800402e <_vfiprintf_r+0x52>
 8004026:	2001      	movs	r0, #1
 8004028:	4240      	negs	r0, r0
 800402a:	b021      	add	sp, #132	@ 0x84
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402e:	89bb      	ldrh	r3, [r7, #12]
 8004030:	059b      	lsls	r3, r3, #22
 8004032:	d4f8      	bmi.n	8004026 <_vfiprintf_r+0x4a>
 8004034:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004036:	f7ff feab 	bl	8003d90 <__retarget_lock_release_recursive>
 800403a:	e7f4      	b.n	8004026 <_vfiprintf_r+0x4a>
 800403c:	2300      	movs	r3, #0
 800403e:	ac08      	add	r4, sp, #32
 8004040:	6163      	str	r3, [r4, #20]
 8004042:	3320      	adds	r3, #32
 8004044:	7663      	strb	r3, [r4, #25]
 8004046:	3310      	adds	r3, #16
 8004048:	76a3      	strb	r3, [r4, #26]
 800404a:	9607      	str	r6, [sp, #28]
 800404c:	002e      	movs	r6, r5
 800404e:	7833      	ldrb	r3, [r6, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <_vfiprintf_r+0x7c>
 8004054:	2b25      	cmp	r3, #37	@ 0x25
 8004056:	d148      	bne.n	80040ea <_vfiprintf_r+0x10e>
 8004058:	1b73      	subs	r3, r6, r5
 800405a:	9305      	str	r3, [sp, #20]
 800405c:	42ae      	cmp	r6, r5
 800405e:	d00b      	beq.n	8004078 <_vfiprintf_r+0x9c>
 8004060:	002a      	movs	r2, r5
 8004062:	0039      	movs	r1, r7
 8004064:	9803      	ldr	r0, [sp, #12]
 8004066:	f7ff ffa6 	bl	8003fb6 <__sfputs_r>
 800406a:	3001      	adds	r0, #1
 800406c:	d100      	bne.n	8004070 <_vfiprintf_r+0x94>
 800406e:	e0ae      	b.n	80041ce <_vfiprintf_r+0x1f2>
 8004070:	6963      	ldr	r3, [r4, #20]
 8004072:	9a05      	ldr	r2, [sp, #20]
 8004074:	189b      	adds	r3, r3, r2
 8004076:	6163      	str	r3, [r4, #20]
 8004078:	7833      	ldrb	r3, [r6, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d100      	bne.n	8004080 <_vfiprintf_r+0xa4>
 800407e:	e0a6      	b.n	80041ce <_vfiprintf_r+0x1f2>
 8004080:	2201      	movs	r2, #1
 8004082:	2300      	movs	r3, #0
 8004084:	4252      	negs	r2, r2
 8004086:	6062      	str	r2, [r4, #4]
 8004088:	a904      	add	r1, sp, #16
 800408a:	3254      	adds	r2, #84	@ 0x54
 800408c:	1852      	adds	r2, r2, r1
 800408e:	1c75      	adds	r5, r6, #1
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	60e3      	str	r3, [r4, #12]
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	7013      	strb	r3, [r2, #0]
 8004098:	65a3      	str	r3, [r4, #88]	@ 0x58
 800409a:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <_vfiprintf_r+0x224>)
 800409c:	2205      	movs	r2, #5
 800409e:	0018      	movs	r0, r3
 80040a0:	7829      	ldrb	r1, [r5, #0]
 80040a2:	9305      	str	r3, [sp, #20]
 80040a4:	f000 fb88 	bl	80047b8 <memchr>
 80040a8:	1c6e      	adds	r6, r5, #1
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d11f      	bne.n	80040ee <_vfiprintf_r+0x112>
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	06d3      	lsls	r3, r2, #27
 80040b2:	d504      	bpl.n	80040be <_vfiprintf_r+0xe2>
 80040b4:	2353      	movs	r3, #83	@ 0x53
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	185b      	adds	r3, r3, r1
 80040ba:	2120      	movs	r1, #32
 80040bc:	7019      	strb	r1, [r3, #0]
 80040be:	0713      	lsls	r3, r2, #28
 80040c0:	d504      	bpl.n	80040cc <_vfiprintf_r+0xf0>
 80040c2:	2353      	movs	r3, #83	@ 0x53
 80040c4:	a904      	add	r1, sp, #16
 80040c6:	185b      	adds	r3, r3, r1
 80040c8:	212b      	movs	r1, #43	@ 0x2b
 80040ca:	7019      	strb	r1, [r3, #0]
 80040cc:	782b      	ldrb	r3, [r5, #0]
 80040ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d0:	d016      	beq.n	8004100 <_vfiprintf_r+0x124>
 80040d2:	002e      	movs	r6, r5
 80040d4:	2100      	movs	r1, #0
 80040d6:	200a      	movs	r0, #10
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	7832      	ldrb	r2, [r6, #0]
 80040dc:	1c75      	adds	r5, r6, #1
 80040de:	3a30      	subs	r2, #48	@ 0x30
 80040e0:	2a09      	cmp	r2, #9
 80040e2:	d950      	bls.n	8004186 <_vfiprintf_r+0x1aa>
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d111      	bne.n	800410c <_vfiprintf_r+0x130>
 80040e8:	e017      	b.n	800411a <_vfiprintf_r+0x13e>
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7af      	b.n	800404e <_vfiprintf_r+0x72>
 80040ee:	9b05      	ldr	r3, [sp, #20]
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	1ac0      	subs	r0, r0, r3
 80040f4:	2301      	movs	r3, #1
 80040f6:	4083      	lsls	r3, r0
 80040f8:	4313      	orrs	r3, r2
 80040fa:	0035      	movs	r5, r6
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	e7cc      	b.n	800409a <_vfiprintf_r+0xbe>
 8004100:	9b07      	ldr	r3, [sp, #28]
 8004102:	1d19      	adds	r1, r3, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	9107      	str	r1, [sp, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db01      	blt.n	8004110 <_vfiprintf_r+0x134>
 800410c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800410e:	e004      	b.n	800411a <_vfiprintf_r+0x13e>
 8004110:	425b      	negs	r3, r3
 8004112:	60e3      	str	r3, [r4, #12]
 8004114:	2302      	movs	r3, #2
 8004116:	4313      	orrs	r3, r2
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	7833      	ldrb	r3, [r6, #0]
 800411c:	2b2e      	cmp	r3, #46	@ 0x2e
 800411e:	d10c      	bne.n	800413a <_vfiprintf_r+0x15e>
 8004120:	7873      	ldrb	r3, [r6, #1]
 8004122:	2b2a      	cmp	r3, #42	@ 0x2a
 8004124:	d134      	bne.n	8004190 <_vfiprintf_r+0x1b4>
 8004126:	9b07      	ldr	r3, [sp, #28]
 8004128:	3602      	adds	r6, #2
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	9207      	str	r2, [sp, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da01      	bge.n	8004138 <_vfiprintf_r+0x15c>
 8004134:	2301      	movs	r3, #1
 8004136:	425b      	negs	r3, r3
 8004138:	9309      	str	r3, [sp, #36]	@ 0x24
 800413a:	4d32      	ldr	r5, [pc, #200]	@ (8004204 <_vfiprintf_r+0x228>)
 800413c:	2203      	movs	r2, #3
 800413e:	0028      	movs	r0, r5
 8004140:	7831      	ldrb	r1, [r6, #0]
 8004142:	f000 fb39 	bl	80047b8 <memchr>
 8004146:	2800      	cmp	r0, #0
 8004148:	d006      	beq.n	8004158 <_vfiprintf_r+0x17c>
 800414a:	2340      	movs	r3, #64	@ 0x40
 800414c:	1b40      	subs	r0, r0, r5
 800414e:	4083      	lsls	r3, r0
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	3601      	adds	r6, #1
 8004154:	4313      	orrs	r3, r2
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	7831      	ldrb	r1, [r6, #0]
 800415a:	2206      	movs	r2, #6
 800415c:	482a      	ldr	r0, [pc, #168]	@ (8004208 <_vfiprintf_r+0x22c>)
 800415e:	1c75      	adds	r5, r6, #1
 8004160:	7621      	strb	r1, [r4, #24]
 8004162:	f000 fb29 	bl	80047b8 <memchr>
 8004166:	2800      	cmp	r0, #0
 8004168:	d040      	beq.n	80041ec <_vfiprintf_r+0x210>
 800416a:	4b28      	ldr	r3, [pc, #160]	@ (800420c <_vfiprintf_r+0x230>)
 800416c:	2b00      	cmp	r3, #0
 800416e:	d122      	bne.n	80041b6 <_vfiprintf_r+0x1da>
 8004170:	2207      	movs	r2, #7
 8004172:	9b07      	ldr	r3, [sp, #28]
 8004174:	3307      	adds	r3, #7
 8004176:	4393      	bics	r3, r2
 8004178:	3308      	adds	r3, #8
 800417a:	9307      	str	r3, [sp, #28]
 800417c:	6963      	ldr	r3, [r4, #20]
 800417e:	9a04      	ldr	r2, [sp, #16]
 8004180:	189b      	adds	r3, r3, r2
 8004182:	6163      	str	r3, [r4, #20]
 8004184:	e762      	b.n	800404c <_vfiprintf_r+0x70>
 8004186:	4343      	muls	r3, r0
 8004188:	002e      	movs	r6, r5
 800418a:	2101      	movs	r1, #1
 800418c:	189b      	adds	r3, r3, r2
 800418e:	e7a4      	b.n	80040da <_vfiprintf_r+0xfe>
 8004190:	2300      	movs	r3, #0
 8004192:	200a      	movs	r0, #10
 8004194:	0019      	movs	r1, r3
 8004196:	3601      	adds	r6, #1
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	7832      	ldrb	r2, [r6, #0]
 800419c:	1c75      	adds	r5, r6, #1
 800419e:	3a30      	subs	r2, #48	@ 0x30
 80041a0:	2a09      	cmp	r2, #9
 80041a2:	d903      	bls.n	80041ac <_vfiprintf_r+0x1d0>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0c8      	beq.n	800413a <_vfiprintf_r+0x15e>
 80041a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80041aa:	e7c6      	b.n	800413a <_vfiprintf_r+0x15e>
 80041ac:	4341      	muls	r1, r0
 80041ae:	002e      	movs	r6, r5
 80041b0:	2301      	movs	r3, #1
 80041b2:	1889      	adds	r1, r1, r2
 80041b4:	e7f1      	b.n	800419a <_vfiprintf_r+0x1be>
 80041b6:	aa07      	add	r2, sp, #28
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	0021      	movs	r1, r4
 80041bc:	003a      	movs	r2, r7
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <_vfiprintf_r+0x234>)
 80041c0:	9803      	ldr	r0, [sp, #12]
 80041c2:	e000      	b.n	80041c6 <_vfiprintf_r+0x1ea>
 80041c4:	bf00      	nop
 80041c6:	9004      	str	r0, [sp, #16]
 80041c8:	9b04      	ldr	r3, [sp, #16]
 80041ca:	3301      	adds	r3, #1
 80041cc:	d1d6      	bne.n	800417c <_vfiprintf_r+0x1a0>
 80041ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d0:	07db      	lsls	r3, r3, #31
 80041d2:	d405      	bmi.n	80041e0 <_vfiprintf_r+0x204>
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	059b      	lsls	r3, r3, #22
 80041d8:	d402      	bmi.n	80041e0 <_vfiprintf_r+0x204>
 80041da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80041dc:	f7ff fdd8 	bl	8003d90 <__retarget_lock_release_recursive>
 80041e0:	89bb      	ldrh	r3, [r7, #12]
 80041e2:	065b      	lsls	r3, r3, #25
 80041e4:	d500      	bpl.n	80041e8 <_vfiprintf_r+0x20c>
 80041e6:	e71e      	b.n	8004026 <_vfiprintf_r+0x4a>
 80041e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80041ea:	e71e      	b.n	800402a <_vfiprintf_r+0x4e>
 80041ec:	aa07      	add	r2, sp, #28
 80041ee:	9200      	str	r2, [sp, #0]
 80041f0:	0021      	movs	r1, r4
 80041f2:	003a      	movs	r2, r7
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <_vfiprintf_r+0x234>)
 80041f6:	9803      	ldr	r0, [sp, #12]
 80041f8:	f000 f87c 	bl	80042f4 <_printf_i>
 80041fc:	e7e3      	b.n	80041c6 <_vfiprintf_r+0x1ea>
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	080048b4 	.word	0x080048b4
 8004204:	080048ba 	.word	0x080048ba
 8004208:	080048be 	.word	0x080048be
 800420c:	00000000 	.word	0x00000000
 8004210:	08003fb7 	.word	0x08003fb7

08004214 <_printf_common>:
 8004214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004216:	0016      	movs	r6, r2
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	688a      	ldr	r2, [r1, #8]
 800421c:	690b      	ldr	r3, [r1, #16]
 800421e:	000c      	movs	r4, r1
 8004220:	9000      	str	r0, [sp, #0]
 8004222:	4293      	cmp	r3, r2
 8004224:	da00      	bge.n	8004228 <_printf_common+0x14>
 8004226:	0013      	movs	r3, r2
 8004228:	0022      	movs	r2, r4
 800422a:	6033      	str	r3, [r6, #0]
 800422c:	3243      	adds	r2, #67	@ 0x43
 800422e:	7812      	ldrb	r2, [r2, #0]
 8004230:	2a00      	cmp	r2, #0
 8004232:	d001      	beq.n	8004238 <_printf_common+0x24>
 8004234:	3301      	adds	r3, #1
 8004236:	6033      	str	r3, [r6, #0]
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	069b      	lsls	r3, r3, #26
 800423c:	d502      	bpl.n	8004244 <_printf_common+0x30>
 800423e:	6833      	ldr	r3, [r6, #0]
 8004240:	3302      	adds	r3, #2
 8004242:	6033      	str	r3, [r6, #0]
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	2306      	movs	r3, #6
 8004248:	0015      	movs	r5, r2
 800424a:	401d      	ands	r5, r3
 800424c:	421a      	tst	r2, r3
 800424e:	d027      	beq.n	80042a0 <_printf_common+0x8c>
 8004250:	0023      	movs	r3, r4
 8004252:	3343      	adds	r3, #67	@ 0x43
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	0692      	lsls	r2, r2, #26
 800425e:	d430      	bmi.n	80042c2 <_printf_common+0xae>
 8004260:	0022      	movs	r2, r4
 8004262:	9901      	ldr	r1, [sp, #4]
 8004264:	9800      	ldr	r0, [sp, #0]
 8004266:	9d08      	ldr	r5, [sp, #32]
 8004268:	3243      	adds	r2, #67	@ 0x43
 800426a:	47a8      	blx	r5
 800426c:	3001      	adds	r0, #1
 800426e:	d025      	beq.n	80042bc <_printf_common+0xa8>
 8004270:	2206      	movs	r2, #6
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	2500      	movs	r5, #0
 8004276:	4013      	ands	r3, r2
 8004278:	2b04      	cmp	r3, #4
 800427a:	d105      	bne.n	8004288 <_printf_common+0x74>
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	68e5      	ldr	r5, [r4, #12]
 8004280:	1aed      	subs	r5, r5, r3
 8004282:	43eb      	mvns	r3, r5
 8004284:	17db      	asrs	r3, r3, #31
 8004286:	401d      	ands	r5, r3
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	6922      	ldr	r2, [r4, #16]
 800428c:	4293      	cmp	r3, r2
 800428e:	dd01      	ble.n	8004294 <_printf_common+0x80>
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	18ed      	adds	r5, r5, r3
 8004294:	2600      	movs	r6, #0
 8004296:	42b5      	cmp	r5, r6
 8004298:	d120      	bne.n	80042dc <_printf_common+0xc8>
 800429a:	2000      	movs	r0, #0
 800429c:	e010      	b.n	80042c0 <_printf_common+0xac>
 800429e:	3501      	adds	r5, #1
 80042a0:	68e3      	ldr	r3, [r4, #12]
 80042a2:	6832      	ldr	r2, [r6, #0]
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	42ab      	cmp	r3, r5
 80042a8:	ddd2      	ble.n	8004250 <_printf_common+0x3c>
 80042aa:	0022      	movs	r2, r4
 80042ac:	2301      	movs	r3, #1
 80042ae:	9901      	ldr	r1, [sp, #4]
 80042b0:	9800      	ldr	r0, [sp, #0]
 80042b2:	9f08      	ldr	r7, [sp, #32]
 80042b4:	3219      	adds	r2, #25
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	d1f0      	bne.n	800429e <_printf_common+0x8a>
 80042bc:	2001      	movs	r0, #1
 80042be:	4240      	negs	r0, r0
 80042c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042c2:	2030      	movs	r0, #48	@ 0x30
 80042c4:	18e1      	adds	r1, r4, r3
 80042c6:	3143      	adds	r1, #67	@ 0x43
 80042c8:	7008      	strb	r0, [r1, #0]
 80042ca:	0021      	movs	r1, r4
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	3145      	adds	r1, #69	@ 0x45
 80042d0:	7809      	ldrb	r1, [r1, #0]
 80042d2:	18a2      	adds	r2, r4, r2
 80042d4:	3243      	adds	r2, #67	@ 0x43
 80042d6:	3302      	adds	r3, #2
 80042d8:	7011      	strb	r1, [r2, #0]
 80042da:	e7c1      	b.n	8004260 <_printf_common+0x4c>
 80042dc:	0022      	movs	r2, r4
 80042de:	2301      	movs	r3, #1
 80042e0:	9901      	ldr	r1, [sp, #4]
 80042e2:	9800      	ldr	r0, [sp, #0]
 80042e4:	9f08      	ldr	r7, [sp, #32]
 80042e6:	321a      	adds	r2, #26
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	d0e6      	beq.n	80042bc <_printf_common+0xa8>
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7d1      	b.n	8004296 <_printf_common+0x82>
	...

080042f4 <_printf_i>:
 80042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f6:	b08b      	sub	sp, #44	@ 0x2c
 80042f8:	9206      	str	r2, [sp, #24]
 80042fa:	000a      	movs	r2, r1
 80042fc:	3243      	adds	r2, #67	@ 0x43
 80042fe:	9307      	str	r3, [sp, #28]
 8004300:	9005      	str	r0, [sp, #20]
 8004302:	9203      	str	r2, [sp, #12]
 8004304:	7e0a      	ldrb	r2, [r1, #24]
 8004306:	000c      	movs	r4, r1
 8004308:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800430a:	2a78      	cmp	r2, #120	@ 0x78
 800430c:	d809      	bhi.n	8004322 <_printf_i+0x2e>
 800430e:	2a62      	cmp	r2, #98	@ 0x62
 8004310:	d80b      	bhi.n	800432a <_printf_i+0x36>
 8004312:	2a00      	cmp	r2, #0
 8004314:	d100      	bne.n	8004318 <_printf_i+0x24>
 8004316:	e0bc      	b.n	8004492 <_printf_i+0x19e>
 8004318:	497b      	ldr	r1, [pc, #492]	@ (8004508 <_printf_i+0x214>)
 800431a:	9104      	str	r1, [sp, #16]
 800431c:	2a58      	cmp	r2, #88	@ 0x58
 800431e:	d100      	bne.n	8004322 <_printf_i+0x2e>
 8004320:	e090      	b.n	8004444 <_printf_i+0x150>
 8004322:	0025      	movs	r5, r4
 8004324:	3542      	adds	r5, #66	@ 0x42
 8004326:	702a      	strb	r2, [r5, #0]
 8004328:	e022      	b.n	8004370 <_printf_i+0x7c>
 800432a:	0010      	movs	r0, r2
 800432c:	3863      	subs	r0, #99	@ 0x63
 800432e:	2815      	cmp	r0, #21
 8004330:	d8f7      	bhi.n	8004322 <_printf_i+0x2e>
 8004332:	f7fb fee7 	bl	8000104 <__gnu_thumb1_case_shi>
 8004336:	0016      	.short	0x0016
 8004338:	fff6001f 	.word	0xfff6001f
 800433c:	fff6fff6 	.word	0xfff6fff6
 8004340:	001ffff6 	.word	0x001ffff6
 8004344:	fff6fff6 	.word	0xfff6fff6
 8004348:	fff6fff6 	.word	0xfff6fff6
 800434c:	003600a1 	.word	0x003600a1
 8004350:	fff60080 	.word	0xfff60080
 8004354:	00b2fff6 	.word	0x00b2fff6
 8004358:	0036fff6 	.word	0x0036fff6
 800435c:	fff6fff6 	.word	0xfff6fff6
 8004360:	0084      	.short	0x0084
 8004362:	0025      	movs	r5, r4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	3542      	adds	r5, #66	@ 0x42
 8004368:	1d11      	adds	r1, r2, #4
 800436a:	6019      	str	r1, [r3, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	702b      	strb	r3, [r5, #0]
 8004370:	2301      	movs	r3, #1
 8004372:	e0a0      	b.n	80044b6 <_printf_i+0x1c2>
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	6809      	ldr	r1, [r1, #0]
 8004378:	1d02      	adds	r2, r0, #4
 800437a:	060d      	lsls	r5, r1, #24
 800437c:	d50b      	bpl.n	8004396 <_printf_i+0xa2>
 800437e:	6806      	ldr	r6, [r0, #0]
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	2e00      	cmp	r6, #0
 8004384:	da03      	bge.n	800438e <_printf_i+0x9a>
 8004386:	232d      	movs	r3, #45	@ 0x2d
 8004388:	9a03      	ldr	r2, [sp, #12]
 800438a:	4276      	negs	r6, r6
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	4b5e      	ldr	r3, [pc, #376]	@ (8004508 <_printf_i+0x214>)
 8004390:	270a      	movs	r7, #10
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	e018      	b.n	80043c8 <_printf_i+0xd4>
 8004396:	6806      	ldr	r6, [r0, #0]
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	0649      	lsls	r1, r1, #25
 800439c:	d5f1      	bpl.n	8004382 <_printf_i+0x8e>
 800439e:	b236      	sxth	r6, r6
 80043a0:	e7ef      	b.n	8004382 <_printf_i+0x8e>
 80043a2:	6808      	ldr	r0, [r1, #0]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	c940      	ldmia	r1!, {r6}
 80043a8:	0605      	lsls	r5, r0, #24
 80043aa:	d402      	bmi.n	80043b2 <_printf_i+0xbe>
 80043ac:	0640      	lsls	r0, r0, #25
 80043ae:	d500      	bpl.n	80043b2 <_printf_i+0xbe>
 80043b0:	b2b6      	uxth	r6, r6
 80043b2:	6019      	str	r1, [r3, #0]
 80043b4:	4b54      	ldr	r3, [pc, #336]	@ (8004508 <_printf_i+0x214>)
 80043b6:	270a      	movs	r7, #10
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80043bc:	d100      	bne.n	80043c0 <_printf_i+0xcc>
 80043be:	3f02      	subs	r7, #2
 80043c0:	0023      	movs	r3, r4
 80043c2:	2200      	movs	r2, #0
 80043c4:	3343      	adds	r3, #67	@ 0x43
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db03      	blt.n	80043d8 <_printf_i+0xe4>
 80043d0:	2104      	movs	r1, #4
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	438a      	bics	r2, r1
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	2e00      	cmp	r6, #0
 80043da:	d102      	bne.n	80043e2 <_printf_i+0xee>
 80043dc:	9d03      	ldr	r5, [sp, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <_printf_i+0x108>
 80043e2:	9d03      	ldr	r5, [sp, #12]
 80043e4:	0030      	movs	r0, r6
 80043e6:	0039      	movs	r1, r7
 80043e8:	f7fb ff1c 	bl	8000224 <__aeabi_uidivmod>
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	3d01      	subs	r5, #1
 80043f0:	5c5b      	ldrb	r3, [r3, r1]
 80043f2:	702b      	strb	r3, [r5, #0]
 80043f4:	0033      	movs	r3, r6
 80043f6:	0006      	movs	r6, r0
 80043f8:	429f      	cmp	r7, r3
 80043fa:	d9f3      	bls.n	80043e4 <_printf_i+0xf0>
 80043fc:	2f08      	cmp	r7, #8
 80043fe:	d109      	bne.n	8004414 <_printf_i+0x120>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07db      	lsls	r3, r3, #31
 8004404:	d506      	bpl.n	8004414 <_printf_i+0x120>
 8004406:	6862      	ldr	r2, [r4, #4]
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	dc02      	bgt.n	8004414 <_printf_i+0x120>
 800440e:	2330      	movs	r3, #48	@ 0x30
 8004410:	3d01      	subs	r5, #1
 8004412:	702b      	strb	r3, [r5, #0]
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	1b5b      	subs	r3, r3, r5
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	9b07      	ldr	r3, [sp, #28]
 800441c:	0021      	movs	r1, r4
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	9805      	ldr	r0, [sp, #20]
 8004422:	9b06      	ldr	r3, [sp, #24]
 8004424:	aa09      	add	r2, sp, #36	@ 0x24
 8004426:	f7ff fef5 	bl	8004214 <_printf_common>
 800442a:	3001      	adds	r0, #1
 800442c:	d148      	bne.n	80044c0 <_printf_i+0x1cc>
 800442e:	2001      	movs	r0, #1
 8004430:	4240      	negs	r0, r0
 8004432:	b00b      	add	sp, #44	@ 0x2c
 8004434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004436:	2220      	movs	r2, #32
 8004438:	6809      	ldr	r1, [r1, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	2278      	movs	r2, #120	@ 0x78
 8004440:	4932      	ldr	r1, [pc, #200]	@ (800450c <_printf_i+0x218>)
 8004442:	9104      	str	r1, [sp, #16]
 8004444:	0021      	movs	r1, r4
 8004446:	3145      	adds	r1, #69	@ 0x45
 8004448:	700a      	strb	r2, [r1, #0]
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	c940      	ldmia	r1!, {r6}
 8004450:	0610      	lsls	r0, r2, #24
 8004452:	d402      	bmi.n	800445a <_printf_i+0x166>
 8004454:	0650      	lsls	r0, r2, #25
 8004456:	d500      	bpl.n	800445a <_printf_i+0x166>
 8004458:	b2b6      	uxth	r6, r6
 800445a:	6019      	str	r1, [r3, #0]
 800445c:	07d3      	lsls	r3, r2, #31
 800445e:	d502      	bpl.n	8004466 <_printf_i+0x172>
 8004460:	2320      	movs	r3, #32
 8004462:	4313      	orrs	r3, r2
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	2e00      	cmp	r6, #0
 8004468:	d001      	beq.n	800446e <_printf_i+0x17a>
 800446a:	2710      	movs	r7, #16
 800446c:	e7a8      	b.n	80043c0 <_printf_i+0xcc>
 800446e:	2220      	movs	r2, #32
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	4393      	bics	r3, r2
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	e7f8      	b.n	800446a <_printf_i+0x176>
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	680d      	ldr	r5, [r1, #0]
 800447c:	1d10      	adds	r0, r2, #4
 800447e:	6949      	ldr	r1, [r1, #20]
 8004480:	6018      	str	r0, [r3, #0]
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	062e      	lsls	r6, r5, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0x198>
 8004488:	6019      	str	r1, [r3, #0]
 800448a:	e002      	b.n	8004492 <_printf_i+0x19e>
 800448c:	066d      	lsls	r5, r5, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0x194>
 8004490:	8019      	strh	r1, [r3, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	9d03      	ldr	r5, [sp, #12]
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	e7bf      	b.n	800441a <_printf_i+0x126>
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	1d11      	adds	r1, r2, #4
 800449e:	6019      	str	r1, [r3, #0]
 80044a0:	6815      	ldr	r5, [r2, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	0028      	movs	r0, r5
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	f000 f986 	bl	80047b8 <memchr>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d001      	beq.n	80044b4 <_printf_i+0x1c0>
 80044b0:	1b40      	subs	r0, r0, r5
 80044b2:	6060      	str	r0, [r4, #4]
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9a03      	ldr	r2, [sp, #12]
 80044bc:	7013      	strb	r3, [r2, #0]
 80044be:	e7ac      	b.n	800441a <_printf_i+0x126>
 80044c0:	002a      	movs	r2, r5
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	9906      	ldr	r1, [sp, #24]
 80044c6:	9805      	ldr	r0, [sp, #20]
 80044c8:	9d07      	ldr	r5, [sp, #28]
 80044ca:	47a8      	blx	r5
 80044cc:	3001      	adds	r0, #1
 80044ce:	d0ae      	beq.n	800442e <_printf_i+0x13a>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	079b      	lsls	r3, r3, #30
 80044d4:	d415      	bmi.n	8004502 <_printf_i+0x20e>
 80044d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d8:	68e0      	ldr	r0, [r4, #12]
 80044da:	4298      	cmp	r0, r3
 80044dc:	daa9      	bge.n	8004432 <_printf_i+0x13e>
 80044de:	0018      	movs	r0, r3
 80044e0:	e7a7      	b.n	8004432 <_printf_i+0x13e>
 80044e2:	0022      	movs	r2, r4
 80044e4:	2301      	movs	r3, #1
 80044e6:	9906      	ldr	r1, [sp, #24]
 80044e8:	9805      	ldr	r0, [sp, #20]
 80044ea:	9e07      	ldr	r6, [sp, #28]
 80044ec:	3219      	adds	r2, #25
 80044ee:	47b0      	blx	r6
 80044f0:	3001      	adds	r0, #1
 80044f2:	d09c      	beq.n	800442e <_printf_i+0x13a>
 80044f4:	3501      	adds	r5, #1
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dcf0      	bgt.n	80044e2 <_printf_i+0x1ee>
 8004500:	e7e9      	b.n	80044d6 <_printf_i+0x1e2>
 8004502:	2500      	movs	r5, #0
 8004504:	e7f7      	b.n	80044f6 <_printf_i+0x202>
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	080048c5 	.word	0x080048c5
 800450c:	080048d6 	.word	0x080048d6

08004510 <__sflush_r>:
 8004510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004512:	220c      	movs	r2, #12
 8004514:	5e8b      	ldrsh	r3, [r1, r2]
 8004516:	0005      	movs	r5, r0
 8004518:	000c      	movs	r4, r1
 800451a:	071a      	lsls	r2, r3, #28
 800451c:	d456      	bmi.n	80045cc <__sflush_r+0xbc>
 800451e:	684a      	ldr	r2, [r1, #4]
 8004520:	2a00      	cmp	r2, #0
 8004522:	dc02      	bgt.n	800452a <__sflush_r+0x1a>
 8004524:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004526:	2a00      	cmp	r2, #0
 8004528:	dd4e      	ble.n	80045c8 <__sflush_r+0xb8>
 800452a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800452c:	2f00      	cmp	r7, #0
 800452e:	d04b      	beq.n	80045c8 <__sflush_r+0xb8>
 8004530:	2200      	movs	r2, #0
 8004532:	2080      	movs	r0, #128	@ 0x80
 8004534:	682e      	ldr	r6, [r5, #0]
 8004536:	602a      	str	r2, [r5, #0]
 8004538:	001a      	movs	r2, r3
 800453a:	0140      	lsls	r0, r0, #5
 800453c:	6a21      	ldr	r1, [r4, #32]
 800453e:	4002      	ands	r2, r0
 8004540:	4203      	tst	r3, r0
 8004542:	d033      	beq.n	80045ac <__sflush_r+0x9c>
 8004544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	075b      	lsls	r3, r3, #29
 800454a:	d506      	bpl.n	800455a <__sflush_r+0x4a>
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <__sflush_r+0x4a>
 8004556:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004558:	1ad2      	subs	r2, r2, r3
 800455a:	2300      	movs	r3, #0
 800455c:	0028      	movs	r0, r5
 800455e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004560:	6a21      	ldr	r1, [r4, #32]
 8004562:	47b8      	blx	r7
 8004564:	89a2      	ldrh	r2, [r4, #12]
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	d106      	bne.n	8004578 <__sflush_r+0x68>
 800456a:	6829      	ldr	r1, [r5, #0]
 800456c:	291d      	cmp	r1, #29
 800456e:	d846      	bhi.n	80045fe <__sflush_r+0xee>
 8004570:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <__sflush_r+0x108>)
 8004572:	410b      	asrs	r3, r1
 8004574:	07db      	lsls	r3, r3, #31
 8004576:	d442      	bmi.n	80045fe <__sflush_r+0xee>
 8004578:	2300      	movs	r3, #0
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	04d2      	lsls	r2, r2, #19
 8004582:	d505      	bpl.n	8004590 <__sflush_r+0x80>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <__sflush_r+0x7e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d100      	bne.n	8004590 <__sflush_r+0x80>
 800458e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004592:	602e      	str	r6, [r5, #0]
 8004594:	2900      	cmp	r1, #0
 8004596:	d017      	beq.n	80045c8 <__sflush_r+0xb8>
 8004598:	0023      	movs	r3, r4
 800459a:	3344      	adds	r3, #68	@ 0x44
 800459c:	4299      	cmp	r1, r3
 800459e:	d002      	beq.n	80045a6 <__sflush_r+0x96>
 80045a0:	0028      	movs	r0, r5
 80045a2:	f7ff fbf7 	bl	8003d94 <_free_r>
 80045a6:	2300      	movs	r3, #0
 80045a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80045aa:	e00d      	b.n	80045c8 <__sflush_r+0xb8>
 80045ac:	2301      	movs	r3, #1
 80045ae:	0028      	movs	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	0002      	movs	r2, r0
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d1c6      	bne.n	8004546 <__sflush_r+0x36>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0c3      	beq.n	8004546 <__sflush_r+0x36>
 80045be:	2b1d      	cmp	r3, #29
 80045c0:	d001      	beq.n	80045c6 <__sflush_r+0xb6>
 80045c2:	2b16      	cmp	r3, #22
 80045c4:	d11a      	bne.n	80045fc <__sflush_r+0xec>
 80045c6:	602e      	str	r6, [r5, #0]
 80045c8:	2000      	movs	r0, #0
 80045ca:	e01e      	b.n	800460a <__sflush_r+0xfa>
 80045cc:	690e      	ldr	r6, [r1, #16]
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d0fa      	beq.n	80045c8 <__sflush_r+0xb8>
 80045d2:	680f      	ldr	r7, [r1, #0]
 80045d4:	600e      	str	r6, [r1, #0]
 80045d6:	1bba      	subs	r2, r7, r6
 80045d8:	9201      	str	r2, [sp, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	079b      	lsls	r3, r3, #30
 80045de:	d100      	bne.n	80045e2 <__sflush_r+0xd2>
 80045e0:	694a      	ldr	r2, [r1, #20]
 80045e2:	60a2      	str	r2, [r4, #8]
 80045e4:	9b01      	ldr	r3, [sp, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	ddee      	ble.n	80045c8 <__sflush_r+0xb8>
 80045ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80045ec:	0032      	movs	r2, r6
 80045ee:	001f      	movs	r7, r3
 80045f0:	0028      	movs	r0, r5
 80045f2:	9b01      	ldr	r3, [sp, #4]
 80045f4:	6a21      	ldr	r1, [r4, #32]
 80045f6:	47b8      	blx	r7
 80045f8:	2800      	cmp	r0, #0
 80045fa:	dc07      	bgt.n	800460c <__sflush_r+0xfc>
 80045fc:	89a2      	ldrh	r2, [r4, #12]
 80045fe:	2340      	movs	r3, #64	@ 0x40
 8004600:	2001      	movs	r0, #1
 8004602:	4313      	orrs	r3, r2
 8004604:	b21b      	sxth	r3, r3
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	4240      	negs	r0, r0
 800460a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	1836      	adds	r6, r6, r0
 8004610:	1a1b      	subs	r3, r3, r0
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	e7e6      	b.n	80045e4 <__sflush_r+0xd4>
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	dfbffffe 	.word	0xdfbffffe

0800461c <_fflush_r>:
 800461c:	690b      	ldr	r3, [r1, #16]
 800461e:	b570      	push	{r4, r5, r6, lr}
 8004620:	0005      	movs	r5, r0
 8004622:	000c      	movs	r4, r1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <_fflush_r+0x12>
 8004628:	2500      	movs	r5, #0
 800462a:	0028      	movs	r0, r5
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	2800      	cmp	r0, #0
 8004630:	d004      	beq.n	800463c <_fflush_r+0x20>
 8004632:	6a03      	ldr	r3, [r0, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <_fflush_r+0x20>
 8004638:	f7ff f998 	bl	800396c <__sinit>
 800463c:	220c      	movs	r2, #12
 800463e:	5ea3      	ldrsh	r3, [r4, r2]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f1      	beq.n	8004628 <_fflush_r+0xc>
 8004644:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004646:	07d2      	lsls	r2, r2, #31
 8004648:	d404      	bmi.n	8004654 <_fflush_r+0x38>
 800464a:	059b      	lsls	r3, r3, #22
 800464c:	d402      	bmi.n	8004654 <_fflush_r+0x38>
 800464e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004650:	f7ff fb9d 	bl	8003d8e <__retarget_lock_acquire_recursive>
 8004654:	0028      	movs	r0, r5
 8004656:	0021      	movs	r1, r4
 8004658:	f7ff ff5a 	bl	8004510 <__sflush_r>
 800465c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800465e:	0005      	movs	r5, r0
 8004660:	07db      	lsls	r3, r3, #31
 8004662:	d4e2      	bmi.n	800462a <_fflush_r+0xe>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	059b      	lsls	r3, r3, #22
 8004668:	d4df      	bmi.n	800462a <_fflush_r+0xe>
 800466a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800466c:	f7ff fb90 	bl	8003d90 <__retarget_lock_release_recursive>
 8004670:	e7db      	b.n	800462a <_fflush_r+0xe>
	...

08004674 <__swhatbuf_r>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	000e      	movs	r6, r1
 8004678:	001d      	movs	r5, r3
 800467a:	230e      	movs	r3, #14
 800467c:	5ec9      	ldrsh	r1, [r1, r3]
 800467e:	0014      	movs	r4, r2
 8004680:	b096      	sub	sp, #88	@ 0x58
 8004682:	2900      	cmp	r1, #0
 8004684:	da0c      	bge.n	80046a0 <__swhatbuf_r+0x2c>
 8004686:	89b2      	ldrh	r2, [r6, #12]
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	0011      	movs	r1, r2
 800468c:	4019      	ands	r1, r3
 800468e:	421a      	tst	r2, r3
 8004690:	d114      	bne.n	80046bc <__swhatbuf_r+0x48>
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	2000      	movs	r0, #0
 8004698:	6029      	str	r1, [r5, #0]
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	b016      	add	sp, #88	@ 0x58
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	466a      	mov	r2, sp
 80046a2:	f000 f853 	bl	800474c <_fstat_r>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	dbed      	blt.n	8004686 <__swhatbuf_r+0x12>
 80046aa:	23f0      	movs	r3, #240	@ 0xf0
 80046ac:	9901      	ldr	r1, [sp, #4]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4019      	ands	r1, r3
 80046b2:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <__swhatbuf_r+0x50>)
 80046b4:	18c9      	adds	r1, r1, r3
 80046b6:	424b      	negs	r3, r1
 80046b8:	4159      	adcs	r1, r3
 80046ba:	e7ea      	b.n	8004692 <__swhatbuf_r+0x1e>
 80046bc:	2100      	movs	r1, #0
 80046be:	2340      	movs	r3, #64	@ 0x40
 80046c0:	e7e9      	b.n	8004696 <__swhatbuf_r+0x22>
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	ffffe000 	.word	0xffffe000

080046c8 <__smakebuf_r>:
 80046c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ca:	2602      	movs	r6, #2
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	0005      	movs	r5, r0
 80046d0:	000c      	movs	r4, r1
 80046d2:	b085      	sub	sp, #20
 80046d4:	4233      	tst	r3, r6
 80046d6:	d007      	beq.n	80046e8 <__smakebuf_r+0x20>
 80046d8:	0023      	movs	r3, r4
 80046da:	3347      	adds	r3, #71	@ 0x47
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	2301      	movs	r3, #1
 80046e2:	6163      	str	r3, [r4, #20]
 80046e4:	b005      	add	sp, #20
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	aa02      	add	r2, sp, #8
 80046ec:	f7ff ffc2 	bl	8004674 <__swhatbuf_r>
 80046f0:	9f02      	ldr	r7, [sp, #8]
 80046f2:	9001      	str	r0, [sp, #4]
 80046f4:	0039      	movs	r1, r7
 80046f6:	0028      	movs	r0, r5
 80046f8:	f7ff fbb8 	bl	8003e6c <_malloc_r>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d108      	bne.n	8004712 <__smakebuf_r+0x4a>
 8004700:	220c      	movs	r2, #12
 8004702:	5ea3      	ldrsh	r3, [r4, r2]
 8004704:	059a      	lsls	r2, r3, #22
 8004706:	d4ed      	bmi.n	80046e4 <__smakebuf_r+0x1c>
 8004708:	2203      	movs	r2, #3
 800470a:	4393      	bics	r3, r2
 800470c:	431e      	orrs	r6, r3
 800470e:	81a6      	strh	r6, [r4, #12]
 8004710:	e7e2      	b.n	80046d8 <__smakebuf_r+0x10>
 8004712:	2380      	movs	r3, #128	@ 0x80
 8004714:	89a2      	ldrh	r2, [r4, #12]
 8004716:	6020      	str	r0, [r4, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	6120      	str	r0, [r4, #16]
 8004720:	6167      	str	r7, [r4, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <__smakebuf_r+0x78>
 8004726:	0028      	movs	r0, r5
 8004728:	230e      	movs	r3, #14
 800472a:	5ee1      	ldrsh	r1, [r4, r3]
 800472c:	f000 f820 	bl	8004770 <_isatty_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	d005      	beq.n	8004740 <__smakebuf_r+0x78>
 8004734:	2303      	movs	r3, #3
 8004736:	89a2      	ldrh	r2, [r4, #12]
 8004738:	439a      	bics	r2, r3
 800473a:	3b02      	subs	r3, #2
 800473c:	4313      	orrs	r3, r2
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	9a01      	ldr	r2, [sp, #4]
 8004744:	4313      	orrs	r3, r2
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	e7cc      	b.n	80046e4 <__smakebuf_r+0x1c>
	...

0800474c <_fstat_r>:
 800474c:	2300      	movs	r3, #0
 800474e:	b570      	push	{r4, r5, r6, lr}
 8004750:	4d06      	ldr	r5, [pc, #24]	@ (800476c <_fstat_r+0x20>)
 8004752:	0004      	movs	r4, r0
 8004754:	0008      	movs	r0, r1
 8004756:	0011      	movs	r1, r2
 8004758:	602b      	str	r3, [r5, #0]
 800475a:	f7fc f94e 	bl	80009fa <_fstat>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	d103      	bne.n	800476a <_fstat_r+0x1e>
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d000      	beq.n	800476a <_fstat_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	20000260 	.word	0x20000260

08004770 <_isatty_r>:
 8004770:	2300      	movs	r3, #0
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	4d06      	ldr	r5, [pc, #24]	@ (8004790 <_isatty_r+0x20>)
 8004776:	0004      	movs	r4, r0
 8004778:	0008      	movs	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fc f94b 	bl	8000a16 <_isatty>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d103      	bne.n	800478c <_isatty_r+0x1c>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <_isatty_r+0x1c>
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	20000260 	.word	0x20000260

08004794 <_sbrk_r>:
 8004794:	2300      	movs	r3, #0
 8004796:	b570      	push	{r4, r5, r6, lr}
 8004798:	4d06      	ldr	r5, [pc, #24]	@ (80047b4 <_sbrk_r+0x20>)
 800479a:	0004      	movs	r4, r0
 800479c:	0008      	movs	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fc f94e 	bl	8000a40 <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d103      	bne.n	80047b0 <_sbrk_r+0x1c>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d000      	beq.n	80047b0 <_sbrk_r+0x1c>
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	20000260 	.word	0x20000260

080047b8 <memchr>:
 80047b8:	b2c9      	uxtb	r1, r1
 80047ba:	1882      	adds	r2, r0, r2
 80047bc:	4290      	cmp	r0, r2
 80047be:	d101      	bne.n	80047c4 <memchr+0xc>
 80047c0:	2000      	movs	r0, #0
 80047c2:	4770      	bx	lr
 80047c4:	7803      	ldrb	r3, [r0, #0]
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d0fb      	beq.n	80047c2 <memchr+0xa>
 80047ca:	3001      	adds	r0, #1
 80047cc:	e7f6      	b.n	80047bc <memchr+0x4>
	...

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
