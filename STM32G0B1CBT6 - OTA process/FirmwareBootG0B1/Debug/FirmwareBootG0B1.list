
FirmwareBootG0B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005318  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  000070f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  000070f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00006680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08005688  00007000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000002b8  200000f4  0800577c  000070f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800577c  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd79  00000000  00000000  0000711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  00014e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00017490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091c  00000000  00000000  00018058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c750  00000000  00000000  00018974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0b2  00000000  00000000  000350c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3280  00000000  00000000  00044176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f73f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003098  00000000  00000000  000f743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000fa4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f4 	.word	0x200000f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080053b0 	.word	0x080053b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f8 	.word	0x200000f8
 8000104:	080053b0 	.word	0x080053b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__udivmoddi4>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	b5e0      	push	{r5, r6, r7, lr}
 8000454:	0004      	movs	r4, r0
 8000456:	000d      	movs	r5, r1
 8000458:	4692      	mov	sl, r2
 800045a:	4699      	mov	r9, r3
 800045c:	b083      	sub	sp, #12
 800045e:	428b      	cmp	r3, r1
 8000460:	d830      	bhi.n	80004c4 <__udivmoddi4+0x7c>
 8000462:	d02d      	beq.n	80004c0 <__udivmoddi4+0x78>
 8000464:	4649      	mov	r1, r9
 8000466:	4650      	mov	r0, sl
 8000468:	f000 f8ba 	bl	80005e0 <__clzdi2>
 800046c:	0029      	movs	r1, r5
 800046e:	0006      	movs	r6, r0
 8000470:	0020      	movs	r0, r4
 8000472:	f000 f8b5 	bl	80005e0 <__clzdi2>
 8000476:	1a33      	subs	r3, r6, r0
 8000478:	4698      	mov	r8, r3
 800047a:	3b20      	subs	r3, #32
 800047c:	d434      	bmi.n	80004e8 <__udivmoddi4+0xa0>
 800047e:	469b      	mov	fp, r3
 8000480:	4653      	mov	r3, sl
 8000482:	465a      	mov	r2, fp
 8000484:	4093      	lsls	r3, r2
 8000486:	4642      	mov	r2, r8
 8000488:	001f      	movs	r7, r3
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	001e      	movs	r6, r3
 8000490:	42af      	cmp	r7, r5
 8000492:	d83b      	bhi.n	800050c <__udivmoddi4+0xc4>
 8000494:	42af      	cmp	r7, r5
 8000496:	d100      	bne.n	800049a <__udivmoddi4+0x52>
 8000498:	e079      	b.n	800058e <__udivmoddi4+0x146>
 800049a:	465b      	mov	r3, fp
 800049c:	1ba4      	subs	r4, r4, r6
 800049e:	41bd      	sbcs	r5, r7
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	da00      	bge.n	80004a6 <__udivmoddi4+0x5e>
 80004a4:	e076      	b.n	8000594 <__udivmoddi4+0x14c>
 80004a6:	2200      	movs	r2, #0
 80004a8:	2300      	movs	r3, #0
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	465a      	mov	r2, fp
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	4642      	mov	r2, r8
 80004ba:	4093      	lsls	r3, r2
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	e029      	b.n	8000514 <__udivmoddi4+0xcc>
 80004c0:	4282      	cmp	r2, r0
 80004c2:	d9cf      	bls.n	8000464 <__udivmoddi4+0x1c>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2300      	movs	r3, #0
 80004c8:	9200      	str	r2, [sp, #0]
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <__udivmoddi4+0x8e>
 80004d2:	601c      	str	r4, [r3, #0]
 80004d4:	605d      	str	r5, [r3, #4]
 80004d6:	9800      	ldr	r0, [sp, #0]
 80004d8:	9901      	ldr	r1, [sp, #4]
 80004da:	b003      	add	sp, #12
 80004dc:	bcf0      	pop	{r4, r5, r6, r7}
 80004de:	46bb      	mov	fp, r7
 80004e0:	46b2      	mov	sl, r6
 80004e2:	46a9      	mov	r9, r5
 80004e4:	46a0      	mov	r8, r4
 80004e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e8:	4642      	mov	r2, r8
 80004ea:	469b      	mov	fp, r3
 80004ec:	2320      	movs	r3, #32
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	4652      	mov	r2, sl
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	4641      	mov	r1, r8
 80004f6:	0013      	movs	r3, r2
 80004f8:	464a      	mov	r2, r9
 80004fa:	408a      	lsls	r2, r1
 80004fc:	0017      	movs	r7, r2
 80004fe:	4642      	mov	r2, r8
 8000500:	431f      	orrs	r7, r3
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	001e      	movs	r6, r3
 8000508:	42af      	cmp	r7, r5
 800050a:	d9c3      	bls.n	8000494 <__udivmoddi4+0x4c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	4643      	mov	r3, r8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0d8      	beq.n	80004cc <__udivmoddi4+0x84>
 800051a:	07fb      	lsls	r3, r7, #31
 800051c:	0872      	lsrs	r2, r6, #1
 800051e:	431a      	orrs	r2, r3
 8000520:	4646      	mov	r6, r8
 8000522:	087b      	lsrs	r3, r7, #1
 8000524:	e00e      	b.n	8000544 <__udivmoddi4+0xfc>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d101      	bne.n	800052e <__udivmoddi4+0xe6>
 800052a:	42a2      	cmp	r2, r4
 800052c:	d80c      	bhi.n	8000548 <__udivmoddi4+0x100>
 800052e:	1aa4      	subs	r4, r4, r2
 8000530:	419d      	sbcs	r5, r3
 8000532:	2001      	movs	r0, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2100      	movs	r1, #0
 800053a:	3e01      	subs	r6, #1
 800053c:	1824      	adds	r4, r4, r0
 800053e:	414d      	adcs	r5, r1
 8000540:	2e00      	cmp	r6, #0
 8000542:	d006      	beq.n	8000552 <__udivmoddi4+0x10a>
 8000544:	42ab      	cmp	r3, r5
 8000546:	d9ee      	bls.n	8000526 <__udivmoddi4+0xde>
 8000548:	3e01      	subs	r6, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2e00      	cmp	r6, #0
 8000550:	d1f8      	bne.n	8000544 <__udivmoddi4+0xfc>
 8000552:	9800      	ldr	r0, [sp, #0]
 8000554:	9901      	ldr	r1, [sp, #4]
 8000556:	465b      	mov	r3, fp
 8000558:	1900      	adds	r0, r0, r4
 800055a:	4169      	adcs	r1, r5
 800055c:	2b00      	cmp	r3, #0
 800055e:	db24      	blt.n	80005aa <__udivmoddi4+0x162>
 8000560:	002b      	movs	r3, r5
 8000562:	465a      	mov	r2, fp
 8000564:	4644      	mov	r4, r8
 8000566:	40d3      	lsrs	r3, r2
 8000568:	002a      	movs	r2, r5
 800056a:	40e2      	lsrs	r2, r4
 800056c:	001c      	movs	r4, r3
 800056e:	465b      	mov	r3, fp
 8000570:	0015      	movs	r5, r2
 8000572:	2b00      	cmp	r3, #0
 8000574:	db2a      	blt.n	80005cc <__udivmoddi4+0x184>
 8000576:	0026      	movs	r6, r4
 8000578:	409e      	lsls	r6, r3
 800057a:	0033      	movs	r3, r6
 800057c:	0026      	movs	r6, r4
 800057e:	4647      	mov	r7, r8
 8000580:	40be      	lsls	r6, r7
 8000582:	0032      	movs	r2, r6
 8000584:	1a80      	subs	r0, r0, r2
 8000586:	4199      	sbcs	r1, r3
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	e79e      	b.n	80004cc <__udivmoddi4+0x84>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d8bc      	bhi.n	800050c <__udivmoddi4+0xc4>
 8000592:	e782      	b.n	800049a <__udivmoddi4+0x52>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	2100      	movs	r1, #0
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	9100      	str	r1, [sp, #0]
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	e785      	b.n	80004b6 <__udivmoddi4+0x6e>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	4646      	mov	r6, r8
 80005b4:	409a      	lsls	r2, r3
 80005b6:	0023      	movs	r3, r4
 80005b8:	40f3      	lsrs	r3, r6
 80005ba:	4644      	mov	r4, r8
 80005bc:	4313      	orrs	r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	40e2      	lsrs	r2, r4
 80005c2:	001c      	movs	r4, r3
 80005c4:	465b      	mov	r3, fp
 80005c6:	0015      	movs	r5, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	dad4      	bge.n	8000576 <__udivmoddi4+0x12e>
 80005cc:	4642      	mov	r2, r8
 80005ce:	002f      	movs	r7, r5
 80005d0:	2320      	movs	r3, #32
 80005d2:	0026      	movs	r6, r4
 80005d4:	4097      	lsls	r7, r2
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	40de      	lsrs	r6, r3
 80005da:	003b      	movs	r3, r7
 80005dc:	4333      	orrs	r3, r6
 80005de:	e7cd      	b.n	800057c <__udivmoddi4+0x134>

080005e0 <__clzdi2>:
 80005e0:	b510      	push	{r4, lr}
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d103      	bne.n	80005ee <__clzdi2+0xe>
 80005e6:	f000 f807 	bl	80005f8 <__clzsi2>
 80005ea:	3020      	adds	r0, #32
 80005ec:	e002      	b.n	80005f4 <__clzdi2+0x14>
 80005ee:	0008      	movs	r0, r1
 80005f0:	f000 f802 	bl	80005f8 <__clzsi2>
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)

080005f8 <__clzsi2>:
 80005f8:	211c      	movs	r1, #28
 80005fa:	2301      	movs	r3, #1
 80005fc:	041b      	lsls	r3, r3, #16
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0xe>
 8000602:	0c00      	lsrs	r0, r0, #16
 8000604:	3910      	subs	r1, #16
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	4298      	cmp	r0, r3
 800060a:	d301      	bcc.n	8000610 <__clzsi2+0x18>
 800060c:	0a00      	lsrs	r0, r0, #8
 800060e:	3908      	subs	r1, #8
 8000610:	091b      	lsrs	r3, r3, #4
 8000612:	4298      	cmp	r0, r3
 8000614:	d301      	bcc.n	800061a <__clzsi2+0x22>
 8000616:	0900      	lsrs	r0, r0, #4
 8000618:	3904      	subs	r1, #4
 800061a:	a202      	add	r2, pc, #8	@ (adr r2, 8000624 <__clzsi2+0x2c>)
 800061c:	5c10      	ldrb	r0, [r2, r0]
 800061e:	1840      	adds	r0, r0, r1
 8000620:	4770      	bx	lr
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	02020304 	.word	0x02020304
 8000628:	01010101 	.word	0x01010101
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fdc0 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f81a 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8fc 	bl	800083c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f8ac 	bl	80007a0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f85c 	bl	8000704 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader v%d:%d Started!!!\n", BL_Version[0], BL_Version[1]);
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <main+0x38>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	0019      	movs	r1, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <main+0x38>)
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	001a      	movs	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <main+0x3c>)
 800065a:	0018      	movs	r0, r3
 800065c:	f003 ffaa 	bl	80045b4 <iprintf>
  /* USER CODE END 2 */
  Firmware_Update();
 8000660:	f000 fa44 	bl	8000aec <Firmware_Update>
  goto_application();
 8000664:	f000 fb9a 	bl	8000d9c <goto_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	e7fd      	b.n	8000668 <main+0x34>
 800066c:	20000000 	.word	0x20000000
 8000670:	080053d8 	.word	0x080053d8

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b095      	sub	sp, #84	@ 0x54
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	233c      	movs	r3, #60	@ 0x3c
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f004 f8f1 	bl	800486c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f004 f8ea 	bl	800486c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fb11 	bl	8001cc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2240      	movs	r2, #64	@ 0x40
 80006ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fb49 	bl	8001d5c <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ce:	f000 fb8d 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fe94 	bl	800241c <HAL_RCC_ClockConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f8:	f000 fb78 	bl	8000dec <Error_Handler>
  }
}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b015      	add	sp, #84	@ 0x54
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800070a:	4a24      	ldr	r2, [pc, #144]	@ (800079c <MX_USART1_UART_Init+0x98>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000710:	22e1      	movs	r2, #225	@ 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800074e:	0018      	movs	r0, r3
 8000750:	f002 fa4a 	bl	8002be8 <HAL_UART_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 fb48 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f003 fd83 	bl	800426c <HAL_UARTEx_SetTxFifoThreshold>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 fb3f 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f003 fdba 	bl	80042ec <HAL_UARTEx_SetRxFifoThreshold>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 fb36 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_USART1_UART_Init+0x94>)
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fd38 	bl	80041f8 <HAL_UARTEx_DisableFifoMode>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 fb2e 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	20000110 	.word	0x20000110
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007a6:	4a24      	ldr	r2, [pc, #144]	@ (8000838 <MX_USART3_UART_Init+0x98>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007ac:	22e1      	movs	r2, #225	@ 0xe1
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 f9fc 	bl	8002be8 <HAL_UART_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 fafa 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f003 fd35 	bl	800426c <HAL_UARTEx_SetTxFifoThreshold>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 faf1 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 800080c:	2100      	movs	r1, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f003 fd6c 	bl	80042ec <HAL_UARTEx_SetRxFifoThreshold>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 fae8 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <MX_USART3_UART_Init+0x94>)
 800081e:	0018      	movs	r0, r3
 8000820:	f003 fcea 	bl	80041f8 <HAL_UARTEx_DisableFifoMode>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 fae0 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	200001a4 	.word	0x200001a4
 8000838:	40004800 	.word	0x40004800

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_GPIO_Init+0x40>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_GPIO_Init+0x40>)
 8000848:	2102      	movs	r1, #2
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_GPIO_Init+0x40>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000852:	2202      	movs	r2, #2
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_GPIO_Init+0x40>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_GPIO_Init+0x40>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <MX_GPIO_Init+0x40>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	40021000 	.word	0x40021000

08000880 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000888:	2301      	movs	r3, #1
 800088a:	425b      	negs	r3, r3
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <__io_putchar+0x20>)
 8000890:	2201      	movs	r2, #1
 8000892:	f002 f9ff 	bl	8002c94 <HAL_UART_Transmit>
    return ch;
 8000896:	687b      	ldr	r3, [r7, #4]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000110 	.word	0x20000110

080008a4 <UART_Write_Loop>:

static int UART_Write_Loop( void )
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
  char tx = 'g';
 80008aa:	1dbb      	adds	r3, r7, #6
 80008ac:	2267      	movs	r2, #103	@ 0x67
 80008ae:	701a      	strb	r2, [r3, #0]
  char rx = '0';
 80008b0:	1d7b      	adds	r3, r7, #5
 80008b2:	2230      	movs	r2, #48	@ 0x30
 80008b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ex;
  int ret = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  int count = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    //Toggle GPIO
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

    HAL_UART_Transmit(&huart3, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 80008be:	2301      	movs	r3, #1
 80008c0:	425b      	negs	r3, r3
 80008c2:	1db9      	adds	r1, r7, #6
 80008c4:	4817      	ldr	r0, [pc, #92]	@ (8000924 <UART_Write_Loop+0x80>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	f002 f9e4 	bl	8002c94 <HAL_UART_Transmit>

    ex = HAL_UART_Receive(&huart3, (uint8_t *)&rx, 1, 10);
 80008cc:	1dfc      	adds	r4, r7, #7
 80008ce:	1d79      	adds	r1, r7, #5
 80008d0:	4814      	ldr	r0, [pc, #80]	@ (8000924 <UART_Write_Loop+0x80>)
 80008d2:	230a      	movs	r3, #10
 80008d4:	2201      	movs	r2, #1
 80008d6:	f002 fa81 	bl	8002ddc <HAL_UART_Receive>
 80008da:	0003      	movs	r3, r0
 80008dc:	7023      	strb	r3, [r4, #0]

    if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10a      	bne.n	80008fc <UART_Write_Loop+0x58>
 80008e6:	1d7b      	adds	r3, r7, #5
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b72      	cmp	r3, #114	@ 0x72
 80008ec:	d106      	bne.n	80008fc <UART_Write_Loop+0x58>
    {
      //received data
      printf("Firmware Update Started\r\n");
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <UART_Write_Loop+0x84>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 fec5 	bl	8004680 <puts>
      ret = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
      break;
 80008fa:	e00e      	b.n	800091a <UART_Write_Loop+0x76>
    }

    if( count == 100 )
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b64      	cmp	r3, #100	@ 0x64
 8000900:	d104      	bne.n	800090c <UART_Write_Loop+0x68>
    {
      //received nothing
      printf("No Data Received for Firmware Update\r\n");
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <UART_Write_Loop+0x88>)
 8000904:	0018      	movs	r0, r3
 8000906:	f003 febb 	bl	8004680 <puts>
      break;
 800090a:	e006      	b.n	800091a <UART_Write_Loop+0x76>
    }
    count++;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3301      	adds	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
    HAL_Delay(20);              //20ms delay
 8000912:	2014      	movs	r0, #20
 8000914:	f000 fcd8 	bl	80012c8 <HAL_Delay>
    HAL_UART_Transmit(&huart3, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000918:	e7d1      	b.n	80008be <UART_Write_Loop+0x1a>
  }

  return ret;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b005      	add	sp, #20
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	200001a4 	.word	0x200001a4
 8000928:	080053f8 	.word	0x080053f8
 800092c:	08005414 	.word	0x08005414

08000930 <write_data_to_flash_app>:

static HAL_StatusTypeDef write_data_to_flash_app(uint8_t *data,
                                                 uint16_t data_len,
                                                 bool is_first_block)
{
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	b091      	sub	sp, #68	@ 0x44
 8000934:	af00      	add	r7, sp, #0
 8000936:	6178      	str	r0, [r7, #20]
 8000938:	0008      	movs	r0, r1
 800093a:	0011      	movs	r1, r2
 800093c:	2312      	movs	r3, #18
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	1c02      	adds	r2, r0, #0
 8000942:	801a      	strh	r2, [r3, #0]
 8000944:	2311      	movs	r3, #17
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	1c0a      	adds	r2, r1, #0
 800094a:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret;

    do
    {
        // Unlock the Flash memory for writing
        ret = HAL_FLASH_Unlock();
 800094c:	262f      	movs	r6, #47	@ 0x2f
 800094e:	2010      	movs	r0, #16
 8000950:	1832      	adds	r2, r6, r0
 8000952:	19d6      	adds	r6, r2, r7
 8000954:	f000 fee6 	bl	8001724 <HAL_FLASH_Unlock>
 8000958:	0003      	movs	r3, r0
 800095a:	7033      	strb	r3, [r6, #0]
        if (ret != HAL_OK)
 800095c:	262f      	movs	r6, #47	@ 0x2f
 800095e:	2010      	movs	r0, #16
 8000960:	1832      	adds	r2, r6, r0
 8000962:	19d3      	adds	r3, r2, r7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d000      	beq.n	800096c <write_data_to_flash_app+0x3c>
 800096a:	e0a8      	b.n	8000abe <write_data_to_flash_app+0x18e>
        {
            break;
        }

        // Erase the flash memory only for the first block
        if (is_first_block)
 800096c:	2311      	movs	r3, #17
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d029      	beq.n	80009ca <write_data_to_flash_app+0x9a>
        {
            printf("Erasing the Flash memory...\r\n");
 8000976:	4b59      	ldr	r3, [pc, #356]	@ (8000adc <write_data_to_flash_app+0x1ac>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fe81 	bl	8004680 <puts>

            FLASH_EraseInitTypeDef EraseInitStruct;
            uint32_t PageError;

            EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800097e:	210c      	movs	r1, #12
 8000980:	2010      	movs	r0, #16
 8000982:	180b      	adds	r3, r1, r0
 8000984:	19db      	adds	r3, r3, r7
 8000986:	2202      	movs	r2, #2
 8000988:	601a      	str	r2, [r3, #0]
            EraseInitStruct.Page = (ETX_APP_START_ADDRESS - 0x08000000) / FLASH_PAGE_SIZE; // Calculate page number
 800098a:	180b      	adds	r3, r1, r0
 800098c:	19db      	adds	r3, r3, r7
 800098e:	2210      	movs	r2, #16
 8000990:	609a      	str	r2, [r3, #8]
            EraseInitStruct.NbPages = 47; // 95 KB application -> 47 pages of 2 KB each
 8000992:	180b      	adds	r3, r1, r0
 8000994:	19db      	adds	r3, r3, r7
 8000996:	222f      	movs	r2, #47	@ 0x2f
 8000998:	60da      	str	r2, [r3, #12]

            ret = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800099a:	1833      	adds	r3, r6, r0
 800099c:	19de      	adds	r6, r3, r7
 800099e:	2308      	movs	r3, #8
 80009a0:	181b      	adds	r3, r3, r0
 80009a2:	19da      	adds	r2, r3, r7
 80009a4:	180b      	adds	r3, r1, r0
 80009a6:	19db      	adds	r3, r3, r7
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 ff6e 	bl	800188c <HAL_FLASHEx_Erase>
 80009b0:	0003      	movs	r3, r0
 80009b2:	7033      	strb	r3, [r6, #0]
            if (ret != HAL_OK)
 80009b4:	262f      	movs	r6, #47	@ 0x2f
 80009b6:	2010      	movs	r0, #16
 80009b8:	1833      	adds	r3, r6, r0
 80009ba:	19db      	adds	r3, r3, r7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d000      	beq.n	80009c4 <write_data_to_flash_app+0x94>
 80009c2:	e07e      	b.n	8000ac2 <write_data_to_flash_app+0x192>
            {
                break;
            }

            application_write_idx = 0;
 80009c4:	4b46      	ldr	r3, [pc, #280]	@ (8000ae0 <write_data_to_flash_app+0x1b0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	801a      	strh	r2, [r3, #0]
        }

        // Write data to flash memory
        for (int i = 0; i < data_len / 8; i++) // Process 8 bytes (64 bits) at a time
 80009ca:	2300      	movs	r3, #0
 80009cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009ce:	e05f      	b.n	8000a90 <write_data_to_flash_app+0x160>
        {
            uint64_t double_word_data = 0;
 80009d0:	2200      	movs	r2, #0
 80009d2:	2300      	movs	r3, #0
 80009d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34

            // Construct the 64-bit data from the input array
            for (int j = 0; j < 8; j++)
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009dc:	e02e      	b.n	8000a3c <write_data_to_flash_app+0x10c>
            {
                double_word_data |= ((uint64_t)data[i * 8 + j] << (j * 8));
 80009de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009e0:	00da      	lsls	r2, r3, #3
 80009e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	001a      	movs	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	001a      	movs	r2, r3
 80009fa:	3a20      	subs	r2, #32
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	db03      	blt.n	8000a08 <write_data_to_flash_app+0xd8>
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	4091      	lsls	r1, r2
 8000a04:	000d      	movs	r5, r1
 8000a06:	e009      	b.n	8000a1c <write_data_to_flash_app+0xec>
 8000a08:	2220      	movs	r2, #32
 8000a0a:	1ad2      	subs	r2, r2, r3
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	68f9      	ldr	r1, [r7, #12]
 8000a10:	0006      	movs	r6, r0
 8000a12:	40d6      	lsrs	r6, r2
 8000a14:	0032      	movs	r2, r6
 8000a16:	4099      	lsls	r1, r3
 8000a18:	000d      	movs	r5, r1
 8000a1a:	4315      	orrs	r5, r2
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0014      	movs	r4, r2
 8000a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a24:	4323      	orrs	r3, r4
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2a:	432b      	orrs	r3, r5
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	633a      	str	r2, [r7, #48]	@ 0x30
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
            for (int j = 0; j < 8; j++)
 8000a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a38:	3301      	adds	r3, #1
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	ddcd      	ble.n	80009de <write_data_to_flash_app+0xae>
            }

            // Program the double word
            ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
                                    (ETX_APP_START_ADDRESS + application_write_idx),
 8000a42:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <write_data_to_flash_app+0x1b0>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	4a27      	ldr	r2, [pc, #156]	@ (8000ae4 <write_data_to_flash_app+0x1b4>)
 8000a48:	4694      	mov	ip, r2
 8000a4a:	4463      	add	r3, ip
            ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	232f      	movs	r3, #47	@ 0x2f
 8000a50:	2210      	movs	r2, #16
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	19de      	adds	r6, r3, r7
 8000a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fe14 	bl	8001688 <HAL_FLASH_Program>
 8000a60:	0003      	movs	r3, r0
 8000a62:	7033      	strb	r3, [r6, #0]
                                    double_word_data);
            if (ret == HAL_OK)
 8000a64:	232f      	movs	r3, #47	@ 0x2f
 8000a66:	2210      	movs	r2, #16
 8000a68:	189b      	adds	r3, r3, r2
 8000a6a:	19db      	adds	r3, r3, r7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d106      	bne.n	8000a80 <write_data_to_flash_app+0x150>
            {
                // Update the write index
                application_write_idx += 8;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <write_data_to_flash_app+0x1b0>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	3308      	adds	r3, #8
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <write_data_to_flash_app+0x1b0>)
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	e004      	b.n	8000a8a <write_data_to_flash_app+0x15a>
            }
            else
            {
                printf("Flash Write Error...HALT!!!\r\n");
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <write_data_to_flash_app+0x1b8>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f003 fdfc 	bl	8004680 <puts>
                break;
 8000a88:	e00b      	b.n	8000aa2 <write_data_to_flash_app+0x172>
        for (int i = 0; i < data_len / 8; i++) // Process 8 bytes (64 bits) at a time
 8000a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a90:	2312      	movs	r3, #18
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	db96      	blt.n	80009d0 <write_data_to_flash_app+0xa0>
            }
        }

        if (ret != HAL_OK)
 8000aa2:	222f      	movs	r2, #47	@ 0x2f
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	1853      	adds	r3, r2, r1
 8000aa8:	19db      	adds	r3, r3, r7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10a      	bne.n	8000ac6 <write_data_to_flash_app+0x196>
        {
            break;
        }

        // Lock the Flash memory after writing
        ret = HAL_FLASH_Lock();
 8000ab0:	1853      	adds	r3, r2, r1
 8000ab2:	19dc      	adds	r4, r3, r7
 8000ab4:	f000 fe5a 	bl	800176c <HAL_FLASH_Lock>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	7023      	strb	r3, [r4, #0]
 8000abc:	e004      	b.n	8000ac8 <write_data_to_flash_app+0x198>
            break;
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	e002      	b.n	8000ac8 <write_data_to_flash_app+0x198>
                break;
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	e000      	b.n	8000ac8 <write_data_to_flash_app+0x198>
            break;
 8000ac6:	46c0      	nop			@ (mov r8, r8)
        {
            break;
        }
    } while (false);

    return ret;
 8000ac8:	232f      	movs	r3, #47	@ 0x2f
 8000aca:	2210      	movs	r2, #16
 8000acc:	189b      	adds	r3, r3, r2
 8000ace:	19db      	adds	r3, r3, r7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b011      	add	sp, #68	@ 0x44
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	0800543c 	.word	0x0800543c
 8000ae0:	2000023a 	.word	0x2000023a
 8000ae4:	08008400 	.word	0x08008400
 8000ae8:	0800545c 	.word	0x0800545c

08000aec <Firmware_Update>:

static void Firmware_Update(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	4c9a      	ldr	r4, [pc, #616]	@ (8000d58 <Firmware_Update+0x26c>)
 8000af0:	44a5      	add	sp, r4
 8000af2:	af00      	add	r7, sp, #0
  uint8_t xx,yy;
  uint8_t x = 'x';
 8000af4:	4b99      	ldr	r3, [pc, #612]	@ (8000d5c <Firmware_Update+0x270>)
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2278      	movs	r2, #120	@ 0x78
 8000afa:	701a      	strb	r2, [r3, #0]
  uint8_t y = 'y';
 8000afc:	4d98      	ldr	r5, [pc, #608]	@ (8000d60 <Firmware_Update+0x274>)
 8000afe:	197b      	adds	r3, r7, r5
 8000b00:	2279      	movs	r2, #121	@ 0x79
 8000b02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ex = HAL_OK;
 8000b04:	4c97      	ldr	r4, [pc, #604]	@ (8000d64 <Firmware_Update+0x278>)
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
  uint16_t current_app_size = 0;
 8000b0c:	4b96      	ldr	r3, [pc, #600]	@ (8000d68 <Firmware_Update+0x27c>)
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
  uint16_t i = 0;
 8000b14:	4b95      	ldr	r3, [pc, #596]	@ (8000d6c <Firmware_Update+0x280>)
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]

  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 8000b1c:	4b94      	ldr	r3, [pc, #592]	@ (8000d70 <Firmware_Update+0x284>)
 8000b1e:	2282      	movs	r2, #130	@ 0x82
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	189b      	adds	r3, r3, r2
 8000b24:	19db      	adds	r3, r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	22ff      	movs	r2, #255	@ 0xff
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	2100      	movs	r1, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f003 fe9a 	bl	800486c <memset>

  do
  {
    if( UART_Write_Loop() != 0 )
 8000b38:	f7ff feb4 	bl	80008a4 <UART_Write_Loop>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d100      	bne.n	8000b42 <Firmware_Update+0x56>
 8000b40:	e0fc      	b.n	8000d3c <Firmware_Update+0x250>
    {
      //Sender is ready. Receive the Firmware Size

      // Ask yy
      HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000b42:	2301      	movs	r3, #1
 8000b44:	425b      	negs	r3, r3
 8000b46:	1979      	adds	r1, r7, r5
 8000b48:	488a      	ldr	r0, [pc, #552]	@ (8000d74 <Firmware_Update+0x288>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f002 f8a2 	bl	8002c94 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000b50:	0025      	movs	r5, r4
 8000b52:	193c      	adds	r4, r7, r4
 8000b54:	4b88      	ldr	r3, [pc, #544]	@ (8000d78 <Firmware_Update+0x28c>)
 8000b56:	2281      	movs	r2, #129	@ 0x81
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	18b9      	adds	r1, r7, r2
 8000b5c:	4885      	ldr	r0, [pc, #532]	@ (8000d74 <Firmware_Update+0x288>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f002 f93c 	bl	8002ddc <HAL_UART_Receive>
 8000b64:	0003      	movs	r3, r0
 8000b66:	7023      	strb	r3, [r4, #0]
      if( ex != HAL_OK )
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d004      	beq.n	8000b7a <Firmware_Update+0x8e>
      {
        printf("Get application Size error (yy)...HALT!!!\r\n");
 8000b70:	4b82      	ldr	r3, [pc, #520]	@ (8000d7c <Firmware_Update+0x290>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f003 fd84 	bl	8004680 <puts>
        break;
 8000b78:	e0e0      	b.n	8000d3c <Firmware_Update+0x250>
      }

      // Ask xx
      HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	4a77      	ldr	r2, [pc, #476]	@ (8000d5c <Firmware_Update+0x270>)
 8000b80:	18b9      	adds	r1, r7, r2
 8000b82:	487c      	ldr	r0, [pc, #496]	@ (8000d74 <Firmware_Update+0x288>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	f002 f885 	bl	8002c94 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 8000b8a:	4d76      	ldr	r5, [pc, #472]	@ (8000d64 <Firmware_Update+0x278>)
 8000b8c:	197c      	adds	r4, r7, r5
 8000b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8000d78 <Firmware_Update+0x28c>)
 8000b90:	4a7b      	ldr	r2, [pc, #492]	@ (8000d80 <Firmware_Update+0x294>)
 8000b92:	18b9      	adds	r1, r7, r2
 8000b94:	4877      	ldr	r0, [pc, #476]	@ (8000d74 <Firmware_Update+0x288>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	f002 f920 	bl	8002ddc <HAL_UART_Receive>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	7023      	strb	r3, [r4, #0]
      if( ex != HAL_OK )
 8000ba0:	197b      	adds	r3, r7, r5
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <Firmware_Update+0xc6>
      {
        printf("Get application Size error(XX)...HALT!!!\r\n");
 8000ba8:	4b76      	ldr	r3, [pc, #472]	@ (8000d84 <Firmware_Update+0x298>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f003 fd68 	bl	8004680 <puts>
        break;
 8000bb0:	e0c4      	b.n	8000d3c <Firmware_Update+0x250>
      }

      application_size = yy | (xx << 8);
 8000bb2:	2381      	movs	r3, #129	@ 0x81
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b70      	ldr	r3, [pc, #448]	@ (8000d80 <Firmware_Update+0x294>)
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8000d88 <Firmware_Update+0x29c>)
 8000bce:	801a      	strh	r2, [r3, #0]
      printf("Application Size = %d bytes\r\n", application_size);
 8000bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8000d88 <Firmware_Update+0x29c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8000d8c <Firmware_Update+0x2a0>)
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f003 fcea 	bl	80045b4 <iprintf>

      while(1)
      {
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000be0:	4b62      	ldr	r3, [pc, #392]	@ (8000d6c <Firmware_Update+0x280>)
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d006      	beq.n	8000bfc <Firmware_Update+0x110>
 8000bee:	4b66      	ldr	r3, [pc, #408]	@ (8000d88 <Firmware_Update+0x29c>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8000d68 <Firmware_Update+0x27c>)
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	8812      	ldrh	r2, [r2, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d32c      	bcc.n	8000c56 <Firmware_Update+0x16a>
        {
          printf("Received Block[%d]\r\n", current_app_size/MAX_BLOCK_SIZE);
 8000bfc:	4c5a      	ldr	r4, [pc, #360]	@ (8000d68 <Firmware_Update+0x27c>)
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	0a9b      	lsrs	r3, r3, #10
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	001a      	movs	r2, r3
 8000c08:	4b61      	ldr	r3, [pc, #388]	@ (8000d90 <Firmware_Update+0x2a4>)
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f003 fcd1 	bl	80045b4 <iprintf>

          //write to flash
          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	00d9      	lsls	r1, r3, #3
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4291      	cmp	r1, r2
 8000c1e:	415b      	adcs	r3, r3
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4d50      	ldr	r5, [pc, #320]	@ (8000d64 <Firmware_Update+0x278>)
 8000c24:	197c      	adds	r4, r7, r5
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	00d9      	lsls	r1, r3, #3
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fe7f 	bl	8000930 <write_data_to_flash_app>
 8000c32:	0003      	movs	r3, r0
 8000c34:	7023      	strb	r3, [r4, #0]

          if( ex != HAL_OK )
 8000c36:	197b      	adds	r3, r7, r5
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d000      	beq.n	8000c40 <Firmware_Update+0x154>
 8000c3e:	e07c      	b.n	8000d3a <Firmware_Update+0x24e>
          {
            break;
          }

          //clear the memory
          memset(block, 0,MAX_BLOCK_SIZE);
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f003 fe0f 	bl	800486c <memset>
          i = 0;
 8000c4e:	4b47      	ldr	r3, [pc, #284]	@ (8000d6c <Firmware_Update+0x280>)
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2200      	movs	r2, #0
 8000c54:	801a      	strh	r2, [r3, #0]
        }

        if( current_app_size >= application_size)
 8000c56:	4b4c      	ldr	r3, [pc, #304]	@ (8000d88 <Firmware_Update+0x29c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	4a43      	ldr	r2, [pc, #268]	@ (8000d68 <Firmware_Update+0x27c>)
 8000c5c:	18ba      	adds	r2, r7, r2
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d304      	bcc.n	8000c6e <Firmware_Update+0x182>
        {
          //received all data. exit
          ex = HAL_OK;
 8000c64:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <Firmware_Update+0x278>)
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
          break;
 8000c6c:	e066      	b.n	8000d3c <Firmware_Update+0x250>
        }

        // Ask yy
        HAL_UART_Transmit(&huart3, &y, 1, HAL_MAX_DELAY);
 8000c6e:	2301      	movs	r3, #1
 8000c70:	425b      	negs	r3, r3
 8000c72:	4a3b      	ldr	r2, [pc, #236]	@ (8000d60 <Firmware_Update+0x274>)
 8000c74:	18b9      	adds	r1, r7, r2
 8000c76:	483f      	ldr	r0, [pc, #252]	@ (8000d74 <Firmware_Update+0x288>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f002 f80b 	bl	8002c94 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &yy, 1, 5000);
 8000c7e:	4d39      	ldr	r5, [pc, #228]	@ (8000d64 <Firmware_Update+0x278>)
 8000c80:	197c      	adds	r4, r7, r5
 8000c82:	4b3d      	ldr	r3, [pc, #244]	@ (8000d78 <Firmware_Update+0x28c>)
 8000c84:	2281      	movs	r2, #129	@ 0x81
 8000c86:	00d2      	lsls	r2, r2, #3
 8000c88:	18b9      	adds	r1, r7, r2
 8000c8a:	483a      	ldr	r0, [pc, #232]	@ (8000d74 <Firmware_Update+0x288>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f002 f8a5 	bl	8002ddc <HAL_UART_Receive>
 8000c92:	0003      	movs	r3, r0
 8000c94:	7023      	strb	r3, [r4, #0]
        if( ex != HAL_OK )
 8000c96:	197b      	adds	r3, r7, r5
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <Firmware_Update+0x1c4>
        {
          printf("Get application data[index:%d] error (yy)...HALT!!!\r\n", i);
 8000c9e:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <Firmware_Update+0x280>)
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8000d94 <Firmware_Update+0x2a8>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f003 fc83 	bl	80045b4 <iprintf>
          break;
 8000cae:	e045      	b.n	8000d3c <Firmware_Update+0x250>
        }

        // Ask xx
        HAL_UART_Transmit(&huart3, &x, 1, HAL_MAX_DELAY);
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	4a29      	ldr	r2, [pc, #164]	@ (8000d5c <Firmware_Update+0x270>)
 8000cb6:	18b9      	adds	r1, r7, r2
 8000cb8:	482e      	ldr	r0, [pc, #184]	@ (8000d74 <Firmware_Update+0x288>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f001 ffea 	bl	8002c94 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart3, &xx, 1, 5000);
 8000cc0:	4d28      	ldr	r5, [pc, #160]	@ (8000d64 <Firmware_Update+0x278>)
 8000cc2:	197c      	adds	r4, r7, r5
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <Firmware_Update+0x28c>)
 8000cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8000d80 <Firmware_Update+0x294>)
 8000cc8:	18b9      	adds	r1, r7, r2
 8000cca:	482a      	ldr	r0, [pc, #168]	@ (8000d74 <Firmware_Update+0x288>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f002 f885 	bl	8002ddc <HAL_UART_Receive>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
        if( ex != HAL_OK )
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d008      	beq.n	8000cf0 <Firmware_Update+0x204>
        {
          printf("Get application data[index:%d] error(XX)...HALT!!!\r\n", i);
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <Firmware_Update+0x280>)
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <Firmware_Update+0x2ac>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 fc63 	bl	80045b4 <iprintf>
          break;
 8000cee:	e025      	b.n	8000d3c <Firmware_Update+0x250>
        }

        //--- Save xxyy in block[i]
        block[i++] = yy;
 8000cf0:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <Firmware_Update+0x280>)
 8000cf2:	183b      	adds	r3, r7, r0
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	183a      	adds	r2, r7, r0
 8000cf8:	1c59      	adds	r1, r3, #1
 8000cfa:	8011      	strh	r1, [r2, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2381      	movs	r3, #129	@ 0x81
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	7819      	ldrb	r1, [r3, #0]
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <Firmware_Update+0x284>)
 8000d08:	2482      	movs	r4, #130	@ 0x82
 8000d0a:	00e4      	lsls	r4, r4, #3
 8000d0c:	191b      	adds	r3, r3, r4
 8000d0e:	19db      	adds	r3, r3, r7
 8000d10:	5499      	strb	r1, [r3, r2]
        block[i++] = xx;
 8000d12:	183b      	adds	r3, r7, r0
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	183a      	adds	r2, r7, r0
 8000d18:	1c59      	adds	r1, r3, #1
 8000d1a:	8011      	strh	r1, [r2, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Firmware_Update+0x294>)
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	7819      	ldrb	r1, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Firmware_Update+0x284>)
 8000d26:	191b      	adds	r3, r3, r4
 8000d28:	19db      	adds	r3, r3, r7
 8000d2a:	5499      	strb	r1, [r3, r2]
        current_app_size += 2;
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <Firmware_Update+0x27c>)
 8000d2e:	18bb      	adds	r3, r7, r2
 8000d30:	18ba      	adds	r2, r7, r2
 8000d32:	8812      	ldrh	r2, [r2, #0]
 8000d34:	3202      	adds	r2, #2
 8000d36:	801a      	strh	r2, [r3, #0]
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000d38:	e752      	b.n	8000be0 <Firmware_Update+0xf4>
            break;
 8000d3a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  while( false );

  if( ex != HAL_OK )
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <Firmware_Update+0x278>)
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <Firmware_Update+0x25e>
  {
    while(1);
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	e7fd      	b.n	8000d46 <Firmware_Update+0x25a>
  }
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	2382      	movs	r3, #130	@ 0x82
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	449d      	add	sp, r3
 8000d54:	bdb0      	pop	{r4, r5, r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	fffffbf0 	.word	0xfffffbf0
 8000d5c:	00000407 	.word	0x00000407
 8000d60:	00000406 	.word	0x00000406
 8000d64:	0000040f 	.word	0x0000040f
 8000d68:	0000040c 	.word	0x0000040c
 8000d6c:	0000040a 	.word	0x0000040a
 8000d70:	fffffbf4 	.word	0xfffffbf4
 8000d74:	200001a4 	.word	0x200001a4
 8000d78:	00001388 	.word	0x00001388
 8000d7c:	0800547c 	.word	0x0800547c
 8000d80:	00000409 	.word	0x00000409
 8000d84:	080054a8 	.word	0x080054a8
 8000d88:	20000238 	.word	0x20000238
 8000d8c:	080054d4 	.word	0x080054d4
 8000d90:	080054f4 	.word	0x080054f4
 8000d94:	0800550c 	.word	0x0800550c
 8000d98:	08005544 	.word	0x08005544

08000d9c <goto_application>:

static void goto_application( void )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application...\n");
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <goto_application+0x40>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f003 fc6b 	bl	8004680 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <goto_application+0x44>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	607b      	str	r3, [r7, #4]

	if( app_reset_handler == (void*)0xFFFFFFFF )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	d105      	bne.n	8000dc2 <goto_application+0x26>
	{
	  printf("Invalid Application... HALT!!!\r\n");
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <goto_application+0x48>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f003 fc61 	bl	8004680 <puts>
	  while(1);
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	e7fd      	b.n	8000dbe <goto_application+0x22>
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <goto_application+0x4c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f383 8808 	msr	MSP, r3
}
 8000dce:	46c0      	nop			@ (mov r8, r8)

	// Turn OFF the Led to tell the user that Bootloader is not running
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );

	app_reset_handler();    //call the app reset handler
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4798      	blx	r3
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	0800557c 	.word	0x0800557c
 8000de0:	08008404 	.word	0x08008404
 8000de4:	0800559c 	.word	0x0800559c
 8000de8:	08008400 	.word	0x08008400

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	e7fd      	b.n	8000df4 <Error_Handler+0x8>

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0549      	lsls	r1, r1, #21
 8000e20:	430a      	orrs	r2, r1
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_MspInit+0x4c>)
 8000e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e32:	23c0      	movs	r3, #192	@ 0xc0
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fa6a 	bl	8001310 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b09f      	sub	sp, #124	@ 0x7c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	2364      	movs	r3, #100	@ 0x64
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	2314      	movs	r3, #20
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f003 fd06 	bl	800486c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	2418      	movs	r4, #24
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	234c      	movs	r3, #76	@ 0x4c
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f003 fcfe 	bl	800486c <memset>
  if(huart->Instance==USART1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb0 <HAL_UART_MspInit+0x168>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d148      	bne.n	8000f0c <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fc71 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e92:	f7ff ffab 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e96:	4b47      	ldr	r3, [pc, #284]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e9a:	4b46      	ldr	r3, [pc, #280]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	01c9      	lsls	r1, r1, #7
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ea4:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b40      	ldr	r3, [pc, #256]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eca:	2164      	movs	r1, #100	@ 0x64
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	22c0      	movs	r2, #192	@ 0xc0
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	187a      	adds	r2, r7, r1
 8000eee:	23a0      	movs	r3, #160	@ 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fd79 	bl	80019ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201b      	movs	r0, #27
 8000f00:	f000 fac8 	bl	8001494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f04:	201b      	movs	r0, #27
 8000f06:	f000 fada 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f0a:	e04c      	b.n	8000fa6 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <HAL_UART_MspInit+0x170>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d147      	bne.n	8000fa6 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f16:	2118      	movs	r1, #24
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 fc22 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000f30:	f7ff ff5c 	bl	8000dec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	02c9      	lsls	r1, r1, #11
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	02db      	lsls	r3, r3, #11
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f56:	2102      	movs	r1, #2
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_UART_MspInit+0x16c>)
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f68:	2164      	movs	r1, #100	@ 0x64
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	22c0      	movs	r2, #192	@ 0xc0
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2204      	movs	r2, #4
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_UART_MspInit+0x174>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f000 fd2b 	bl	80019ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201d      	movs	r0, #29
 8000f9c:	f000 fa7a 	bl	8001494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000fa0:	201d      	movs	r0, #29
 8000fa2:	f000 fa8c 	bl	80014be <HAL_NVIC_EnableIRQ>
}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b01f      	add	sp, #124	@ 0x7c
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	50000400 	.word	0x50000400

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	e7fd      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	e7fd      	b.n	8000fcc <HardFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f952 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <USART1_IRQHandler+0x14>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 ffd4 	bl	8002fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	20000110 	.word	0x20000110

0800100c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8001012:	0018      	movs	r0, r3
 8001014:	f001 ffc8 	bl	8002fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	200001a4 	.word	0x200001a4

08001024 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e00a      	b.n	800104c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001036:	e000      	b.n	800103a <_read+0x16>
 8001038:	bf00      	nop
 800103a:	0001      	movs	r1, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf0      	blt.n	8001036 <_read+0x12>
  }

  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	b006      	add	sp, #24
 800105c:	bd80      	pop	{r7, pc}

0800105e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e009      	b.n	8001084 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fc01 	bl	8000880 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf1      	blt.n	8001070 <_write+0x12>
  }
  return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b006      	add	sp, #24
 8001094:	bd80      	pop	{r7, pc}

08001096 <_close>:

int _close(int file)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109e:	2301      	movs	r3, #1
 80010a0:	425b      	negs	r3, r3
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	0192      	lsls	r2, r2, #6
 80010ba:	605a      	str	r2, [r3, #4]
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f003 fbfa 	bl	8004918 <__errno>
 8001124:	0003      	movs	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	2301      	movs	r3, #1
 800112c:	425b      	negs	r3, r3
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	18d2      	adds	r2, r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b006      	add	sp, #24
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20024000 	.word	0x20024000
 8001150:	00000400 	.word	0x00000400
 8001154:	2000023c 	.word	0x2000023c
 8001158:	200003b0 	.word	0x200003b0

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800116a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800116c:	f7ff fff6 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001196:	f003 fbc5 	bl	8004924 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800119a:	f7ff fa4b 	bl	8000634 <main>

0800119e <LoopForever>:

LoopForever:
  b LoopForever
 800119e:	e7fe      	b.n	800119e <LoopForever>
  ldr   r0, =_estack
 80011a0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80011ac:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 80011b0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80011b4:	200003ac 	.word	0x200003ac

080011b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_COMP_IRQHandler>
	...

080011bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_Init+0x3c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Init+0x3c>)
 80011ce:	2180      	movs	r1, #128	@ 0x80
 80011d0:	0049      	lsls	r1, r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 f810 	bl	80011fc <HAL_InitTick>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d003      	beq.n	80011e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e001      	b.n	80011ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fe06 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_InitTick+0x88>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02b      	beq.n	800126c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_InitTick+0x8c>)
 8001216:	681c      	ldr	r4, [r3, #0]
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_InitTick+0x88>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	0019      	movs	r1, r3
 800121e:	23fa      	movs	r3, #250	@ 0xfa
 8001220:	0098      	lsls	r0, r3, #2
 8001222:	f7fe ff7b 	bl	800011c <__udivsi3>
 8001226:	0003      	movs	r3, r0
 8001228:	0019      	movs	r1, r3
 800122a:	0020      	movs	r0, r4
 800122c:	f7fe ff76 	bl	800011c <__udivsi3>
 8001230:	0003      	movs	r3, r0
 8001232:	0018      	movs	r0, r3
 8001234:	f000 f953 	bl	80014de <HAL_SYSTICK_Config>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d112      	bne.n	8001262 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d80a      	bhi.n	8001258 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	2200      	movs	r2, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f922 	bl	8001494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_InitTick+0x90>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e00d      	b.n	8001274 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e008      	b.n	8001274 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001262:	230f      	movs	r3, #15
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e003      	b.n	8001274 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800126c:	230f      	movs	r3, #15
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	781b      	ldrb	r3, [r3, #0]
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b005      	add	sp, #20
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000004 	.word	0x20000004
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	001a      	movs	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	18d2      	adds	r2, r2, r3
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_IncTick+0x20>)
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000240 	.word	0x20000240

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	20000240 	.word	0x20000240

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	001a      	movs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ff ffe0 	bl	80012b4 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	2000000c 	.word	0x2000000c

08001310 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800131e:	4013      	ands	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	40010000 	.word	0x40010000
 8001338:	fffff9ff 	.word	0xfffff9ff

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b7f      	cmp	r3, #127	@ 0x7f
 800134e:	d809      	bhi.n	8001364 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	231f      	movs	r3, #31
 8001358:	401a      	ands	r2, r3
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_EnableIRQ+0x30>)
 800135c:	2101      	movs	r1, #1
 800135e:	4091      	lsls	r1, r2
 8001360:	000a      	movs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b7f      	cmp	r3, #127	@ 0x7f
 8001384:	d828      	bhi.n	80013d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001386:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <__NVIC_SetPriority+0xd4>)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	33c0      	adds	r3, #192	@ 0xc0
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	589b      	ldr	r3, [r3, r2]
 8001396:	1dfa      	adds	r2, r7, #7
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	0011      	movs	r1, r2
 800139c:	2203      	movs	r2, #3
 800139e:	400a      	ands	r2, r1
 80013a0:	00d2      	lsls	r2, r2, #3
 80013a2:	21ff      	movs	r1, #255	@ 0xff
 80013a4:	4091      	lsls	r1, r2
 80013a6:	000a      	movs	r2, r1
 80013a8:	43d2      	mvns	r2, r2
 80013aa:	401a      	ands	r2, r3
 80013ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	22ff      	movs	r2, #255	@ 0xff
 80013b4:	401a      	ands	r2, r3
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	0018      	movs	r0, r3
 80013bc:	2303      	movs	r3, #3
 80013be:	4003      	ands	r3, r0
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c4:	481f      	ldr	r0, [pc, #124]	@ (8001444 <__NVIC_SetPriority+0xd4>)
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	430a      	orrs	r2, r1
 80013d0:	33c0      	adds	r3, #192	@ 0xc0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013d6:	e031      	b.n	800143c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <__NVIC_SetPriority+0xd8>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	0019      	movs	r1, r3
 80013e0:	230f      	movs	r3, #15
 80013e2:	400b      	ands	r3, r1
 80013e4:	3b08      	subs	r3, #8
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3306      	adds	r3, #6
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	@ 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <__NVIC_SetPriority+0xd8>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	001c      	movs	r4, r3
 8001428:	230f      	movs	r3, #15
 800142a:	4023      	ands	r3, r4
 800142c:	3b08      	subs	r3, #8
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	3306      	adds	r3, #6
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	18c3      	adds	r3, r0, r3
 8001438:	3304      	adds	r3, #4
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b003      	add	sp, #12
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	045b      	lsls	r3, r3, #17
 800145c:	429a      	cmp	r2, r3
 800145e:	d301      	bcc.n	8001464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001460:	2301      	movs	r3, #1
 8001462:	e010      	b.n	8001486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <SysTick_Config+0x44>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	3a01      	subs	r2, #1
 800146a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2103      	movs	r1, #3
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff ff7c 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <SysTick_Config+0x44>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <SysTick_Config+0x44>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	210f      	movs	r1, #15
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	0002      	movs	r2, r0
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ff33 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ffaf 	bl	800144c <SysTick_Config>
 80014ee:	0003      	movs	r3, r0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e04f      	b.n	80015aa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2225      	movs	r2, #37	@ 0x25
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d008      	beq.n	8001528 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2204      	movs	r2, #4
 800151a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	@ 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e040      	b.n	80015aa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	210e      	movs	r1, #14
 8001534:	438a      	bics	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001542:	491c      	ldr	r1, [pc, #112]	@ (80015b4 <HAL_DMA_Abort+0xbc>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	438a      	bics	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	221c      	movs	r2, #28
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	2101      	movs	r1, #1
 8001566:	4091      	lsls	r1, r2
 8001568:	000a      	movs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001574:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001588:	490a      	ldr	r1, [pc, #40]	@ (80015b4 <HAL_DMA_Abort+0xbc>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001596:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	@ 0x24
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	fffffeff 	.word	0xfffffeff

080015b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	210f      	movs	r1, #15
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2225      	movs	r2, #37	@ 0x25
 80015cc:	5c9b      	ldrb	r3, [r3, r2]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d006      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e048      	b.n	8001674 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	210e      	movs	r1, #14
 80015ee:	438a      	bics	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	438a      	bics	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160c:	491d      	ldr	r1, [pc, #116]	@ (8001684 <HAL_DMA_Abort_IT+0xcc>)
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	221c      	movs	r2, #28
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2101      	movs	r1, #1
 8001620:	4091      	lsls	r1, r2
 8001622:	000a      	movs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800162e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	4910      	ldr	r1, [pc, #64]	@ (8001684 <HAL_DMA_Abort_IT+0xcc>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001650:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2225      	movs	r2, #37	@ 0x25
 8001656:	2101      	movs	r1, #1
 8001658:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2224      	movs	r2, #36	@ 0x24
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	0010      	movs	r0, r2
 8001672:	4798      	blx	r3
    }
  }
  return status;
 8001674:	230f      	movs	r3, #15
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	781b      	ldrb	r3, [r3, #0]
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	fffffeff 	.word	0xfffffeff

08001688 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	603a      	str	r2, [r7, #0]
 8001694:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <HAL_FLASH_Program+0x94>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_FLASH_Program+0x1a>
 800169e:	2302      	movs	r3, #2
 80016a0:	e038      	b.n	8001714 <HAL_FLASH_Program+0x8c>
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <HAL_FLASH_Program+0x94>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <HAL_FLASH_Program+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016ae:	2517      	movs	r5, #23
 80016b0:	197c      	adds	r4, r7, r5
 80016b2:	23fa      	movs	r3, #250	@ 0xfa
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 f87a 	bl	80017b0 <FLASH_WaitForLastOperation>
 80016bc:	0003      	movs	r3, r0
 80016be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80016c0:	197b      	adds	r3, r7, r5
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11f      	bne.n	8001708 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d106      	bne.n	80016dc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	0008      	movs	r0, r1
 80016d6:	f000 f8b9 	bl	800184c <FLASH_Program_DoubleWord>
 80016da:	e005      	b.n	80016e8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f003 fe70 	bl	80053c8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016e8:	2317      	movs	r3, #23
 80016ea:	18fc      	adds	r4, r7, r3
 80016ec:	23fa      	movs	r3, #250	@ 0xfa
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 f85d 	bl	80017b0 <FLASH_WaitForLastOperation>
 80016f6:	0003      	movs	r3, r0
 80016f8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_FLASH_Program+0x98>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43d9      	mvns	r1, r3
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_FLASH_Program+0x98>)
 8001704:	400a      	ands	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <HAL_FLASH_Program+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800170e:	2317      	movs	r3, #23
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b006      	add	sp, #24
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	20000244 	.word	0x20000244
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_FLASH_Unlock+0x3c>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da0c      	bge.n	8001752 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_FLASH_Unlock+0x3c>)
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_FLASH_Unlock+0x40>)
 800173c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_FLASH_Unlock+0x3c>)
 8001740:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_FLASH_Unlock+0x44>)
 8001742:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_FLASH_Unlock+0x3c>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da02      	bge.n	8001752 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	40022000 	.word	0x40022000
 8001764:	45670123 	.word	0x45670123
 8001768:	cdef89ab 	.word	0xcdef89ab

0800176c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001778:	23fa      	movs	r3, #250	@ 0xfa
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	0018      	movs	r0, r3
 800177e:	f000 f817 	bl	80017b0 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_FLASH_Lock+0x40>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_FLASH_Lock+0x40>)
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0609      	lsls	r1, r1, #24
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_FLASH_Lock+0x40>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	da02      	bge.n	800179e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	40022000 	.word	0x40022000

080017b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff fd7c 	bl	80012b4 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80017c0:	23c0      	movs	r3, #192	@ 0xc0
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80017c6:	e00c      	b.n	80017e2 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	d009      	beq.n	80017e2 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80017ce:	f7ff fd71 	bl	80012b4 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d801      	bhi.n	80017e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e028      	b.n	8001834 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <FLASH_WaitForLastOperation+0x8c>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1ed      	bne.n	80017c8 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <FLASH_WaitForLastOperation+0x8c>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <FLASH_WaitForLastOperation+0x90>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <FLASH_WaitForLastOperation+0x8c>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <FLASH_WaitForLastOperation+0x94>)
 80017fa:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d011      	beq.n	8001826 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <FLASH_WaitForLastOperation+0x98>)
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e013      	b.n	8001834 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	d009      	beq.n	8001826 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001812:	f7ff fd4f 	bl	80012b4 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	d801      	bhi.n	8001826 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e006      	b.n	8001834 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <FLASH_WaitForLastOperation+0x8c>)
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	02db      	lsls	r3, r3, #11
 800182e:	4013      	ands	r3, r2
 8001830:	d1ec      	bne.n	800180c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40022000 	.word	0x40022000
 8001840:	0000c3fa 	.word	0x0000c3fa
 8001844:	0008c3fb 	.word	0x0008c3fb
 8001848:	20000244 	.word	0x20000244

0800184c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	603a      	str	r2, [r7, #0]
 8001856:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <FLASH_Program_DoubleWord+0x3c>)
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <FLASH_Program_DoubleWord+0x3c>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy
}
 800186e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	001c      	movs	r4, r3
 8001874:	2300      	movs	r3, #0
 8001876:	001d      	movs	r5, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	0022      	movs	r2, r4
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001896:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <HAL_FLASHEx_Erase+0xd8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_FLASHEx_Erase+0x16>
 800189e:	2302      	movs	r3, #2
 80018a0:	e05c      	b.n	800195c <HAL_FLASHEx_Erase+0xd0>
 80018a2:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <HAL_FLASHEx_Erase+0xd8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <HAL_FLASHEx_Erase+0xd8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018ae:	250f      	movs	r5, #15
 80018b0:	197c      	adds	r4, r7, r5
 80018b2:	23fa      	movs	r3, #250	@ 0xfa
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff7a 	bl	80017b0 <FLASH_WaitForLastOperation>
 80018bc:	0003      	movs	r3, r0
 80018be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80018c0:	002c      	movs	r4, r5
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d142      	bne.n	8001950 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d10d      	bne.n	80018ee <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 f848 	bl	800196c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018dc:	193c      	adds	r4, r7, r4
 80018de:	23fa      	movs	r3, #250	@ 0xfa
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff64 	bl	80017b0 <FLASH_WaitForLastOperation>
 80018e8:	0003      	movs	r3, r0
 80018ea:	7023      	strb	r3, [r4, #0]
 80018ec:	e030      	b.n	8001950 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4252      	negs	r2, r2
 80018f4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e01a      	b.n	8001934 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f844 	bl	8001994 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800190c:	250f      	movs	r5, #15
 800190e:	197c      	adds	r4, r7, r5
 8001910:	23fa      	movs	r3, #250	@ 0xfa
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ff4b 	bl	80017b0 <FLASH_WaitForLastOperation>
 800191a:	0003      	movs	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800191e:	197b      	adds	r3, r7, r5
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	601a      	str	r2, [r3, #0]
          break;
 800192c:	e00a      	b.n	8001944 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3dc      	bcc.n	80018fe <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_FLASHEx_Erase+0xdc>)
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_FLASHEx_Erase+0xdc>)
 800194a:	2102      	movs	r1, #2
 800194c:	438a      	bics	r2, r1
 800194e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <HAL_FLASHEx_Erase+0xd8>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001956:	230f      	movs	r3, #15
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781b      	ldrb	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b004      	add	sp, #16
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	20000244 	.word	0x20000244
 8001968:	40022000 	.word	0x40022000

0800196c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <FLASH_MassErase+0x24>)
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	431a      	orrs	r2, r3
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <FLASH_MassErase+0x24>)
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0249      	lsls	r1, r1, #9
 8001982:	430a      	orrs	r2, r1
 8001984:	615a      	str	r2, [r3, #20]
}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40022000 	.word	0x40022000

08001994 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <FLASH_PageErase+0x48>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <FLASH_PageErase+0x4c>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d005      	beq.n	80019ba <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2280      	movs	r2, #128	@ 0x80
 80019b2:	0192      	lsls	r2, r2, #6
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e003      	b.n	80019c2 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <FLASH_PageErase+0x50>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	00da      	lsls	r2, r3, #3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <FLASH_PageErase+0x48>)
 80019cc:	4906      	ldr	r1, [pc, #24]	@ (80019e8 <FLASH_PageErase+0x54>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	615a      	str	r2, [r3, #20]
}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	40022000 	.word	0x40022000
 80019e0:	ffffe007 	.word	0xffffe007
 80019e4:	ffffdfff 	.word	0xffffdfff
 80019e8:	00010002 	.word	0x00010002

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	e14d      	b.n	8001c98 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2101      	movs	r1, #1
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d100      	bne.n	8001a14 <HAL_GPIO_Init+0x28>
 8001a12:	e13e      	b.n	8001c92 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d005      	beq.n	8001a2c <HAL_GPIO_Init+0x40>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d130      	bne.n	8001a8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a62:	2201      	movs	r2, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	2201      	movs	r2, #1
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d017      	beq.n	8001aca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d123      	bne.n	8001b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	58d3      	ldr	r3, [r2, r3]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4013      	ands	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2107      	movs	r1, #7
 8001b02:	400b      	ands	r3, r1
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	6939      	ldr	r1, [r7, #16]
 8001b1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	23c0      	movs	r3, #192	@ 0xc0
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d100      	bne.n	8001b60 <HAL_GPIO_Init+0x174>
 8001b5e:	e098      	b.n	8001c92 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b60:	4a53      	ldr	r2, [pc, #332]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3318      	adds	r3, #24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	589b      	ldr	r3, [r3, r2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	220f      	movs	r2, #15
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	23a0      	movs	r3, #160	@ 0xa0
 8001b88:	05db      	lsls	r3, r3, #23
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x1d6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a48      	ldr	r2, [pc, #288]	@ (8001cb4 <HAL_GPIO_Init+0x2c8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1d2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a47      	ldr	r2, [pc, #284]	@ (8001cb8 <HAL_GPIO_Init+0x2cc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1ce>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a46      	ldr	r2, [pc, #280]	@ (8001cbc <HAL_GPIO_Init+0x2d0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1ca>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a45      	ldr	r2, [pc, #276]	@ (8001cc0 <HAL_GPIO_Init+0x2d4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1c6>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x1d8>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x1d8>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x1d8>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x1d8>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x1d8>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	400a      	ands	r2, r1
 8001bca:	00d2      	lsls	r2, r2, #3
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bd4:	4936      	ldr	r1, [pc, #216]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3318      	adds	r3, #24
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	035b      	lsls	r3, r3, #13
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	039b      	lsls	r3, r3, #14
 8001c24:	4013      	ands	r3, r2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c36:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c38:	2384      	movs	r3, #132	@ 0x84
 8001c3a:	58d3      	ldr	r3, [r2, r3]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43da      	mvns	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5c:	4914      	ldr	r1, [pc, #80]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c5e:	2284      	movs	r2, #132	@ 0x84
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c64:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	58d3      	ldr	r3, [r2, r3]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c8a:	4909      	ldr	r1, [pc, #36]	@ (8001cb0 <HAL_GPIO_Init+0x2c4>)
 8001c8c:	2280      	movs	r2, #128	@ 0x80
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	40da      	lsrs	r2, r3
 8001ca0:	1e13      	subs	r3, r2, #0
 8001ca2:	d000      	beq.n	8001ca6 <HAL_GPIO_Init+0x2ba>
 8001ca4:	e6aa      	b.n	80019fc <HAL_GPIO_Init+0x10>
  }
}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b006      	add	sp, #24
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021800 	.word	0x40021800
 8001cb4:	50000400 	.word	0x50000400
 8001cb8:	50000800 	.word	0x50000800
 8001cbc:	50000c00 	.word	0x50000c00
 8001cc0:	50001000 	.word	0x50001000

08001cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d11f      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	0013      	movs	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	189b      	adds	r3, r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fa10 	bl	800011c <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d02:	e008      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e001      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e009      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d0ed      	beq.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	40007000 	.word	0x40007000
 8001d38:	fffff9ff 	.word	0xfffff9ff
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	000f4240 	.word	0x000f4240

08001d44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	23e0      	movs	r3, #224	@ 0xe0
 8001d4e:	01db      	lsls	r3, r3, #7
 8001d50:	4013      	ands	r3, r2
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f000 fb50 	bl	8002410 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d100      	bne.n	8001d7c <HAL_RCC_OscConfig+0x20>
 8001d7a:	e07c      	b.n	8001e76 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7c:	4bc3      	ldr	r3, [pc, #780]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2238      	movs	r2, #56	@ 0x38
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d86:	4bc1      	ldr	r3, [pc, #772]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x40>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d002      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d10b      	bne.n	8001dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	4bba      	ldr	r3, [pc, #744]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	4013      	ands	r3, r2
 8001dac:	d062      	beq.n	8001e74 <HAL_RCC_OscConfig+0x118>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15e      	bne.n	8001e74 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e32a      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x7a>
 8001dc6:	4bb1      	ldr	r3, [pc, #708]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4bb0      	ldr	r3, [pc, #704]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0249      	lsls	r1, r1, #9
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e020      	b.n	8001e18 <HAL_RCC_OscConfig+0xbc>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	23a0      	movs	r3, #160	@ 0xa0
 8001ddc:	02db      	lsls	r3, r3, #11
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d10e      	bne.n	8001e00 <HAL_RCC_OscConfig+0xa4>
 8001de2:	4baa      	ldr	r3, [pc, #680]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4ba9      	ldr	r3, [pc, #676]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	02c9      	lsls	r1, r1, #11
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	4ba6      	ldr	r3, [pc, #664]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4ba5      	ldr	r3, [pc, #660]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	0249      	lsls	r1, r1, #9
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xbc>
 8001e00:	4ba2      	ldr	r3, [pc, #648]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4ba1      	ldr	r3, [pc, #644]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e06:	49a2      	ldr	r1, [pc, #648]	@ (8002090 <HAL_RCC_OscConfig+0x334>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b9f      	ldr	r3, [pc, #636]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b9e      	ldr	r3, [pc, #632]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e12:	49a0      	ldr	r1, [pc, #640]	@ (8002094 <HAL_RCC_OscConfig+0x338>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d014      	beq.n	8001e4a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa48 	bl	80012b4 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fa43 	bl	80012b4 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	@ 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e2e9      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3c:	4b93      	ldr	r3, [pc, #588]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0xce>
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa33 	bl	80012b4 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fa2e 	bl	80012b4 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e2d4      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	4b89      	ldr	r3, [pc, #548]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0xf8>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x126>
 8001e80:	e099      	b.n	8001fb6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e82:	4b82      	ldr	r3, [pc, #520]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2238      	movs	r2, #56	@ 0x38
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x146>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d135      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	4b78      	ldr	r3, [pc, #480]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x164>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e2a7      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b72      	ldr	r3, [pc, #456]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a74      	ldr	r2, [pc, #464]	@ (8002098 <HAL_RCC_OscConfig+0x33c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	021a      	lsls	r2, r3, #8
 8001ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d112      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001edc:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x340>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	4b68      	ldr	r3, [pc, #416]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ef0:	4b66      	ldr	r3, [pc, #408]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0adb      	lsrs	r3, r3, #11
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	4013      	ands	r3, r2
 8001efa:	4a69      	ldr	r2, [pc, #420]	@ (80020a0 <HAL_RCC_OscConfig+0x344>)
 8001efc:	40da      	lsrs	r2, r3
 8001efe:	4b69      	ldr	r3, [pc, #420]	@ (80020a4 <HAL_RCC_OscConfig+0x348>)
 8001f00:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f02:	4b69      	ldr	r3, [pc, #420]	@ (80020a8 <HAL_RCC_OscConfig+0x34c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff f978 	bl	80011fc <HAL_InitTick>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d051      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e27d      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d030      	beq.n	8001f7e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5e      	ldr	r2, [pc, #376]	@ (800209c <HAL_RCC_OscConfig+0x340>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	4b58      	ldr	r3, [pc, #352]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b56      	ldr	r3, [pc, #344]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0049      	lsls	r1, r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f9b9 	bl	80012b4 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f9b4 	bl	80012b4 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e25a      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b49      	ldr	r3, [pc, #292]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002098 <HAL_RCC_OscConfig+0x33c>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	021a      	lsls	r2, r3, #8
 8001f76:	4b45      	ldr	r3, [pc, #276]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b43      	ldr	r3, [pc, #268]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b42      	ldr	r3, [pc, #264]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001f84:	4949      	ldr	r1, [pc, #292]	@ (80020ac <HAL_RCC_OscConfig+0x350>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f993 	bl	80012b4 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff f98e 	bl	80012b4 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e234      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa6:	4b39      	ldr	r3, [pc, #228]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x238>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d047      	beq.n	8002050 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fc0:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2238      	movs	r2, #56	@ 0x38
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b18      	cmp	r3, #24
 8001fca:	d10a      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d03c      	beq.n	8002050 <HAL_RCC_OscConfig+0x2f4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d138      	bne.n	8002050 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e216      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fee:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f95d 	bl	80012b4 <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f958 	bl	80012b4 <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1fe      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d0f1      	beq.n	8002000 <HAL_RCC_OscConfig+0x2a4>
 800201c:	e018      	b.n	8002050 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002020:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002022:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002024:	2101      	movs	r1, #1
 8002026:	438a      	bics	r2, r1
 8002028:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff f943 	bl	80012b4 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff f93e 	bl	80012b4 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1e4      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	d1f1      	bne.n	8002034 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_RCC_OscConfig+0x300>
 800205a:	e0c7      	b.n	80021ec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2238      	movs	r2, #56	@ 0x38
 800206a:	4013      	ands	r3, r2
 800206c:	2b20      	cmp	r3, #32
 800206e:	d11f      	bne.n	80020b0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x330>)
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d100      	bne.n	800207c <HAL_RCC_OscConfig+0x320>
 800207a:	e0b7      	b.n	80021ec <HAL_RCC_OscConfig+0x490>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d000      	beq.n	8002086 <HAL_RCC_OscConfig+0x32a>
 8002084:	e0b2      	b.n	80021ec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c2      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	40021000 	.word	0x40021000
 8002090:	fffeffff 	.word	0xfffeffff
 8002094:	fffbffff 	.word	0xfffbffff
 8002098:	ffff80ff 	.word	0xffff80ff
 800209c:	ffffc7ff 	.word	0xffffc7ff
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	20000004 	.word	0x20000004
 80020a8:	20000008 	.word	0x20000008
 80020ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b0:	4bb5      	ldr	r3, [pc, #724]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80020b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x364>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x366>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d011      	beq.n	80020ea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4bb0      	ldr	r3, [pc, #704]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80020c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ca:	4baf      	ldr	r3, [pc, #700]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	0549      	lsls	r1, r1, #21
 80020d0:	430a      	orrs	r2, r1
 80020d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020d4:	4bac      	ldr	r3, [pc, #688]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80020d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	4ba8      	ldr	r3, [pc, #672]	@ (800238c <HAL_RCC_OscConfig+0x630>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f6:	4ba5      	ldr	r3, [pc, #660]	@ (800238c <HAL_RCC_OscConfig+0x630>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4ba4      	ldr	r3, [pc, #656]	@ (800238c <HAL_RCC_OscConfig+0x630>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0049      	lsls	r1, r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002104:	f7ff f8d6 	bl	80012b4 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff f8d1 	bl	80012b4 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e177      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b9a      	ldr	r3, [pc, #616]	@ (800238c <HAL_RCC_OscConfig+0x630>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x3e6>
 8002134:	4b94      	ldr	r3, [pc, #592]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002138:	4b93      	ldr	r3, [pc, #588]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800213a:	2101      	movs	r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x420>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x408>
 800214a:	4b8f      	ldr	r3, [pc, #572]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800214c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214e:	4b8e      	ldr	r3, [pc, #568]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002150:	2104      	movs	r1, #4
 8002152:	430a      	orrs	r2, r1
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002156:	4b8c      	ldr	r3, [pc, #560]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215a:	4b8b      	ldr	r3, [pc, #556]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x420>
 8002164:	4b88      	ldr	r3, [pc, #544]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002168:	4b87      	ldr	r3, [pc, #540]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800216a:	2101      	movs	r1, #1
 800216c:	438a      	bics	r2, r1
 800216e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002170:	4b85      	ldr	r3, [pc, #532]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002174:	4b84      	ldr	r3, [pc, #528]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f896 	bl	80012b4 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f891 	bl	80012b4 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a7d      	ldr	r2, [pc, #500]	@ (8002390 <HAL_RCC_OscConfig+0x634>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e136      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a2:	4b79      	ldr	r3, [pc, #484]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x432>
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f881 	bl	80012b4 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b6:	e009      	b.n	80021cc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff f87c 	bl	80012b4 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4a73      	ldr	r2, [pc, #460]	@ (8002390 <HAL_RCC_OscConfig+0x634>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e121      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021d6:	231f      	movs	r3, #31
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b69      	ldr	r3, [pc, #420]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80021e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e4:	4b68      	ldr	r3, [pc, #416]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80021e6:	496b      	ldr	r1, [pc, #428]	@ (8002394 <HAL_RCC_OscConfig+0x638>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2220      	movs	r2, #32
 80021f2:	4013      	ands	r3, r2
 80021f4:	d039      	beq.n	800226a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01b      	beq.n	8002236 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021fe:	4b62      	ldr	r3, [pc, #392]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	03c9      	lsls	r1, r1, #15
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7ff f852 	bl	80012b4 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002216:	f7ff f84d 	bl	80012b4 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0f3      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002228:	4b57      	ldr	r3, [pc, #348]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	4013      	ands	r3, r2
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x4ba>
 8002234:	e019      	b.n	800226a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002236:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800223c:	4956      	ldr	r1, [pc, #344]	@ (8002398 <HAL_RCC_OscConfig+0x63c>)
 800223e:	400a      	ands	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f837 	bl	80012b4 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224c:	f7ff f832 	bl	80012b4 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0d8      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800225e:	4b4a      	ldr	r3, [pc, #296]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d100      	bne.n	8002274 <HAL_RCC_OscConfig+0x518>
 8002272:	e0cc      	b.n	800240e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002274:	4b44      	ldr	r3, [pc, #272]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2238      	movs	r2, #56	@ 0x38
 800227a:	4013      	ands	r3, r2
 800227c:	2b10      	cmp	r3, #16
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x526>
 8002280:	e07b      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d156      	bne.n	8002338 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b3f      	ldr	r3, [pc, #252]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002290:	4942      	ldr	r1, [pc, #264]	@ (800239c <HAL_RCC_OscConfig+0x640>)
 8002292:	400a      	ands	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f80d 	bl	80012b4 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f808 	bl	80012b4 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0ae      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b2:	4b35      	ldr	r3, [pc, #212]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	049b      	lsls	r3, r3, #18
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4a37      	ldr	r2, [pc, #220]	@ (80023a0 <HAL_RCC_OscConfig+0x644>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ea:	431a      	orrs	r2, r3
 80022ec:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f2:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	0449      	lsls	r1, r1, #17
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002306:	2180      	movs	r1, #128	@ 0x80
 8002308:	0549      	lsls	r1, r1, #21
 800230a:	430a      	orrs	r2, r1
 800230c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe ffd1 	bl	80012b4 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe ffcc 	bl	80012b4 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e072      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	049b      	lsls	r3, r3, #18
 8002332:	4013      	ands	r3, r2
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x5bc>
 8002336:	e06a      	b.n	800240e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800233e:	4917      	ldr	r1, [pc, #92]	@ (800239c <HAL_RCC_OscConfig+0x640>)
 8002340:	400a      	ands	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ffb6 	bl	80012b4 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ffb1 	bl	80012b4 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e057      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	049b      	lsls	r3, r3, #18
 8002368:	4013      	ands	r3, r2
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_RCC_OscConfig+0x62c>)
 8002372:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <HAL_RCC_OscConfig+0x648>)
 8002374:	400a      	ands	r2, r1
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	e049      	b.n	800240e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d112      	bne.n	80023a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e044      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	00001388 	.word	0x00001388
 8002394:	efffffff 	.word	0xefffffff
 8002398:	ffbfffff 	.word	0xffbfffff
 800239c:	feffffff 	.word	0xfeffffff
 80023a0:	11c1808c 	.word	0x11c1808c
 80023a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_RCC_OscConfig+0x6bc>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2203      	movs	r2, #3
 80023b2:	401a      	ands	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d126      	bne.n	800240a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2270      	movs	r2, #112	@ 0x70
 80023c0:	401a      	ands	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d11f      	bne.n	800240a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	23fe      	movs	r3, #254	@ 0xfe
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d116      	bne.n	800240a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	23f8      	movs	r3, #248	@ 0xf8
 80023e0:	039b      	lsls	r3, r3, #14
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	23e0      	movs	r3, #224	@ 0xe0
 80023f0:	051b      	lsls	r3, r3, #20
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	0f5b      	lsrs	r3, r3, #29
 8002400:	075a      	lsls	r2, r3, #29
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b008      	add	sp, #32
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0e9      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2207      	movs	r2, #7
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d91e      	bls.n	800247c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b73      	ldr	r3, [pc, #460]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2207      	movs	r2, #7
 8002444:	4393      	bics	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	4b70      	ldr	r3, [pc, #448]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002450:	f7fe ff30 	bl	80012b4 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002458:	e009      	b.n	800246e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245a:	f7fe ff2b 	bl	80012b4 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a6a      	ldr	r2, [pc, #424]	@ (8002610 <HAL_RCC_ClockConfig+0x1f4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0ca      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2207      	movs	r2, #7
 8002474:	4013      	ands	r3, r2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d015      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	d006      	beq.n	800249e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002490:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b5f      	ldr	r3, [pc, #380]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	21e0      	movs	r1, #224	@ 0xe0
 8002498:	01c9      	lsls	r1, r1, #7
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249e:	4b5d      	ldr	r3, [pc, #372]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002618 <HAL_RCC_ClockConfig+0x1fc>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b59      	ldr	r3, [pc, #356]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d057      	beq.n	800256c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c4:	4b53      	ldr	r3, [pc, #332]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	4013      	ands	r3, r2
 80024ce:	d12b      	bne.n	8002528 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e097      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d107      	bne.n	80024ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	049b      	lsls	r3, r3, #18
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11f      	bne.n	8002528 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e08b      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f4:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	d113      	bne.n	8002528 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e07f      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d106      	bne.n	800251a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250c:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 800250e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d108      	bne.n	8002528 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e074      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b3e      	ldr	r3, [pc, #248]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e06d      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002528:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2207      	movs	r2, #7
 800252e:	4393      	bics	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe feba 	bl	80012b4 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002544:	e009      	b.n	800255a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002546:	f7fe feb5 	bl	80012b4 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a2f      	ldr	r2, [pc, #188]	@ (8002610 <HAL_RCC_ClockConfig+0x1f4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e054      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2238      	movs	r2, #56	@ 0x38
 8002560:	401a      	ands	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	429a      	cmp	r2, r3
 800256a:	d1ec      	bne.n	8002546 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2207      	movs	r2, #7
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d21e      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2207      	movs	r2, #7
 8002580:	4393      	bics	r3, r2
 8002582:	0019      	movs	r1, r3
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800258c:	f7fe fe92 	bl	80012b4 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002594:	e009      	b.n	80025aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fe8d 	bl	80012b4 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_RCC_ClockConfig+0x1f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e02c      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2207      	movs	r2, #7
 80025b0:	4013      	ands	r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025c2:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4a15      	ldr	r2, [pc, #84]	@ (800261c <HAL_RCC_ClockConfig+0x200>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025d6:	f000 f829 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025da:	0001      	movs	r1, r0
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_RCC_ClockConfig+0x1f8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	220f      	movs	r2, #15
 80025e4:	401a      	ands	r2, r3
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_RCC_ClockConfig+0x204>)
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	58d3      	ldr	r3, [r2, r3]
 80025ec:	221f      	movs	r2, #31
 80025ee:	4013      	ands	r3, r2
 80025f0:	000a      	movs	r2, r1
 80025f2:	40da      	lsrs	r2, r3
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_ClockConfig+0x208>)
 80025f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_RCC_ClockConfig+0x20c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fe fdfd 	bl	80011fc <HAL_InitTick>
 8002602:	0003      	movs	r3, r0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	00001388 	.word	0x00001388
 8002614:	40021000 	.word	0x40021000
 8002618:	fffff0ff 	.word	0xfffff0ff
 800261c:	ffff8fff 	.word	0xffff8fff
 8002620:	080055bc 	.word	0x080055bc
 8002624:	20000004 	.word	0x20000004
 8002628:	20000008 	.word	0x20000008

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002632:	4b3c      	ldr	r3, [pc, #240]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2238      	movs	r2, #56	@ 0x38
 8002638:	4013      	ands	r3, r2
 800263a:	d10f      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800263c:	4b39      	ldr	r3, [pc, #228]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0adb      	lsrs	r3, r3, #11
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	2201      	movs	r2, #1
 8002648:	409a      	lsls	r2, r3
 800264a:	0013      	movs	r3, r2
 800264c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	4835      	ldr	r0, [pc, #212]	@ (8002728 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002652:	f7fd fd63 	bl	800011c <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e05d      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265c:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2238      	movs	r2, #56	@ 0x38
 8002662:	4013      	ands	r3, r2
 8002664:	2b08      	cmp	r3, #8
 8002666:	d102      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_RCC_GetSysClockFreq+0x100>)
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e054      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266e:	4b2d      	ldr	r3, [pc, #180]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2238      	movs	r2, #56	@ 0x38
 8002674:	4013      	ands	r3, r2
 8002676:	2b10      	cmp	r3, #16
 8002678:	d138      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800267a:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2203      	movs	r2, #3
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	2207      	movs	r2, #7
 800268c:	4013      	ands	r3, r2
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d10d      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4824      	ldr	r0, [pc, #144]	@ (800272c <HAL_RCC_GetSysClockFreq+0x100>)
 800269c:	f7fd fd3e 	bl	800011c <__udivsi3>
 80026a0:	0003      	movs	r3, r0
 80026a2:	0019      	movs	r1, r3
 80026a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	227f      	movs	r2, #127	@ 0x7f
 80026ac:	4013      	ands	r3, r2
 80026ae:	434b      	muls	r3, r1
 80026b0:	617b      	str	r3, [r7, #20]
        break;
 80026b2:	e00d      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	481c      	ldr	r0, [pc, #112]	@ (8002728 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026b8:	f7fd fd30 	bl	800011c <__udivsi3>
 80026bc:	0003      	movs	r3, r0
 80026be:	0019      	movs	r1, r3
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	227f      	movs	r2, #127	@ 0x7f
 80026c8:	4013      	ands	r3, r2
 80026ca:	434b      	muls	r3, r1
 80026cc:	617b      	str	r3, [r7, #20]
        break;
 80026ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0f5b      	lsrs	r3, r3, #29
 80026d6:	2207      	movs	r2, #7
 80026d8:	4013      	ands	r3, r2
 80026da:	3301      	adds	r3, #1
 80026dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f7fd fd1b 	bl	800011c <__udivsi3>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e015      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2238      	movs	r2, #56	@ 0x38
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d103      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2238      	movs	r2, #56	@ 0x38
 8002706:	4013      	ands	r3, r2
 8002708:	2b18      	cmp	r3, #24
 800270a:	d103      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800270c:	23fa      	movs	r3, #250	@ 0xfa
 800270e:	01db      	lsls	r3, r3, #7
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e001      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002718:	693b      	ldr	r3, [r7, #16]
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b006      	add	sp, #24
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	40021000 	.word	0x40021000
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b02      	ldr	r3, [pc, #8]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002748:	f7ff fff2 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 800274c:	0004      	movs	r4, r0
 800274e:	f7ff faf9 	bl	8001d44 <LL_RCC_GetAPB1Prescaler>
 8002752:	0003      	movs	r3, r0
 8002754:	0b1a      	lsrs	r2, r3, #12
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	58d3      	ldr	r3, [r2, r3]
 800275c:	221f      	movs	r2, #31
 800275e:	4013      	ands	r3, r2
 8002760:	40dc      	lsrs	r4, r3
 8002762:	0023      	movs	r3, r4
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	080055fc 	.word	0x080055fc

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002778:	2313      	movs	r3, #19
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002780:	2312      	movs	r3, #18
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	029b      	lsls	r3, r3, #10
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002794:	e0ad      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2011      	movs	r0, #17
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d110      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b44      	ldr	r3, [pc, #272]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ae:	4b43      	ldr	r3, [pc, #268]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027b8:	4b40      	ldr	r3, [pc, #256]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	0049      	lsls	r1, r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027da:	f7fe fd6b 	bl	80012b4 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e2:	e00b      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e4:	f7fe fd66 	bl	80012b4 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d904      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027f2:	2313      	movs	r3, #19
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2203      	movs	r2, #3
 80027f8:	701a      	strb	r2, [r3, #0]
        break;
 80027fa:	e005      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fc:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d0ed      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002808:	2313      	movs	r3, #19
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d15e      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002812:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002814:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002816:	23c0      	movs	r3, #192	@ 0xc0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4013      	ands	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	429a      	cmp	r2, r3
 800282c:	d014      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282e:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002834:	4013      	ands	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002838:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800283a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	0249      	lsls	r1, r1, #9
 8002842:	430a      	orrs	r2, r1
 8002844:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002846:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800284c:	491e      	ldr	r1, [pc, #120]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800284e:	400a      	ands	r2, r1
 8002850:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002852:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d016      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fd28 	bl	80012b4 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002868:	e00c      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fd23 	bl	80012b4 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d904      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800287a:	2313      	movs	r3, #19
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2203      	movs	r2, #3
 8002880:	701a      	strb	r2, [r3, #0]
            break;
 8002882:	e004      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	2202      	movs	r2, #2
 800288a:	4013      	ands	r3, r2
 800288c:	d0ed      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800288e:	2313      	movs	r3, #19
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ac:	e016      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ae:	2312      	movs	r3, #18
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2213      	movs	r2, #19
 80028b4:	18ba      	adds	r2, r7, r2
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	fffffcff 	.word	0xfffffcff
 80028c8:	fffeffff 	.word	0xfffeffff
 80028cc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2213      	movs	r2, #19
 80028d6:	18ba      	adds	r2, r7, r2
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028dc:	2311      	movs	r3, #17
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4bb6      	ldr	r3, [pc, #728]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ea:	4bb5      	ldr	r3, [pc, #724]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ec:	49b5      	ldr	r1, [pc, #724]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4bb0      	ldr	r3, [pc, #704]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2203      	movs	r2, #3
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4bad      	ldr	r3, [pc, #692]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800290c:	430a      	orrs	r2, r1
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291a:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	220c      	movs	r2, #12
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4ba5      	ldr	r3, [pc, #660]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800292a:	430a      	orrs	r2, r1
 800292c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2204      	movs	r2, #4
 8002934:	4013      	ands	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002938:	4ba1      	ldr	r3, [pc, #644]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	2230      	movs	r2, #48	@ 0x30
 800293e:	4393      	bics	r3, r2
 8002940:	0019      	movs	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002948:	430a      	orrs	r2, r1
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002956:	4b9a      	ldr	r3, [pc, #616]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	4a9b      	ldr	r2, [pc, #620]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	4b96      	ldr	r3, [pc, #600]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002966:	430a      	orrs	r2, r1
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	015b      	lsls	r3, r3, #5
 8002972:	4013      	ands	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002976:	4b92      	ldr	r3, [pc, #584]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	4a94      	ldr	r2, [pc, #592]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002986:	430a      	orrs	r2, r1
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002996:	4b8a      	ldr	r3, [pc, #552]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	4a8d      	ldr	r2, [pc, #564]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a4:	4b86      	ldr	r3, [pc, #536]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4013      	ands	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b6:	4b82      	ldr	r3, [pc, #520]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	4a86      	ldr	r2, [pc, #536]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	4013      	ands	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	4b77      	ldr	r3, [pc, #476]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2240      	movs	r2, #64	@ 0x40
 80029ee:	4013      	ands	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f2:	4b73      	ldr	r3, [pc, #460]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	4a79      	ldr	r2, [pc, #484]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	01db      	lsls	r3, r3, #7
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d015      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a12:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	0899      	lsrs	r1, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a1e:	4b68      	ldr	r3, [pc, #416]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a30:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	4b62      	ldr	r3, [pc, #392]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	0249      	lsls	r1, r1, #9
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	031b      	lsls	r3, r3, #12
 8002a46:	4013      	ands	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	2240      	movs	r2, #64	@ 0x40
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a58:	4b59      	ldr	r3, [pc, #356]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	039b      	lsls	r3, r3, #14
 8002a66:	4013      	ands	r3, r2
 8002a68:	d016      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a6a:	4b55      	ldr	r3, [pc, #340]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a78:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	03db      	lsls	r3, r3, #15
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d106      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	0449      	lsls	r1, r1, #17
 8002a94:	430a      	orrs	r2, r1
 8002a96:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	03db      	lsls	r3, r3, #15
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d016      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aa4:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	4a4e      	ldr	r2, [pc, #312]	@ (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ab2:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	045b      	lsls	r3, r3, #17
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	0449      	lsls	r1, r1, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4013      	ands	r3, r2
 8002adc:	d014      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ade:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d106      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002afa:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	0249      	lsls	r1, r1, #9
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	4013      	ands	r3, r2
 8002b12:	d014      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b14:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b18:	220c      	movs	r2, #12
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b22:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	0249      	lsls	r1, r1, #9
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	045b      	lsls	r3, r3, #17
 8002b46:	4013      	ands	r3, r2
 8002b48:	d016      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b58:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d106      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	0449      	lsls	r1, r1, #17
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	049b      	lsls	r3, r3, #18
 8002b80:	4013      	ands	r3, r2
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a10      	ldr	r2, [pc, #64]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	0449      	lsls	r1, r1, #17
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bb2:	2312      	movs	r3, #18
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b006      	add	sp, #24
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	efffffff 	.word	0xefffffff
 8002bc8:	fffff3ff 	.word	0xfffff3ff
 8002bcc:	fffffcff 	.word	0xfffffcff
 8002bd0:	fff3ffff 	.word	0xfff3ffff
 8002bd4:	ffcfffff 	.word	0xffcfffff
 8002bd8:	ffffcfff 	.word	0xffffcfff
 8002bdc:	ffff3fff 	.word	0xffff3fff
 8002be0:	ffbfffff 	.word	0xffbfffff
 8002be4:	feffffff 	.word	0xfeffffff

08002be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e046      	b.n	8002c88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2288      	movs	r2, #136	@ 0x88
 8002bfe:	589b      	ldr	r3, [r3, r2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2284      	movs	r2, #132	@ 0x84
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7fe f91a 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2288      	movs	r2, #136	@ 0x88
 8002c18:	2124      	movs	r1, #36	@ 0x24
 8002c1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 f84e 	bl	8003cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 fcf4 	bl	800362c <UART_SetConfig>
 8002c44:	0003      	movs	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e01c      	b.n	8002c88 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	490d      	ldr	r1, [pc, #52]	@ (8002c90 <HAL_UART_Init+0xa8>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	212a      	movs	r1, #42	@ 0x2a
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f001 f8dd 	bl	8003e40 <UART_CheckIdleState>
 8002c86:	0003      	movs	r3, r0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	ffffb7ff 	.word	0xffffb7ff

08002c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	@ 0x28
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	1dbb      	adds	r3, r7, #6
 8002ca2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2288      	movs	r2, #136	@ 0x88
 8002ca8:	589b      	ldr	r3, [r3, r2]
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d000      	beq.n	8002cb0 <HAL_UART_Transmit+0x1c>
 8002cae:	e090      	b.n	8002dd2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_Transmit+0x2a>
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e088      	b.n	8002dd4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d109      	bne.n	8002ce2 <HAL_UART_Transmit+0x4e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d001      	beq.n	8002ce2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e078      	b.n	8002dd4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2290      	movs	r2, #144	@ 0x90
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2288      	movs	r2, #136	@ 0x88
 8002cee:	2121      	movs	r1, #33	@ 0x21
 8002cf0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fadf 	bl	80012b4 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1dba      	adds	r2, r7, #6
 8002cfe:	2154      	movs	r1, #84	@ 0x54
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1dba      	adds	r2, r7, #6
 8002d08:	2156      	movs	r1, #86	@ 0x56
 8002d0a:	8812      	ldrh	r2, [r2, #0]
 8002d0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x98>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e030      	b.n	8002d98 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	0013      	movs	r3, r2
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	f001 f926 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2288      	movs	r2, #136	@ 0x88
 8002d50:	2120      	movs	r1, #32
 8002d52:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03d      	b.n	8002dd4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	001a      	movs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	05d2      	lsls	r2, r2, #23
 8002d6a:	0dd2      	lsrs	r2, r2, #23
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	3302      	adds	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e007      	b.n	8002d86 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2256      	movs	r2, #86	@ 0x56
 8002d8a:	5a9b      	ldrh	r3, [r3, r2]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b299      	uxth	r1, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2256      	movs	r2, #86	@ 0x56
 8002d96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2256      	movs	r2, #86	@ 0x56
 8002d9c:	5a9b      	ldrh	r3, [r3, r2]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1c8      	bne.n	8002d36 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	0013      	movs	r3, r2
 8002dae:	2200      	movs	r2, #0
 8002db0:	2140      	movs	r1, #64	@ 0x40
 8002db2:	f001 f8ef 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2288      	movs	r2, #136	@ 0x88
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e006      	b.n	8002dd4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2288      	movs	r2, #136	@ 0x88
 8002dca:	2120      	movs	r1, #32
 8002dcc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b008      	add	sp, #32
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	1dbb      	adds	r3, r7, #6
 8002dea:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	228c      	movs	r2, #140	@ 0x8c
 8002df0:	589b      	ldr	r3, [r3, r2]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d000      	beq.n	8002df8 <HAL_UART_Receive+0x1c>
 8002df6:	e0d0      	b.n	8002f9a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_UART_Receive+0x2a>
 8002dfe:	1dbb      	adds	r3, r7, #6
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0c8      	b.n	8002f9c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d109      	bne.n	8002e2a <HAL_UART_Receive+0x4e>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0b8      	b.n	8002f9c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2290      	movs	r2, #144	@ 0x90
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	228c      	movs	r2, #140	@ 0x8c
 8002e36:	2122      	movs	r1, #34	@ 0x22
 8002e38:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e40:	f7fe fa38 	bl	80012b4 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1dba      	adds	r2, r7, #6
 8002e4c:	215c      	movs	r1, #92	@ 0x5c
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1dba      	adds	r2, r7, #6
 8002e56:	215e      	movs	r1, #94	@ 0x5e
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10d      	bne.n	8002e84 <HAL_UART_Receive+0xa8>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_UART_Receive+0x9e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2260      	movs	r2, #96	@ 0x60
 8002e74:	494b      	ldr	r1, [pc, #300]	@ (8002fa4 <HAL_UART_Receive+0x1c8>)
 8002e76:	5299      	strh	r1, [r3, r2]
 8002e78:	e02e      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2260      	movs	r2, #96	@ 0x60
 8002e7e:	21ff      	movs	r1, #255	@ 0xff
 8002e80:	5299      	strh	r1, [r3, r2]
 8002e82:	e029      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_UART_Receive+0xcc>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_UART_Receive+0xc2>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2260      	movs	r2, #96	@ 0x60
 8002e98:	21ff      	movs	r1, #255	@ 0xff
 8002e9a:	5299      	strh	r1, [r3, r2]
 8002e9c:	e01c      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2260      	movs	r2, #96	@ 0x60
 8002ea2:	217f      	movs	r1, #127	@ 0x7f
 8002ea4:	5299      	strh	r1, [r3, r2]
 8002ea6:	e017      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	055b      	lsls	r3, r3, #21
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_UART_Receive+0xf4>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_UART_Receive+0xea>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2260      	movs	r2, #96	@ 0x60
 8002ec0:	217f      	movs	r1, #127	@ 0x7f
 8002ec2:	5299      	strh	r1, [r3, r2]
 8002ec4:	e008      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2260      	movs	r2, #96	@ 0x60
 8002eca:	213f      	movs	r1, #63	@ 0x3f
 8002ecc:	5299      	strh	r1, [r3, r2]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Receive+0xfc>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2260      	movs	r2, #96	@ 0x60
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002ed8:	2312      	movs	r3, #18
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	2160      	movs	r1, #96	@ 0x60
 8002ee0:	5a52      	ldrh	r2, [r2, r1]
 8002ee2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d108      	bne.n	8002f02 <HAL_UART_Receive+0x126>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e003      	b.n	8002f0a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f0a:	e03a      	b.n	8002f82 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	0013      	movs	r3, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	2120      	movs	r1, #32
 8002f1a:	f001 f83b 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	228c      	movs	r2, #140	@ 0x8c
 8002f26:	2120      	movs	r1, #32
 8002f28:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e036      	b.n	8002f9c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10e      	bne.n	8002f52 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2212      	movs	r2, #18
 8002f3e:	18ba      	adds	r2, r7, r2
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e00e      	b.n	8002f70 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2212      	movs	r2, #18
 8002f5c:	18ba      	adds	r2, r7, r2
 8002f5e:	8812      	ldrh	r2, [r2, #0]
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	4013      	ands	r3, r2
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	225e      	movs	r2, #94	@ 0x5e
 8002f74:	5a9b      	ldrh	r3, [r3, r2]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	225e      	movs	r2, #94	@ 0x5e
 8002f80:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	225e      	movs	r2, #94	@ 0x5e
 8002f86:	5a9b      	ldrh	r3, [r3, r2]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1be      	bne.n	8002f0c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	228c      	movs	r2, #140	@ 0x8c
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b008      	add	sp, #32
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	000001ff 	.word	0x000001ff

08002fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b0aa      	sub	sp, #168	@ 0xa8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	22a4      	movs	r2, #164	@ 0xa4
 8002fb8:	18b9      	adds	r1, r7, r2
 8002fba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	20a0      	movs	r0, #160	@ 0xa0
 8002fc4:	1839      	adds	r1, r7, r0
 8002fc6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	249c      	movs	r4, #156	@ 0x9c
 8002fd0:	1939      	adds	r1, r7, r4
 8002fd2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	18bb      	adds	r3, r7, r2
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4aa2      	ldr	r2, [pc, #648]	@ (8003264 <HAL_UART_IRQHandler+0x2bc>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2298      	movs	r2, #152	@ 0x98
 8002fe0:	18bd      	adds	r5, r7, r2
 8002fe2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002fe4:	18bb      	adds	r3, r7, r2
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11a      	bne.n	8003022 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d015      	beq.n	8003022 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ff6:	183b      	adds	r3, r7, r0
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d105      	bne.n	800300c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003000:	193b      	adds	r3, r7, r4
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4013      	ands	r3, r2
 800300a:	d00a      	beq.n	8003022 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003010:	2b00      	cmp	r3, #0
 8003012:	d100      	bne.n	8003016 <HAL_UART_IRQHandler+0x6e>
 8003014:	e2dc      	b.n	80035d0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	0010      	movs	r0, r2
 800301e:	4798      	blx	r3
      }
      return;
 8003020:	e2d6      	b.n	80035d0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003022:	2398      	movs	r3, #152	@ 0x98
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d100      	bne.n	800302e <HAL_UART_IRQHandler+0x86>
 800302c:	e122      	b.n	8003274 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800302e:	239c      	movs	r3, #156	@ 0x9c
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a8c      	ldr	r2, [pc, #560]	@ (8003268 <HAL_UART_IRQHandler+0x2c0>)
 8003036:	4013      	ands	r3, r2
 8003038:	d106      	bne.n	8003048 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800303a:	23a0      	movs	r3, #160	@ 0xa0
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8a      	ldr	r2, [pc, #552]	@ (800326c <HAL_UART_IRQHandler+0x2c4>)
 8003042:	4013      	ands	r3, r2
 8003044:	d100      	bne.n	8003048 <HAL_UART_IRQHandler+0xa0>
 8003046:	e115      	b.n	8003274 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003048:	23a4      	movs	r3, #164	@ 0xa4
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_UART_IRQHandler+0xd2>
 8003054:	23a0      	movs	r3, #160	@ 0xa0
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d00b      	beq.n	800307a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2290      	movs	r2, #144	@ 0x90
 800306e:	589b      	ldr	r3, [r3, r2]
 8003070:	2201      	movs	r2, #1
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2190      	movs	r1, #144	@ 0x90
 8003078:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307a:	23a4      	movs	r3, #164	@ 0xa4
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d011      	beq.n	80030aa <HAL_UART_IRQHandler+0x102>
 8003086:	239c      	movs	r3, #156	@ 0x9c
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	4013      	ands	r3, r2
 8003090:	d00b      	beq.n	80030aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2202      	movs	r2, #2
 8003098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2290      	movs	r2, #144	@ 0x90
 800309e:	589b      	ldr	r3, [r3, r2]
 80030a0:	2204      	movs	r2, #4
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2190      	movs	r1, #144	@ 0x90
 80030a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030aa:	23a4      	movs	r3, #164	@ 0xa4
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2204      	movs	r2, #4
 80030b2:	4013      	ands	r3, r2
 80030b4:	d011      	beq.n	80030da <HAL_UART_IRQHandler+0x132>
 80030b6:	239c      	movs	r3, #156	@ 0x9c
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2204      	movs	r2, #4
 80030c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2290      	movs	r2, #144	@ 0x90
 80030ce:	589b      	ldr	r3, [r3, r2]
 80030d0:	2202      	movs	r2, #2
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2190      	movs	r1, #144	@ 0x90
 80030d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030da:	23a4      	movs	r3, #164	@ 0xa4
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2208      	movs	r2, #8
 80030e2:	4013      	ands	r3, r2
 80030e4:	d017      	beq.n	8003116 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030e6:	23a0      	movs	r3, #160	@ 0xa0
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	4013      	ands	r3, r2
 80030f0:	d105      	bne.n	80030fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030f2:	239c      	movs	r3, #156	@ 0x9c
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003268 <HAL_UART_IRQHandler+0x2c0>)
 80030fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2208      	movs	r2, #8
 8003104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2290      	movs	r2, #144	@ 0x90
 800310a:	589b      	ldr	r3, [r3, r2]
 800310c:	2208      	movs	r2, #8
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2190      	movs	r1, #144	@ 0x90
 8003114:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003116:	23a4      	movs	r3, #164	@ 0xa4
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	4013      	ands	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_UART_IRQHandler+0x1a4>
 8003124:	23a0      	movs	r3, #160	@ 0xa0
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	04db      	lsls	r3, r3, #19
 800312e:	4013      	ands	r3, r2
 8003130:	d00c      	beq.n	800314c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2290      	movs	r2, #144	@ 0x90
 8003140:	589b      	ldr	r3, [r3, r2]
 8003142:	2220      	movs	r2, #32
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2190      	movs	r1, #144	@ 0x90
 800314a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2290      	movs	r2, #144	@ 0x90
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <HAL_UART_IRQHandler+0x1b0>
 8003156:	e23d      	b.n	80035d4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003158:	23a4      	movs	r3, #164	@ 0xa4
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	d015      	beq.n	8003190 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003164:	23a0      	movs	r3, #160	@ 0xa0
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2220      	movs	r2, #32
 800316c:	4013      	ands	r3, r2
 800316e:	d106      	bne.n	800317e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003170:	239c      	movs	r3, #156	@ 0x9c
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	055b      	lsls	r3, r3, #21
 800317a:	4013      	ands	r3, r2
 800317c:	d008      	beq.n	8003190 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	0010      	movs	r0, r2
 800318e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2290      	movs	r2, #144	@ 0x90
 8003194:	589b      	ldr	r3, [r3, r2]
 8003196:	2194      	movs	r1, #148	@ 0x94
 8003198:	187a      	adds	r2, r7, r1
 800319a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d004      	beq.n	80031b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2228      	movs	r2, #40	@ 0x28
 80031b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b2:	d04c      	beq.n	800324e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 ff5c 	bl	8004074 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2240      	movs	r2, #64	@ 0x40
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d13c      	bne.n	8003244 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ca:	f3ef 8310 	mrs	r3, PRIMASK
 80031ce:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80031d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	2090      	movs	r0, #144	@ 0x90
 80031d4:	183a      	adds	r2, r7, r0
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	2301      	movs	r3, #1
 80031da:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	438a      	bics	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	589b      	ldr	r3, [r3, r2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	589b      	ldr	r3, [r3, r2]
 8003212:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <HAL_UART_IRQHandler+0x2c8>)
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	589b      	ldr	r3, [r3, r2]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fe f9cb 	bl	80015b8 <HAL_DMA_Abort_IT>
 8003222:	1e03      	subs	r3, r0, #0
 8003224:	d01c      	beq.n	8003260 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2280      	movs	r2, #128	@ 0x80
 800322a:	589b      	ldr	r3, [r3, r2]
 800322c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	5852      	ldr	r2, [r2, r1]
 8003234:	0010      	movs	r0, r2
 8003236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e012      	b.n	8003260 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 f9e1 	bl	8003604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	e00d      	b.n	8003260 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f9dc 	bl	8003604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e008      	b.n	8003260 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 f9d7 	bl	8003604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2290      	movs	r2, #144	@ 0x90
 800325a:	2100      	movs	r1, #0
 800325c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800325e:	e1b9      	b.n	80035d4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	46c0      	nop			@ (mov r8, r8)
    return;
 8003262:	e1b7      	b.n	80035d4 <HAL_UART_IRQHandler+0x62c>
 8003264:	0000080f 	.word	0x0000080f
 8003268:	10000001 	.word	0x10000001
 800326c:	04000120 	.word	0x04000120
 8003270:	08004141 	.word	0x08004141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d000      	beq.n	800327e <HAL_UART_IRQHandler+0x2d6>
 800327c:	e13e      	b.n	80034fc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800327e:	23a4      	movs	r3, #164	@ 0xa4
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2210      	movs	r2, #16
 8003286:	4013      	ands	r3, r2
 8003288:	d100      	bne.n	800328c <HAL_UART_IRQHandler+0x2e4>
 800328a:	e137      	b.n	80034fc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800328c:	23a0      	movs	r3, #160	@ 0xa0
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	4013      	ands	r3, r2
 8003296:	d100      	bne.n	800329a <HAL_UART_IRQHandler+0x2f2>
 8003298:	e130      	b.n	80034fc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2210      	movs	r2, #16
 80032a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2240      	movs	r2, #64	@ 0x40
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d000      	beq.n	80032b2 <HAL_UART_IRQHandler+0x30a>
 80032b0:	e0a4      	b.n	80033fc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2280      	movs	r2, #128	@ 0x80
 80032b6:	589b      	ldr	r3, [r3, r2]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	217e      	movs	r1, #126	@ 0x7e
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d100      	bne.n	80032cc <HAL_UART_IRQHandler+0x324>
 80032ca:	e185      	b.n	80035d8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	225c      	movs	r2, #92	@ 0x5c
 80032d0:	5a9b      	ldrh	r3, [r3, r2]
 80032d2:	187a      	adds	r2, r7, r1
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d300      	bcc.n	80032dc <HAL_UART_IRQHandler+0x334>
 80032da:	e17d      	b.n	80035d8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	187a      	adds	r2, r7, r1
 80032e0:	215e      	movs	r1, #94	@ 0x5e
 80032e2:	8812      	ldrh	r2, [r2, #0]
 80032e4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	589b      	ldr	r3, [r3, r2]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2220      	movs	r2, #32
 80032f2:	4013      	ands	r3, r2
 80032f4:	d170      	bne.n	80033d8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003300:	2301      	movs	r3, #1
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	49b4      	ldr	r1, [pc, #720]	@ (80035e8 <HAL_UART_IRQHandler+0x640>)
 8003318:	400a      	ands	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800331e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800332e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003330:	677b      	str	r3, [r7, #116]	@ 0x74
 8003332:	2301      	movs	r3, #1
 8003334:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	438a      	bics	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335a:	f3ef 8310 	mrs	r3, PRIMASK
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	673b      	str	r3, [r7, #112]	@ 0x70
 8003364:	2301      	movs	r3, #1
 8003366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	438a      	bics	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	228c      	movs	r2, #140	@ 0x8c
 8003390:	2120      	movs	r1, #32
 8003392:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80033a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033a4:	2301      	movs	r3, #1
 80033a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2110      	movs	r1, #16
 80033bc:	438a      	bics	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	589b      	ldr	r3, [r3, r2]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fe f890 	bl	80014f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	225c      	movs	r2, #92	@ 0x5c
 80033e2:	5a9a      	ldrh	r2, [r3, r2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	215e      	movs	r1, #94	@ 0x5e
 80033e8:	5a5b      	ldrh	r3, [r3, r1]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f90d 	bl	8003614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033fa:	e0ed      	b.n	80035d8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	225c      	movs	r2, #92	@ 0x5c
 8003400:	5a99      	ldrh	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	225e      	movs	r2, #94	@ 0x5e
 8003406:	5a9b      	ldrh	r3, [r3, r2]
 8003408:	b29a      	uxth	r2, r3
 800340a:	208e      	movs	r0, #142	@ 0x8e
 800340c:	183b      	adds	r3, r7, r0
 800340e:	1a8a      	subs	r2, r1, r2
 8003410:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	225e      	movs	r2, #94	@ 0x5e
 8003416:	5a9b      	ldrh	r3, [r3, r2]
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d100      	bne.n	8003420 <HAL_UART_IRQHandler+0x478>
 800341e:	e0dd      	b.n	80035dc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003420:	183b      	adds	r3, r7, r0
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d100      	bne.n	800342a <HAL_UART_IRQHandler+0x482>
 8003428:	e0d8      	b.n	80035dc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003432:	2488      	movs	r4, #136	@ 0x88
 8003434:	193a      	adds	r2, r7, r4
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	2301      	movs	r3, #1
 800343a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4967      	ldr	r1, [pc, #412]	@ (80035ec <HAL_UART_IRQHandler+0x644>)
 8003450:	400a      	ands	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	193b      	adds	r3, r7, r4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	61bb      	str	r3, [r7, #24]
  return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800346a:	2484      	movs	r4, #132	@ 0x84
 800346c:	193a      	adds	r2, r7, r4
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	2301      	movs	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	495a      	ldr	r1, [pc, #360]	@ (80035f0 <HAL_UART_IRQHandler+0x648>)
 8003488:	400a      	ands	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	193b      	adds	r3, r7, r4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	228c      	movs	r2, #140	@ 0x8c
 800349e:	2120      	movs	r1, #32
 80034a0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ae:	f3ef 8310 	mrs	r3, PRIMASK
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	2480      	movs	r4, #128	@ 0x80
 80034b8:	193a      	adds	r2, r7, r4
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	2301      	movs	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2110      	movs	r1, #16
 80034d4:	438a      	bics	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034ec:	183b      	adds	r3, r7, r0
 80034ee:	881a      	ldrh	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0011      	movs	r1, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f88d 	bl	8003614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034fa:	e06f      	b.n	80035dc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034fc:	23a4      	movs	r3, #164	@ 0xa4
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	035b      	lsls	r3, r3, #13
 8003506:	4013      	ands	r3, r2
 8003508:	d010      	beq.n	800352c <HAL_UART_IRQHandler+0x584>
 800350a:	239c      	movs	r3, #156	@ 0x9c
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	03db      	lsls	r3, r3, #15
 8003514:	4013      	ands	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2280      	movs	r2, #128	@ 0x80
 800351e:	0352      	lsls	r2, r2, #13
 8003520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fe4e 	bl	80041c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800352a:	e05a      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800352c:	23a4      	movs	r3, #164	@ 0xa4
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2280      	movs	r2, #128	@ 0x80
 8003534:	4013      	ands	r3, r2
 8003536:	d016      	beq.n	8003566 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003538:	23a0      	movs	r3, #160	@ 0xa0
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2280      	movs	r2, #128	@ 0x80
 8003540:	4013      	ands	r3, r2
 8003542:	d106      	bne.n	8003552 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003544:	239c      	movs	r3, #156	@ 0x9c
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003556:	2b00      	cmp	r3, #0
 8003558:	d042      	beq.n	80035e0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	0010      	movs	r0, r2
 8003562:	4798      	blx	r3
    }
    return;
 8003564:	e03c      	b.n	80035e0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003566:	23a4      	movs	r3, #164	@ 0xa4
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2240      	movs	r2, #64	@ 0x40
 800356e:	4013      	ands	r3, r2
 8003570:	d00a      	beq.n	8003588 <HAL_UART_IRQHandler+0x5e0>
 8003572:	23a0      	movs	r3, #160	@ 0xa0
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2240      	movs	r2, #64	@ 0x40
 800357a:	4013      	ands	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fdf4 	bl	800416e <UART_EndTransmit_IT>
    return;
 8003586:	e02c      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003588:	23a4      	movs	r3, #164	@ 0xa4
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0x606>
 8003596:	23a0      	movs	r3, #160	@ 0xa0
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	05db      	lsls	r3, r3, #23
 80035a0:	4013      	ands	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f000 fe1d 	bl	80041e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ac:	e019      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035ae:	23a4      	movs	r3, #164	@ 0xa4
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	045b      	lsls	r3, r3, #17
 80035b8:	4013      	ands	r3, r2
 80035ba:	d012      	beq.n	80035e2 <HAL_UART_IRQHandler+0x63a>
 80035bc:	23a0      	movs	r3, #160	@ 0xa0
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0d      	bge.n	80035e2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 fe04 	bl	80041d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ce:	e008      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	e006      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
    return;
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	e004      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	e002      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80035dc:	46c0      	nop			@ (mov r8, r8)
 80035de:	e000      	b.n	80035e2 <HAL_UART_IRQHandler+0x63a>
    return;
 80035e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b02a      	add	sp, #168	@ 0xa8
 80035e6:	bdb0      	pop	{r4, r5, r7, pc}
 80035e8:	fffffeff 	.word	0xfffffeff
 80035ec:	fffffedf 	.word	0xfffffedf
 80035f0:	effffffe 	.word	0xeffffffe

080035f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	000a      	movs	r2, r1
 800361e:	1cbb      	adds	r3, r7, #2
 8003620:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b002      	add	sp, #8
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b090      	sub	sp, #64	@ 0x40
 8003630:	af00      	add	r7, sp, #0
 8003632:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003634:	231a      	movs	r3, #26
 8003636:	2220      	movs	r2, #32
 8003638:	189b      	adds	r3, r3, r2
 800363a:	19db      	adds	r3, r3, r7
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	431a      	orrs	r2, r3
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	431a      	orrs	r2, r3
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	4313      	orrs	r3, r2
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4ac1      	ldr	r2, [pc, #772]	@ (8003964 <UART_SetConfig+0x338>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366a:	430b      	orrs	r3, r1
 800366c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4abc      	ldr	r2, [pc, #752]	@ (8003968 <UART_SetConfig+0x33c>)
 8003676:	4013      	ands	r3, r2
 8003678:	0018      	movs	r0, r3
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	68d9      	ldr	r1, [r3, #12]
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	0003      	movs	r3, r0
 8003684:	430b      	orrs	r3, r1
 8003686:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4ab6      	ldr	r2, [pc, #728]	@ (800396c <UART_SetConfig+0x340>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d009      	beq.n	80036ac <UART_SetConfig+0x80>
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4ab4      	ldr	r2, [pc, #720]	@ (8003970 <UART_SetConfig+0x344>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036a8:	4313      	orrs	r3, r2
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4ab0      	ldr	r2, [pc, #704]	@ (8003974 <UART_SetConfig+0x348>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036be:	430b      	orrs	r3, r1
 80036c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	220f      	movs	r2, #15
 80036ca:	4393      	bics	r3, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	0003      	movs	r3, r0
 80036d8:	430b      	orrs	r3, r1
 80036da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4aa5      	ldr	r2, [pc, #660]	@ (8003978 <UART_SetConfig+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d131      	bne.n	800374a <UART_SetConfig+0x11e>
 80036e6:	4ba5      	ldr	r3, [pc, #660]	@ (800397c <UART_SetConfig+0x350>)
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	2203      	movs	r2, #3
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d01d      	beq.n	800372e <UART_SetConfig+0x102>
 80036f2:	d823      	bhi.n	800373c <UART_SetConfig+0x110>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d00c      	beq.n	8003712 <UART_SetConfig+0xe6>
 80036f8:	d820      	bhi.n	800373c <UART_SetConfig+0x110>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <UART_SetConfig+0xd8>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d00e      	beq.n	8003720 <UART_SetConfig+0xf4>
 8003702:	e01b      	b.n	800373c <UART_SetConfig+0x110>
 8003704:	231b      	movs	r3, #27
 8003706:	2220      	movs	r2, #32
 8003708:	189b      	adds	r3, r3, r2
 800370a:	19db      	adds	r3, r3, r7
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e154      	b.n	80039bc <UART_SetConfig+0x390>
 8003712:	231b      	movs	r3, #27
 8003714:	2220      	movs	r2, #32
 8003716:	189b      	adds	r3, r3, r2
 8003718:	19db      	adds	r3, r3, r7
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e14d      	b.n	80039bc <UART_SetConfig+0x390>
 8003720:	231b      	movs	r3, #27
 8003722:	2220      	movs	r2, #32
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	2204      	movs	r2, #4
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e146      	b.n	80039bc <UART_SetConfig+0x390>
 800372e:	231b      	movs	r3, #27
 8003730:	2220      	movs	r2, #32
 8003732:	189b      	adds	r3, r3, r2
 8003734:	19db      	adds	r3, r3, r7
 8003736:	2208      	movs	r2, #8
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e13f      	b.n	80039bc <UART_SetConfig+0x390>
 800373c:	231b      	movs	r3, #27
 800373e:	2220      	movs	r2, #32
 8003740:	189b      	adds	r3, r3, r2
 8003742:	19db      	adds	r3, r3, r7
 8003744:	2210      	movs	r2, #16
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e138      	b.n	80039bc <UART_SetConfig+0x390>
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a8c      	ldr	r2, [pc, #560]	@ (8003980 <UART_SetConfig+0x354>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d131      	bne.n	80037b8 <UART_SetConfig+0x18c>
 8003754:	4b89      	ldr	r3, [pc, #548]	@ (800397c <UART_SetConfig+0x350>)
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	220c      	movs	r2, #12
 800375a:	4013      	ands	r3, r2
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d01d      	beq.n	800379c <UART_SetConfig+0x170>
 8003760:	d823      	bhi.n	80037aa <UART_SetConfig+0x17e>
 8003762:	2b08      	cmp	r3, #8
 8003764:	d00c      	beq.n	8003780 <UART_SetConfig+0x154>
 8003766:	d820      	bhi.n	80037aa <UART_SetConfig+0x17e>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <UART_SetConfig+0x146>
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00e      	beq.n	800378e <UART_SetConfig+0x162>
 8003770:	e01b      	b.n	80037aa <UART_SetConfig+0x17e>
 8003772:	231b      	movs	r3, #27
 8003774:	2220      	movs	r2, #32
 8003776:	189b      	adds	r3, r3, r2
 8003778:	19db      	adds	r3, r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e11d      	b.n	80039bc <UART_SetConfig+0x390>
 8003780:	231b      	movs	r3, #27
 8003782:	2220      	movs	r2, #32
 8003784:	189b      	adds	r3, r3, r2
 8003786:	19db      	adds	r3, r3, r7
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e116      	b.n	80039bc <UART_SetConfig+0x390>
 800378e:	231b      	movs	r3, #27
 8003790:	2220      	movs	r2, #32
 8003792:	189b      	adds	r3, r3, r2
 8003794:	19db      	adds	r3, r3, r7
 8003796:	2204      	movs	r2, #4
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e10f      	b.n	80039bc <UART_SetConfig+0x390>
 800379c:	231b      	movs	r3, #27
 800379e:	2220      	movs	r2, #32
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	2208      	movs	r2, #8
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e108      	b.n	80039bc <UART_SetConfig+0x390>
 80037aa:	231b      	movs	r3, #27
 80037ac:	2220      	movs	r2, #32
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	19db      	adds	r3, r3, r7
 80037b2:	2210      	movs	r2, #16
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e101      	b.n	80039bc <UART_SetConfig+0x390>
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <UART_SetConfig+0x358>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d131      	bne.n	8003826 <UART_SetConfig+0x1fa>
 80037c2:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <UART_SetConfig+0x350>)
 80037c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c6:	2230      	movs	r2, #48	@ 0x30
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b30      	cmp	r3, #48	@ 0x30
 80037cc:	d01d      	beq.n	800380a <UART_SetConfig+0x1de>
 80037ce:	d823      	bhi.n	8003818 <UART_SetConfig+0x1ec>
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d00c      	beq.n	80037ee <UART_SetConfig+0x1c2>
 80037d4:	d820      	bhi.n	8003818 <UART_SetConfig+0x1ec>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x1b4>
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d00e      	beq.n	80037fc <UART_SetConfig+0x1d0>
 80037de:	e01b      	b.n	8003818 <UART_SetConfig+0x1ec>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2220      	movs	r2, #32
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e0e6      	b.n	80039bc <UART_SetConfig+0x390>
 80037ee:	231b      	movs	r3, #27
 80037f0:	2220      	movs	r2, #32
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	19db      	adds	r3, r3, r7
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e0df      	b.n	80039bc <UART_SetConfig+0x390>
 80037fc:	231b      	movs	r3, #27
 80037fe:	2220      	movs	r2, #32
 8003800:	189b      	adds	r3, r3, r2
 8003802:	19db      	adds	r3, r3, r7
 8003804:	2204      	movs	r2, #4
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e0d8      	b.n	80039bc <UART_SetConfig+0x390>
 800380a:	231b      	movs	r3, #27
 800380c:	2220      	movs	r2, #32
 800380e:	189b      	adds	r3, r3, r2
 8003810:	19db      	adds	r3, r3, r7
 8003812:	2208      	movs	r2, #8
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e0d1      	b.n	80039bc <UART_SetConfig+0x390>
 8003818:	231b      	movs	r3, #27
 800381a:	2220      	movs	r2, #32
 800381c:	189b      	adds	r3, r3, r2
 800381e:	19db      	adds	r3, r3, r7
 8003820:	2210      	movs	r2, #16
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e0ca      	b.n	80039bc <UART_SetConfig+0x390>
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a57      	ldr	r2, [pc, #348]	@ (8003988 <UART_SetConfig+0x35c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d106      	bne.n	800383e <UART_SetConfig+0x212>
 8003830:	231b      	movs	r3, #27
 8003832:	2220      	movs	r2, #32
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e0be      	b.n	80039bc <UART_SetConfig+0x390>
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a52      	ldr	r2, [pc, #328]	@ (800398c <UART_SetConfig+0x360>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d106      	bne.n	8003856 <UART_SetConfig+0x22a>
 8003848:	231b      	movs	r3, #27
 800384a:	2220      	movs	r2, #32
 800384c:	189b      	adds	r3, r3, r2
 800384e:	19db      	adds	r3, r3, r7
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e0b2      	b.n	80039bc <UART_SetConfig+0x390>
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4d      	ldr	r2, [pc, #308]	@ (8003990 <UART_SetConfig+0x364>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d106      	bne.n	800386e <UART_SetConfig+0x242>
 8003860:	231b      	movs	r3, #27
 8003862:	2220      	movs	r2, #32
 8003864:	189b      	adds	r3, r3, r2
 8003866:	19db      	adds	r3, r3, r7
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e0a6      	b.n	80039bc <UART_SetConfig+0x390>
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a3e      	ldr	r2, [pc, #248]	@ (800396c <UART_SetConfig+0x340>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d13e      	bne.n	80038f6 <UART_SetConfig+0x2ca>
 8003878:	4b40      	ldr	r3, [pc, #256]	@ (800397c <UART_SetConfig+0x350>)
 800387a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800387c:	23c0      	movs	r3, #192	@ 0xc0
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4013      	ands	r3, r2
 8003882:	22c0      	movs	r2, #192	@ 0xc0
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	4293      	cmp	r3, r2
 8003888:	d027      	beq.n	80038da <UART_SetConfig+0x2ae>
 800388a:	22c0      	movs	r2, #192	@ 0xc0
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	4293      	cmp	r3, r2
 8003890:	d82a      	bhi.n	80038e8 <UART_SetConfig+0x2bc>
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	4293      	cmp	r3, r2
 8003898:	d011      	beq.n	80038be <UART_SetConfig+0x292>
 800389a:	2280      	movs	r2, #128	@ 0x80
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	4293      	cmp	r3, r2
 80038a0:	d822      	bhi.n	80038e8 <UART_SetConfig+0x2bc>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <UART_SetConfig+0x284>
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	00d2      	lsls	r2, r2, #3
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <UART_SetConfig+0x2a0>
 80038ae:	e01b      	b.n	80038e8 <UART_SetConfig+0x2bc>
 80038b0:	231b      	movs	r3, #27
 80038b2:	2220      	movs	r2, #32
 80038b4:	189b      	adds	r3, r3, r2
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e07e      	b.n	80039bc <UART_SetConfig+0x390>
 80038be:	231b      	movs	r3, #27
 80038c0:	2220      	movs	r2, #32
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	2202      	movs	r2, #2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e077      	b.n	80039bc <UART_SetConfig+0x390>
 80038cc:	231b      	movs	r3, #27
 80038ce:	2220      	movs	r2, #32
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	19db      	adds	r3, r3, r7
 80038d4:	2204      	movs	r2, #4
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e070      	b.n	80039bc <UART_SetConfig+0x390>
 80038da:	231b      	movs	r3, #27
 80038dc:	2220      	movs	r2, #32
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	2208      	movs	r2, #8
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e069      	b.n	80039bc <UART_SetConfig+0x390>
 80038e8:	231b      	movs	r3, #27
 80038ea:	2220      	movs	r2, #32
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	19db      	adds	r3, r3, r7
 80038f0:	2210      	movs	r2, #16
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e062      	b.n	80039bc <UART_SetConfig+0x390>
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003970 <UART_SetConfig+0x344>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d157      	bne.n	80039b0 <UART_SetConfig+0x384>
 8003900:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <UART_SetConfig+0x350>)
 8003902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003904:	23c0      	movs	r3, #192	@ 0xc0
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4013      	ands	r3, r2
 800390a:	22c0      	movs	r2, #192	@ 0xc0
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4293      	cmp	r3, r2
 8003910:	d040      	beq.n	8003994 <UART_SetConfig+0x368>
 8003912:	22c0      	movs	r2, #192	@ 0xc0
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	4293      	cmp	r3, r2
 8003918:	d843      	bhi.n	80039a2 <UART_SetConfig+0x376>
 800391a:	2280      	movs	r2, #128	@ 0x80
 800391c:	0092      	lsls	r2, r2, #2
 800391e:	4293      	cmp	r3, r2
 8003920:	d011      	beq.n	8003946 <UART_SetConfig+0x31a>
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	4293      	cmp	r3, r2
 8003928:	d83b      	bhi.n	80039a2 <UART_SetConfig+0x376>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <UART_SetConfig+0x30c>
 800392e:	2280      	movs	r2, #128	@ 0x80
 8003930:	0052      	lsls	r2, r2, #1
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <UART_SetConfig+0x328>
 8003936:	e034      	b.n	80039a2 <UART_SetConfig+0x376>
 8003938:	231b      	movs	r3, #27
 800393a:	2220      	movs	r2, #32
 800393c:	189b      	adds	r3, r3, r2
 800393e:	19db      	adds	r3, r3, r7
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e03a      	b.n	80039bc <UART_SetConfig+0x390>
 8003946:	231b      	movs	r3, #27
 8003948:	2220      	movs	r2, #32
 800394a:	189b      	adds	r3, r3, r2
 800394c:	19db      	adds	r3, r3, r7
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e033      	b.n	80039bc <UART_SetConfig+0x390>
 8003954:	231b      	movs	r3, #27
 8003956:	2220      	movs	r2, #32
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	2204      	movs	r2, #4
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e02c      	b.n	80039bc <UART_SetConfig+0x390>
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	cfff69f3 	.word	0xcfff69f3
 8003968:	ffffcfff 	.word	0xffffcfff
 800396c:	40008000 	.word	0x40008000
 8003970:	40008400 	.word	0x40008400
 8003974:	11fff4ff 	.word	0x11fff4ff
 8003978:	40013800 	.word	0x40013800
 800397c:	40021000 	.word	0x40021000
 8003980:	40004400 	.word	0x40004400
 8003984:	40004800 	.word	0x40004800
 8003988:	40004c00 	.word	0x40004c00
 800398c:	40005000 	.word	0x40005000
 8003990:	40013c00 	.word	0x40013c00
 8003994:	231b      	movs	r3, #27
 8003996:	2220      	movs	r2, #32
 8003998:	189b      	adds	r3, r3, r2
 800399a:	19db      	adds	r3, r3, r7
 800399c:	2208      	movs	r2, #8
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e00c      	b.n	80039bc <UART_SetConfig+0x390>
 80039a2:	231b      	movs	r3, #27
 80039a4:	2220      	movs	r2, #32
 80039a6:	189b      	adds	r3, r3, r2
 80039a8:	19db      	adds	r3, r3, r7
 80039aa:	2210      	movs	r2, #16
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e005      	b.n	80039bc <UART_SetConfig+0x390>
 80039b0:	231b      	movs	r3, #27
 80039b2:	2220      	movs	r2, #32
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	2210      	movs	r2, #16
 80039ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4ac1      	ldr	r2, [pc, #772]	@ (8003cc8 <UART_SetConfig+0x69c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d005      	beq.n	80039d2 <UART_SetConfig+0x3a6>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4ac0      	ldr	r2, [pc, #768]	@ (8003ccc <UART_SetConfig+0x6a0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d000      	beq.n	80039d2 <UART_SetConfig+0x3a6>
 80039d0:	e093      	b.n	8003afa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039d2:	231b      	movs	r3, #27
 80039d4:	2220      	movs	r2, #32
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	19db      	adds	r3, r3, r7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d015      	beq.n	8003a0c <UART_SetConfig+0x3e0>
 80039e0:	dc18      	bgt.n	8003a14 <UART_SetConfig+0x3e8>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d00d      	beq.n	8003a02 <UART_SetConfig+0x3d6>
 80039e6:	dc15      	bgt.n	8003a14 <UART_SetConfig+0x3e8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <UART_SetConfig+0x3c6>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d005      	beq.n	80039fc <UART_SetConfig+0x3d0>
 80039f0:	e010      	b.n	8003a14 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f2:	f7fe fea7 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80039f6:	0003      	movs	r3, r0
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039fa:	e014      	b.n	8003a26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4bb4      	ldr	r3, [pc, #720]	@ (8003cd0 <UART_SetConfig+0x6a4>)
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a00:	e011      	b.n	8003a26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe fe13 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8003a06:	0003      	movs	r3, r0
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a0a:	e00c      	b.n	8003a26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a12:	e008      	b.n	8003a26 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003a18:	231a      	movs	r3, #26
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	19db      	adds	r3, r3, r7
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
        break;
 8003a24:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d100      	bne.n	8003a2e <UART_SetConfig+0x402>
 8003a2c:	e135      	b.n	8003c9a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a32:	4ba8      	ldr	r3, [pc, #672]	@ (8003cd4 <UART_SetConfig+0x6a8>)
 8003a34:	0052      	lsls	r2, r2, #1
 8003a36:	5ad3      	ldrh	r3, [r2, r3]
 8003a38:	0019      	movs	r1, r3
 8003a3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a3c:	f7fc fb6e 	bl	800011c <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	0013      	movs	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d305      	bcc.n	8003a60 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d906      	bls.n	8003a6e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003a60:	231a      	movs	r3, #26
 8003a62:	2220      	movs	r2, #32
 8003a64:	189b      	adds	r3, r3, r2
 8003a66:	19db      	adds	r3, r3, r7
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e044      	b.n	8003af8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a7a:	4b96      	ldr	r3, [pc, #600]	@ (8003cd4 <UART_SetConfig+0x6a8>)
 8003a7c:	0052      	lsls	r2, r2, #1
 8003a7e:	5ad3      	ldrh	r3, [r2, r3]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	69b8      	ldr	r0, [r7, #24]
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	f7fc fcbb 	bl	8000408 <__aeabi_uldivmod>
 8003a92:	0002      	movs	r2, r0
 8003a94:	000b      	movs	r3, r1
 8003a96:	0e11      	lsrs	r1, r2, #24
 8003a98:	021d      	lsls	r5, r3, #8
 8003a9a:	430d      	orrs	r5, r1
 8003a9c:	0214      	lsls	r4, r2, #8
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68b8      	ldr	r0, [r7, #8]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	1900      	adds	r0, r0, r4
 8003ab0:	4169      	adcs	r1, r5
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f7fc fca2 	bl	8000408 <__aeabi_uldivmod>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	000b      	movs	r3, r1
 8003ac8:	0013      	movs	r3, r2
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ace:	23c0      	movs	r3, #192	@ 0xc0
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d309      	bcc.n	8003aea <UART_SetConfig+0x4be>
 8003ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	035b      	lsls	r3, r3, #13
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d204      	bcs.n	8003aea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e006      	b.n	8003af8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003aea:	231a      	movs	r3, #26
 8003aec:	2220      	movs	r2, #32
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	19db      	adds	r3, r3, r7
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003af6:	e0d0      	b.n	8003c9a <UART_SetConfig+0x66e>
 8003af8:	e0cf      	b.n	8003c9a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d000      	beq.n	8003b08 <UART_SetConfig+0x4dc>
 8003b06:	e070      	b.n	8003bea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003b08:	231b      	movs	r3, #27
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d015      	beq.n	8003b42 <UART_SetConfig+0x516>
 8003b16:	dc18      	bgt.n	8003b4a <UART_SetConfig+0x51e>
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d00d      	beq.n	8003b38 <UART_SetConfig+0x50c>
 8003b1c:	dc15      	bgt.n	8003b4a <UART_SetConfig+0x51e>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <UART_SetConfig+0x4fc>
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d005      	beq.n	8003b32 <UART_SetConfig+0x506>
 8003b26:	e010      	b.n	8003b4a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b28:	f7fe fe0c 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b30:	e014      	b.n	8003b5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b32:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <UART_SetConfig+0x6a4>)
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b36:	e011      	b.n	8003b5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b38:	f7fe fd78 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b40:	e00c      	b.n	8003b5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b48:	e008      	b.n	8003b5c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003b4e:	231a      	movs	r3, #26
 8003b50:	2220      	movs	r2, #32
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	19db      	adds	r3, r3, r7
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
        break;
 8003b5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d100      	bne.n	8003b64 <UART_SetConfig+0x538>
 8003b62:	e09a      	b.n	8003c9a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b68:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd4 <UART_SetConfig+0x6a8>)
 8003b6a:	0052      	lsls	r2, r2, #1
 8003b6c:	5ad3      	ldrh	r3, [r2, r3]
 8003b6e:	0019      	movs	r1, r3
 8003b70:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003b72:	f7fc fad3 	bl	800011c <__udivsi3>
 8003b76:	0003      	movs	r3, r0
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	18d2      	adds	r2, r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0019      	movs	r1, r3
 8003b88:	0010      	movs	r0, r2
 8003b8a:	f7fc fac7 	bl	800011c <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d921      	bls.n	8003bdc <UART_SetConfig+0x5b0>
 8003b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	025b      	lsls	r3, r3, #9
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d21c      	bcs.n	8003bdc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	200e      	movs	r0, #14
 8003ba8:	2420      	movs	r4, #32
 8003baa:	1903      	adds	r3, r0, r4
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	210f      	movs	r1, #15
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2207      	movs	r2, #7
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b299      	uxth	r1, r3
 8003bc0:	1903      	adds	r3, r0, r4
 8003bc2:	19db      	adds	r3, r3, r7
 8003bc4:	1902      	adds	r2, r0, r4
 8003bc6:	19d2      	adds	r2, r2, r7
 8003bc8:	8812      	ldrh	r2, [r2, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	1902      	adds	r2, r0, r4
 8003bd4:	19d2      	adds	r2, r2, r7
 8003bd6:	8812      	ldrh	r2, [r2, #0]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	e05e      	b.n	8003c9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003bdc:	231a      	movs	r3, #26
 8003bde:	2220      	movs	r2, #32
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	19db      	adds	r3, r3, r7
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e057      	b.n	8003c9a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bea:	231b      	movs	r3, #27
 8003bec:	2220      	movs	r2, #32
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	19db      	adds	r3, r3, r7
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d015      	beq.n	8003c24 <UART_SetConfig+0x5f8>
 8003bf8:	dc18      	bgt.n	8003c2c <UART_SetConfig+0x600>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d00d      	beq.n	8003c1a <UART_SetConfig+0x5ee>
 8003bfe:	dc15      	bgt.n	8003c2c <UART_SetConfig+0x600>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <UART_SetConfig+0x5de>
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d005      	beq.n	8003c14 <UART_SetConfig+0x5e8>
 8003c08:	e010      	b.n	8003c2c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0a:	f7fe fd9b 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c12:	e014      	b.n	8003c3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd0 <UART_SetConfig+0x6a4>)
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c18:	e011      	b.n	8003c3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fd07 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c22:	e00c      	b.n	8003c3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c2a:	e008      	b.n	8003c3e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003c30:	231a      	movs	r3, #26
 8003c32:	2220      	movs	r2, #32
 8003c34:	189b      	adds	r3, r3, r2
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
        break;
 8003c3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02a      	beq.n	8003c9a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c48:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <UART_SetConfig+0x6a8>)
 8003c4a:	0052      	lsls	r2, r2, #1
 8003c4c:	5ad3      	ldrh	r3, [r2, r3]
 8003c4e:	0019      	movs	r1, r3
 8003c50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c52:	f7fc fa63 	bl	800011c <__udivsi3>
 8003c56:	0003      	movs	r3, r0
 8003c58:	001a      	movs	r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	18d2      	adds	r2, r2, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f7fc fa57 	bl	800011c <__udivsi3>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	2b0f      	cmp	r3, #15
 8003c76:	d90a      	bls.n	8003c8e <UART_SetConfig+0x662>
 8003c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	025b      	lsls	r3, r3, #9
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d205      	bcs.n	8003c8e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e005      	b.n	8003c9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003c8e:	231a      	movs	r3, #26
 8003c90:	2220      	movs	r2, #32
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	19db      	adds	r3, r3, r7
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	226a      	movs	r2, #106	@ 0x6a
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2268      	movs	r2, #104	@ 0x68
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003cb6:	231a      	movs	r3, #26
 8003cb8:	2220      	movs	r2, #32
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	19db      	adds	r3, r3, r7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b010      	add	sp, #64	@ 0x40
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc8:	40008000 	.word	0x40008000
 8003ccc:	40008400 	.word	0x40008400
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	0800561c 	.word	0x0800561c

08003cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003e1c <UART_AdvFeatureConfig+0x144>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a43      	ldr	r2, [pc, #268]	@ (8003e20 <UART_AdvFeatureConfig+0x148>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a3b      	ldr	r2, [pc, #236]	@ (8003e24 <UART_AdvFeatureConfig+0x14c>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <UART_AdvFeatureConfig+0x150>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <UART_AdvFeatureConfig+0x154>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	2220      	movs	r2, #32
 8003d90:	4013      	ands	r3, r2
 8003d92:	d00b      	beq.n	8003dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <UART_AdvFeatureConfig+0x158>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	2240      	movs	r2, #64	@ 0x40
 8003db2:	4013      	ands	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <UART_AdvFeatureConfig+0x15c>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dd2:	2380      	movs	r3, #128	@ 0x80
 8003dd4:	035b      	lsls	r3, r3, #13
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10b      	bne.n	8003df2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <UART_AdvFeatureConfig+0x160>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	2280      	movs	r2, #128	@ 0x80
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a0e      	ldr	r2, [pc, #56]	@ (8003e3c <UART_AdvFeatureConfig+0x164>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }
}
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	ffff7fff 	.word	0xffff7fff
 8003e20:	fffdffff 	.word	0xfffdffff
 8003e24:	fffeffff 	.word	0xfffeffff
 8003e28:	fffbffff 	.word	0xfffbffff
 8003e2c:	ffffefff 	.word	0xffffefff
 8003e30:	ffffdfff 	.word	0xffffdfff
 8003e34:	ffefffff 	.word	0xffefffff
 8003e38:	ff9fffff 	.word	0xff9fffff
 8003e3c:	fff7ffff 	.word	0xfff7ffff

08003e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b092      	sub	sp, #72	@ 0x48
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2290      	movs	r2, #144	@ 0x90
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e50:	f7fd fa30 	bl	80012b4 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d12d      	bne.n	8003ec2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	0391      	lsls	r1, r2, #14
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4a47      	ldr	r2, [pc, #284]	@ (8003f8c <UART_CheckIdleState+0x14c>)
 8003e70:	9200      	str	r2, [sp, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f000 f88e 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d022      	beq.n	8003ec2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e86:	2301      	movs	r3, #1
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2180      	movs	r1, #128	@ 0x80
 8003e9e:	438a      	bics	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea8:	f383 8810 	msr	PRIMASK, r3
}
 8003eac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2288      	movs	r2, #136	@ 0x88
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2284      	movs	r2, #132	@ 0x84
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e060      	b.n	8003f84 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2204      	movs	r2, #4
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d146      	bne.n	8003f5e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed2:	2280      	movs	r2, #128	@ 0x80
 8003ed4:	03d1      	lsls	r1, r2, #15
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <UART_CheckIdleState+0x14c>)
 8003eda:	9200      	str	r2, [sp, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f000 f859 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d03b      	beq.n	8003f5e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4922      	ldr	r1, [pc, #136]	@ (8003f90 <UART_CheckIdleState+0x150>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f18:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f383 8810 	msr	PRIMASK, r3
}
 8003f48:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	228c      	movs	r2, #140	@ 0x8c
 8003f4e:	2120      	movs	r1, #32
 8003f50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2284      	movs	r2, #132	@ 0x84
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e012      	b.n	8003f84 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2288      	movs	r2, #136	@ 0x88
 8003f62:	2120      	movs	r1, #32
 8003f64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	228c      	movs	r2, #140	@ 0x8c
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2284      	movs	r2, #132	@ 0x84
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b010      	add	sp, #64	@ 0x40
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	01ffffff 	.word	0x01ffffff
 8003f90:	fffffedf 	.word	0xfffffedf

08003f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	e051      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	d04e      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7fd f982 	bl	80012b4 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e051      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d03b      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b80      	cmp	r3, #128	@ 0x80
 8003fd6:	d038      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d035      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d111      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f83c 	bl	8004074 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2290      	movs	r2, #144	@ 0x90
 8004000:	2108      	movs	r1, #8
 8004002:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2284      	movs	r2, #132	@ 0x84
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e02c      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	2380      	movs	r3, #128	@ 0x80
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	401a      	ands	r2, r3
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	429a      	cmp	r2, r3
 8004022:	d112      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2280      	movs	r2, #128	@ 0x80
 800402a:	0112      	lsls	r2, r2, #4
 800402c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 f81f 	bl	8004074 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2290      	movs	r2, #144	@ 0x90
 800403a:	2120      	movs	r1, #32
 800403c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2284      	movs	r2, #132	@ 0x84
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	425a      	negs	r2, r3
 800405a:	4153      	adcs	r3, r2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	001a      	movs	r2, r3
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d09e      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08e      	sub	sp, #56	@ 0x38
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	617b      	str	r3, [r7, #20]
  return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4926      	ldr	r1, [pc, #152]	@ (8004138 <UART_EndRxTransfer+0xc4>)
 800409e:	400a      	ands	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	623b      	str	r3, [r7, #32]
  return(result);
 80040b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b8:	2301      	movs	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	491b      	ldr	r1, [pc, #108]	@ (800413c <UART_EndRxTransfer+0xc8>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d118      	bne.n	800411a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f2:	2301      	movs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2110      	movs	r1, #16
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	228c      	movs	r2, #140	@ 0x8c
 800411e:	2120      	movs	r1, #32
 8004120:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b00e      	add	sp, #56	@ 0x38
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	fffffedf 	.word	0xfffffedf
 800413c:	effffffe 	.word	0xeffffffe

08004140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	225e      	movs	r2, #94	@ 0x5e
 8004152:	2100      	movs	r1, #0
 8004154:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2256      	movs	r2, #86	@ 0x56
 800415a:	2100      	movs	r1, #0
 800415c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fa4f 	bl	8003604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	60bb      	str	r3, [r7, #8]
  return(result);
 800417c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	2301      	movs	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2140      	movs	r1, #64	@ 0x40
 8004198:	438a      	bics	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2288      	movs	r2, #136	@ 0x88
 80041ac:	2120      	movs	r1, #32
 80041ae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fa1b 	bl	80035f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b006      	add	sp, #24
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b002      	add	sp, #8
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2284      	movs	r2, #132	@ 0x84
 8004204:	5c9b      	ldrb	r3, [r3, r2]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_UARTEx_DisableFifoMode+0x16>
 800420a:	2302      	movs	r3, #2
 800420c:	e027      	b.n	800425e <HAL_UARTEx_DisableFifoMode+0x66>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2284      	movs	r2, #132	@ 0x84
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2288      	movs	r2, #136	@ 0x88
 800421a:	2124      	movs	r1, #36	@ 0x24
 800421c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	438a      	bics	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_UARTEx_DisableFifoMode+0x70>)
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2288      	movs	r2, #136	@ 0x88
 8004250:	2120      	movs	r1, #32
 8004252:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2284      	movs	r2, #132	@ 0x84
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	dfffffff 	.word	0xdfffffff

0800426c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2284      	movs	r2, #132	@ 0x84
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e02e      	b.n	80042e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2284      	movs	r2, #132	@ 0x84
 8004288:	2101      	movs	r1, #1
 800428a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2288      	movs	r2, #136	@ 0x88
 8004290:	2124      	movs	r1, #36	@ 0x24
 8004292:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2101      	movs	r1, #1
 80042a8:	438a      	bics	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	08d9      	lsrs	r1, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 f854 	bl	8004370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2288      	movs	r2, #136	@ 0x88
 80042d4:	2120      	movs	r1, #32
 80042d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2284      	movs	r2, #132	@ 0x84
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2284      	movs	r2, #132	@ 0x84
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004300:	2302      	movs	r3, #2
 8004302:	e02f      	b.n	8004364 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2284      	movs	r2, #132	@ 0x84
 8004308:	2101      	movs	r1, #1
 800430a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2288      	movs	r2, #136	@ 0x88
 8004310:	2124      	movs	r1, #36	@ 0x24
 8004312:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a0e      	ldr	r2, [pc, #56]	@ (800436c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004334:	4013      	ands	r3, r2
 8004336:	0019      	movs	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 f813 	bl	8004370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2288      	movs	r2, #136	@ 0x88
 8004356:	2120      	movs	r1, #32
 8004358:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2284      	movs	r2, #132	@ 0x84
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	f1ffffff 	.word	0xf1ffffff

08004370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	226a      	movs	r2, #106	@ 0x6a
 8004384:	2101      	movs	r1, #1
 8004386:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2268      	movs	r2, #104	@ 0x68
 800438c:	2101      	movs	r1, #1
 800438e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004390:	e043      	b.n	800441a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004392:	260f      	movs	r6, #15
 8004394:	19bb      	adds	r3, r7, r6
 8004396:	2208      	movs	r2, #8
 8004398:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800439a:	200e      	movs	r0, #14
 800439c:	183b      	adds	r3, r7, r0
 800439e:	2208      	movs	r2, #8
 80043a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	0e5b      	lsrs	r3, r3, #25
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	240d      	movs	r4, #13
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	2107      	movs	r1, #7
 80043b2:	400a      	ands	r2, r1
 80043b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	0f5b      	lsrs	r3, r3, #29
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	250c      	movs	r5, #12
 80043c2:	197b      	adds	r3, r7, r5
 80043c4:	2107      	movs	r1, #7
 80043c6:	400a      	ands	r2, r1
 80043c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ca:	183b      	adds	r3, r7, r0
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	197a      	adds	r2, r7, r5
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	4914      	ldr	r1, [pc, #80]	@ (8004424 <UARTEx_SetNbDataToProcess+0xb4>)
 80043d4:	5c8a      	ldrb	r2, [r1, r2]
 80043d6:	435a      	muls	r2, r3
 80043d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80043da:	197b      	adds	r3, r7, r5
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	4a12      	ldr	r2, [pc, #72]	@ (8004428 <UARTEx_SetNbDataToProcess+0xb8>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043e2:	0019      	movs	r1, r3
 80043e4:	f7fb ff24 	bl	8000230 <__divsi3>
 80043e8:	0003      	movs	r3, r0
 80043ea:	b299      	uxth	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	226a      	movs	r2, #106	@ 0x6a
 80043f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043f2:	19bb      	adds	r3, r7, r6
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	193a      	adds	r2, r7, r4
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	490a      	ldr	r1, [pc, #40]	@ (8004424 <UARTEx_SetNbDataToProcess+0xb4>)
 80043fc:	5c8a      	ldrb	r2, [r1, r2]
 80043fe:	435a      	muls	r2, r3
 8004400:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004402:	193b      	adds	r3, r7, r4
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4a08      	ldr	r2, [pc, #32]	@ (8004428 <UARTEx_SetNbDataToProcess+0xb8>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800440a:	0019      	movs	r1, r3
 800440c:	f7fb ff10 	bl	8000230 <__divsi3>
 8004410:	0003      	movs	r3, r0
 8004412:	b299      	uxth	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2268      	movs	r2, #104	@ 0x68
 8004418:	5299      	strh	r1, [r3, r2]
}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b005      	add	sp, #20
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	08005634 	.word	0x08005634
 8004428:	0800563c 	.word	0x0800563c

0800442c <std>:
 800442c:	2300      	movs	r3, #0
 800442e:	b510      	push	{r4, lr}
 8004430:	0004      	movs	r4, r0
 8004432:	6003      	str	r3, [r0, #0]
 8004434:	6043      	str	r3, [r0, #4]
 8004436:	6083      	str	r3, [r0, #8]
 8004438:	8181      	strh	r1, [r0, #12]
 800443a:	6643      	str	r3, [r0, #100]	@ 0x64
 800443c:	81c2      	strh	r2, [r0, #14]
 800443e:	6103      	str	r3, [r0, #16]
 8004440:	6143      	str	r3, [r0, #20]
 8004442:	6183      	str	r3, [r0, #24]
 8004444:	0019      	movs	r1, r3
 8004446:	2208      	movs	r2, #8
 8004448:	305c      	adds	r0, #92	@ 0x5c
 800444a:	f000 fa0f 	bl	800486c <memset>
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <std+0x50>)
 8004450:	6224      	str	r4, [r4, #32]
 8004452:	6263      	str	r3, [r4, #36]	@ 0x24
 8004454:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <std+0x54>)
 8004456:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <std+0x58>)
 800445a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <std+0x5c>)
 800445e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004460:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <std+0x60>)
 8004462:	429c      	cmp	r4, r3
 8004464:	d005      	beq.n	8004472 <std+0x46>
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <std+0x64>)
 8004468:	429c      	cmp	r4, r3
 800446a:	d002      	beq.n	8004472 <std+0x46>
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <std+0x68>)
 800446e:	429c      	cmp	r4, r3
 8004470:	d103      	bne.n	800447a <std+0x4e>
 8004472:	0020      	movs	r0, r4
 8004474:	3058      	adds	r0, #88	@ 0x58
 8004476:	f000 fa79 	bl	800496c <__retarget_lock_init_recursive>
 800447a:	bd10      	pop	{r4, pc}
 800447c:	08004695 	.word	0x08004695
 8004480:	080046bd 	.word	0x080046bd
 8004484:	080046f5 	.word	0x080046f5
 8004488:	08004721 	.word	0x08004721
 800448c:	20000260 	.word	0x20000260
 8004490:	200002c8 	.word	0x200002c8
 8004494:	20000330 	.word	0x20000330

08004498 <stdio_exit_handler>:
 8004498:	b510      	push	{r4, lr}
 800449a:	4a03      	ldr	r2, [pc, #12]	@ (80044a8 <stdio_exit_handler+0x10>)
 800449c:	4903      	ldr	r1, [pc, #12]	@ (80044ac <stdio_exit_handler+0x14>)
 800449e:	4804      	ldr	r0, [pc, #16]	@ (80044b0 <stdio_exit_handler+0x18>)
 80044a0:	f000 f86c 	bl	800457c <_fwalk_sglue>
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	20000010 	.word	0x20000010
 80044ac:	080051fd 	.word	0x080051fd
 80044b0:	20000020 	.word	0x20000020

080044b4 <cleanup_stdio>:
 80044b4:	6841      	ldr	r1, [r0, #4]
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <cleanup_stdio+0x30>)
 80044b8:	b510      	push	{r4, lr}
 80044ba:	0004      	movs	r4, r0
 80044bc:	4299      	cmp	r1, r3
 80044be:	d001      	beq.n	80044c4 <cleanup_stdio+0x10>
 80044c0:	f000 fe9c 	bl	80051fc <_fflush_r>
 80044c4:	68a1      	ldr	r1, [r4, #8]
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <cleanup_stdio+0x34>)
 80044c8:	4299      	cmp	r1, r3
 80044ca:	d002      	beq.n	80044d2 <cleanup_stdio+0x1e>
 80044cc:	0020      	movs	r0, r4
 80044ce:	f000 fe95 	bl	80051fc <_fflush_r>
 80044d2:	68e1      	ldr	r1, [r4, #12]
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <cleanup_stdio+0x38>)
 80044d6:	4299      	cmp	r1, r3
 80044d8:	d002      	beq.n	80044e0 <cleanup_stdio+0x2c>
 80044da:	0020      	movs	r0, r4
 80044dc:	f000 fe8e 	bl	80051fc <_fflush_r>
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	20000260 	.word	0x20000260
 80044e8:	200002c8 	.word	0x200002c8
 80044ec:	20000330 	.word	0x20000330

080044f0 <global_stdio_init.part.0>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	4b09      	ldr	r3, [pc, #36]	@ (8004518 <global_stdio_init.part.0+0x28>)
 80044f4:	4a09      	ldr	r2, [pc, #36]	@ (800451c <global_stdio_init.part.0+0x2c>)
 80044f6:	2104      	movs	r1, #4
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	4809      	ldr	r0, [pc, #36]	@ (8004520 <global_stdio_init.part.0+0x30>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	f7ff ff95 	bl	800442c <std>
 8004502:	2201      	movs	r2, #1
 8004504:	2109      	movs	r1, #9
 8004506:	4807      	ldr	r0, [pc, #28]	@ (8004524 <global_stdio_init.part.0+0x34>)
 8004508:	f7ff ff90 	bl	800442c <std>
 800450c:	2202      	movs	r2, #2
 800450e:	2112      	movs	r1, #18
 8004510:	4805      	ldr	r0, [pc, #20]	@ (8004528 <global_stdio_init.part.0+0x38>)
 8004512:	f7ff ff8b 	bl	800442c <std>
 8004516:	bd10      	pop	{r4, pc}
 8004518:	20000398 	.word	0x20000398
 800451c:	08004499 	.word	0x08004499
 8004520:	20000260 	.word	0x20000260
 8004524:	200002c8 	.word	0x200002c8
 8004528:	20000330 	.word	0x20000330

0800452c <__sfp_lock_acquire>:
 800452c:	b510      	push	{r4, lr}
 800452e:	4802      	ldr	r0, [pc, #8]	@ (8004538 <__sfp_lock_acquire+0xc>)
 8004530:	f000 fa1d 	bl	800496e <__retarget_lock_acquire_recursive>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	200003a1 	.word	0x200003a1

0800453c <__sfp_lock_release>:
 800453c:	b510      	push	{r4, lr}
 800453e:	4802      	ldr	r0, [pc, #8]	@ (8004548 <__sfp_lock_release+0xc>)
 8004540:	f000 fa16 	bl	8004970 <__retarget_lock_release_recursive>
 8004544:	bd10      	pop	{r4, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	200003a1 	.word	0x200003a1

0800454c <__sinit>:
 800454c:	b510      	push	{r4, lr}
 800454e:	0004      	movs	r4, r0
 8004550:	f7ff ffec 	bl	800452c <__sfp_lock_acquire>
 8004554:	6a23      	ldr	r3, [r4, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <__sinit+0x14>
 800455a:	f7ff ffef 	bl	800453c <__sfp_lock_release>
 800455e:	bd10      	pop	{r4, pc}
 8004560:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__sinit+0x28>)
 8004562:	6223      	str	r3, [r4, #32]
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__sinit+0x2c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f6      	bne.n	800455a <__sinit+0xe>
 800456c:	f7ff ffc0 	bl	80044f0 <global_stdio_init.part.0>
 8004570:	e7f3      	b.n	800455a <__sinit+0xe>
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	080044b5 	.word	0x080044b5
 8004578:	20000398 	.word	0x20000398

0800457c <_fwalk_sglue>:
 800457c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457e:	0014      	movs	r4, r2
 8004580:	2600      	movs	r6, #0
 8004582:	9000      	str	r0, [sp, #0]
 8004584:	9101      	str	r1, [sp, #4]
 8004586:	68a5      	ldr	r5, [r4, #8]
 8004588:	6867      	ldr	r7, [r4, #4]
 800458a:	3f01      	subs	r7, #1
 800458c:	d504      	bpl.n	8004598 <_fwalk_sglue+0x1c>
 800458e:	6824      	ldr	r4, [r4, #0]
 8004590:	2c00      	cmp	r4, #0
 8004592:	d1f8      	bne.n	8004586 <_fwalk_sglue+0xa>
 8004594:	0030      	movs	r0, r6
 8004596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004598:	89ab      	ldrh	r3, [r5, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d908      	bls.n	80045b0 <_fwalk_sglue+0x34>
 800459e:	220e      	movs	r2, #14
 80045a0:	5eab      	ldrsh	r3, [r5, r2]
 80045a2:	3301      	adds	r3, #1
 80045a4:	d004      	beq.n	80045b0 <_fwalk_sglue+0x34>
 80045a6:	0029      	movs	r1, r5
 80045a8:	9800      	ldr	r0, [sp, #0]
 80045aa:	9b01      	ldr	r3, [sp, #4]
 80045ac:	4798      	blx	r3
 80045ae:	4306      	orrs	r6, r0
 80045b0:	3568      	adds	r5, #104	@ 0x68
 80045b2:	e7ea      	b.n	800458a <_fwalk_sglue+0xe>

080045b4 <iprintf>:
 80045b4:	b40f      	push	{r0, r1, r2, r3}
 80045b6:	b507      	push	{r0, r1, r2, lr}
 80045b8:	4905      	ldr	r1, [pc, #20]	@ (80045d0 <iprintf+0x1c>)
 80045ba:	ab04      	add	r3, sp, #16
 80045bc:	6808      	ldr	r0, [r1, #0]
 80045be:	cb04      	ldmia	r3!, {r2}
 80045c0:	6881      	ldr	r1, [r0, #8]
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	f000 fafa 	bl	8004bbc <_vfiprintf_r>
 80045c8:	b003      	add	sp, #12
 80045ca:	bc08      	pop	{r3}
 80045cc:	b004      	add	sp, #16
 80045ce:	4718      	bx	r3
 80045d0:	2000001c 	.word	0x2000001c

080045d4 <_puts_r>:
 80045d4:	6a03      	ldr	r3, [r0, #32]
 80045d6:	b570      	push	{r4, r5, r6, lr}
 80045d8:	0005      	movs	r5, r0
 80045da:	000e      	movs	r6, r1
 80045dc:	6884      	ldr	r4, [r0, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <_puts_r+0x12>
 80045e2:	f7ff ffb3 	bl	800454c <__sinit>
 80045e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045e8:	07db      	lsls	r3, r3, #31
 80045ea:	d405      	bmi.n	80045f8 <_puts_r+0x24>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	059b      	lsls	r3, r3, #22
 80045f0:	d402      	bmi.n	80045f8 <_puts_r+0x24>
 80045f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f4:	f000 f9bb 	bl	800496e <__retarget_lock_acquire_recursive>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	071b      	lsls	r3, r3, #28
 80045fc:	d502      	bpl.n	8004604 <_puts_r+0x30>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11f      	bne.n	8004644 <_puts_r+0x70>
 8004604:	0021      	movs	r1, r4
 8004606:	0028      	movs	r0, r5
 8004608:	f000 f8d2 	bl	80047b0 <__swsetup_r>
 800460c:	2800      	cmp	r0, #0
 800460e:	d019      	beq.n	8004644 <_puts_r+0x70>
 8004610:	2501      	movs	r5, #1
 8004612:	426d      	negs	r5, r5
 8004614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004616:	07db      	lsls	r3, r3, #31
 8004618:	d405      	bmi.n	8004626 <_puts_r+0x52>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d402      	bmi.n	8004626 <_puts_r+0x52>
 8004620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004622:	f000 f9a5 	bl	8004970 <__retarget_lock_release_recursive>
 8004626:	0028      	movs	r0, r5
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	3601      	adds	r6, #1
 800462c:	60a3      	str	r3, [r4, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da04      	bge.n	800463c <_puts_r+0x68>
 8004632:	69a2      	ldr	r2, [r4, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	dc16      	bgt.n	8004666 <_puts_r+0x92>
 8004638:	290a      	cmp	r1, #10
 800463a:	d014      	beq.n	8004666 <_puts_r+0x92>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	7019      	strb	r1, [r3, #0]
 8004644:	68a3      	ldr	r3, [r4, #8]
 8004646:	7831      	ldrb	r1, [r6, #0]
 8004648:	3b01      	subs	r3, #1
 800464a:	2900      	cmp	r1, #0
 800464c:	d1ed      	bne.n	800462a <_puts_r+0x56>
 800464e:	60a3      	str	r3, [r4, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	da0f      	bge.n	8004674 <_puts_r+0xa0>
 8004654:	0022      	movs	r2, r4
 8004656:	0028      	movs	r0, r5
 8004658:	310a      	adds	r1, #10
 800465a:	f000 f867 	bl	800472c <__swbuf_r>
 800465e:	3001      	adds	r0, #1
 8004660:	d0d6      	beq.n	8004610 <_puts_r+0x3c>
 8004662:	250a      	movs	r5, #10
 8004664:	e7d6      	b.n	8004614 <_puts_r+0x40>
 8004666:	0022      	movs	r2, r4
 8004668:	0028      	movs	r0, r5
 800466a:	f000 f85f 	bl	800472c <__swbuf_r>
 800466e:	3001      	adds	r0, #1
 8004670:	d1e8      	bne.n	8004644 <_puts_r+0x70>
 8004672:	e7cd      	b.n	8004610 <_puts_r+0x3c>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	220a      	movs	r2, #10
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e7f0      	b.n	8004662 <_puts_r+0x8e>

08004680 <puts>:
 8004680:	b510      	push	{r4, lr}
 8004682:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <puts+0x10>)
 8004684:	0001      	movs	r1, r0
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f7ff ffa4 	bl	80045d4 <_puts_r>
 800468c:	bd10      	pop	{r4, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	2000001c 	.word	0x2000001c

08004694 <__sread>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	000c      	movs	r4, r1
 8004698:	250e      	movs	r5, #14
 800469a:	5f49      	ldrsh	r1, [r1, r5]
 800469c:	f000 f914 	bl	80048c8 <_read_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	db03      	blt.n	80046ac <__sread+0x18>
 80046a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80046a6:	181b      	adds	r3, r3, r0
 80046a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	4a02      	ldr	r2, [pc, #8]	@ (80046b8 <__sread+0x24>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	e7f9      	b.n	80046aa <__sread+0x16>
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	ffffefff 	.word	0xffffefff

080046bc <__swrite>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	001f      	movs	r7, r3
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	0005      	movs	r5, r0
 80046c4:	000c      	movs	r4, r1
 80046c6:	0016      	movs	r6, r2
 80046c8:	05db      	lsls	r3, r3, #23
 80046ca:	d505      	bpl.n	80046d8 <__swrite+0x1c>
 80046cc:	230e      	movs	r3, #14
 80046ce:	5ec9      	ldrsh	r1, [r1, r3]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2302      	movs	r3, #2
 80046d4:	f000 f8e4 	bl	80048a0 <_lseek_r>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <__swrite+0x34>)
 80046dc:	0028      	movs	r0, r5
 80046de:	4013      	ands	r3, r2
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	0032      	movs	r2, r6
 80046e4:	230e      	movs	r3, #14
 80046e6:	5ee1      	ldrsh	r1, [r4, r3]
 80046e8:	003b      	movs	r3, r7
 80046ea:	f000 f901 	bl	80048f0 <_write_r>
 80046ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f0:	ffffefff 	.word	0xffffefff

080046f4 <__sseek>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	000c      	movs	r4, r1
 80046f8:	250e      	movs	r5, #14
 80046fa:	5f49      	ldrsh	r1, [r1, r5]
 80046fc:	f000 f8d0 	bl	80048a0 <_lseek_r>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	1c42      	adds	r2, r0, #1
 8004704:	d103      	bne.n	800470e <__sseek+0x1a>
 8004706:	4a05      	ldr	r2, [pc, #20]	@ (800471c <__sseek+0x28>)
 8004708:	4013      	ands	r3, r2
 800470a:	81a3      	strh	r3, [r4, #12]
 800470c:	bd70      	pop	{r4, r5, r6, pc}
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	0152      	lsls	r2, r2, #5
 8004712:	4313      	orrs	r3, r2
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	6560      	str	r0, [r4, #84]	@ 0x54
 8004718:	e7f8      	b.n	800470c <__sseek+0x18>
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	ffffefff 	.word	0xffffefff

08004720 <__sclose>:
 8004720:	b510      	push	{r4, lr}
 8004722:	230e      	movs	r3, #14
 8004724:	5ec9      	ldrsh	r1, [r1, r3]
 8004726:	f000 f8a9 	bl	800487c <_close_r>
 800472a:	bd10      	pop	{r4, pc}

0800472c <__swbuf_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	0006      	movs	r6, r0
 8004730:	000d      	movs	r5, r1
 8004732:	0014      	movs	r4, r2
 8004734:	2800      	cmp	r0, #0
 8004736:	d004      	beq.n	8004742 <__swbuf_r+0x16>
 8004738:	6a03      	ldr	r3, [r0, #32]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <__swbuf_r+0x16>
 800473e:	f7ff ff05 	bl	800454c <__sinit>
 8004742:	69a3      	ldr	r3, [r4, #24]
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	d502      	bpl.n	8004752 <__swbuf_r+0x26>
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <__swbuf_r+0x3a>
 8004752:	0021      	movs	r1, r4
 8004754:	0030      	movs	r0, r6
 8004756:	f000 f82b 	bl	80047b0 <__swsetup_r>
 800475a:	2800      	cmp	r0, #0
 800475c:	d003      	beq.n	8004766 <__swbuf_r+0x3a>
 800475e:	2501      	movs	r5, #1
 8004760:	426d      	negs	r5, r5
 8004762:	0028      	movs	r0, r5
 8004764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	b2ef      	uxtb	r7, r5
 800476c:	1ac0      	subs	r0, r0, r3
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	b2ed      	uxtb	r5, r5
 8004772:	4283      	cmp	r3, r0
 8004774:	dc05      	bgt.n	8004782 <__swbuf_r+0x56>
 8004776:	0021      	movs	r1, r4
 8004778:	0030      	movs	r0, r6
 800477a:	f000 fd3f 	bl	80051fc <_fflush_r>
 800477e:	2800      	cmp	r0, #0
 8004780:	d1ed      	bne.n	800475e <__swbuf_r+0x32>
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	3001      	adds	r0, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	701f      	strb	r7, [r3, #0]
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	4283      	cmp	r3, r0
 8004796:	d004      	beq.n	80047a2 <__swbuf_r+0x76>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	07db      	lsls	r3, r3, #31
 800479c:	d5e1      	bpl.n	8004762 <__swbuf_r+0x36>
 800479e:	2d0a      	cmp	r5, #10
 80047a0:	d1df      	bne.n	8004762 <__swbuf_r+0x36>
 80047a2:	0021      	movs	r1, r4
 80047a4:	0030      	movs	r0, r6
 80047a6:	f000 fd29 	bl	80051fc <_fflush_r>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0d9      	beq.n	8004762 <__swbuf_r+0x36>
 80047ae:	e7d6      	b.n	800475e <__swbuf_r+0x32>

080047b0 <__swsetup_r>:
 80047b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004868 <__swsetup_r+0xb8>)
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	0005      	movs	r5, r0
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	000c      	movs	r4, r1
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d004      	beq.n	80047c8 <__swsetup_r+0x18>
 80047be:	6a03      	ldr	r3, [r0, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <__swsetup_r+0x18>
 80047c4:	f7ff fec2 	bl	800454c <__sinit>
 80047c8:	230c      	movs	r3, #12
 80047ca:	5ee2      	ldrsh	r2, [r4, r3]
 80047cc:	0713      	lsls	r3, r2, #28
 80047ce:	d423      	bmi.n	8004818 <__swsetup_r+0x68>
 80047d0:	06d3      	lsls	r3, r2, #27
 80047d2:	d407      	bmi.n	80047e4 <__swsetup_r+0x34>
 80047d4:	2309      	movs	r3, #9
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	2340      	movs	r3, #64	@ 0x40
 80047da:	2001      	movs	r0, #1
 80047dc:	4313      	orrs	r3, r2
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	4240      	negs	r0, r0
 80047e2:	e03a      	b.n	800485a <__swsetup_r+0xaa>
 80047e4:	0752      	lsls	r2, r2, #29
 80047e6:	d513      	bpl.n	8004810 <__swsetup_r+0x60>
 80047e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ea:	2900      	cmp	r1, #0
 80047ec:	d008      	beq.n	8004800 <__swsetup_r+0x50>
 80047ee:	0023      	movs	r3, r4
 80047f0:	3344      	adds	r3, #68	@ 0x44
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d002      	beq.n	80047fc <__swsetup_r+0x4c>
 80047f6:	0028      	movs	r0, r5
 80047f8:	f000 f8bc 	bl	8004974 <_free_r>
 80047fc:	2300      	movs	r3, #0
 80047fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004800:	2224      	movs	r2, #36	@ 0x24
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	4393      	bics	r3, r2
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	2300      	movs	r3, #0
 800480a:	6063      	str	r3, [r4, #4]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	2308      	movs	r3, #8
 8004812:	89a2      	ldrh	r2, [r4, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <__swsetup_r+0x86>
 800481e:	21a0      	movs	r1, #160	@ 0xa0
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	0089      	lsls	r1, r1, #2
 8004826:	0092      	lsls	r2, r2, #2
 8004828:	400b      	ands	r3, r1
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <__swsetup_r+0x86>
 800482e:	0021      	movs	r1, r4
 8004830:	0028      	movs	r0, r5
 8004832:	f000 fd39 	bl	80052a8 <__smakebuf_r>
 8004836:	230c      	movs	r3, #12
 8004838:	5ee2      	ldrsh	r2, [r4, r3]
 800483a:	2101      	movs	r1, #1
 800483c:	0013      	movs	r3, r2
 800483e:	400b      	ands	r3, r1
 8004840:	420a      	tst	r2, r1
 8004842:	d00b      	beq.n	800485c <__swsetup_r+0xac>
 8004844:	2300      	movs	r3, #0
 8004846:	60a3      	str	r3, [r4, #8]
 8004848:	6963      	ldr	r3, [r4, #20]
 800484a:	425b      	negs	r3, r3
 800484c:	61a3      	str	r3, [r4, #24]
 800484e:	2000      	movs	r0, #0
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	4283      	cmp	r3, r0
 8004854:	d101      	bne.n	800485a <__swsetup_r+0xaa>
 8004856:	0613      	lsls	r3, r2, #24
 8004858:	d4be      	bmi.n	80047d8 <__swsetup_r+0x28>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	0791      	lsls	r1, r2, #30
 800485e:	d400      	bmi.n	8004862 <__swsetup_r+0xb2>
 8004860:	6963      	ldr	r3, [r4, #20]
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	e7f3      	b.n	800484e <__swsetup_r+0x9e>
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	2000001c 	.word	0x2000001c

0800486c <memset>:
 800486c:	0003      	movs	r3, r0
 800486e:	1882      	adds	r2, r0, r2
 8004870:	4293      	cmp	r3, r2
 8004872:	d100      	bne.n	8004876 <memset+0xa>
 8004874:	4770      	bx	lr
 8004876:	7019      	strb	r1, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	e7f9      	b.n	8004870 <memset+0x4>

0800487c <_close_r>:
 800487c:	2300      	movs	r3, #0
 800487e:	b570      	push	{r4, r5, r6, lr}
 8004880:	4d06      	ldr	r5, [pc, #24]	@ (800489c <_close_r+0x20>)
 8004882:	0004      	movs	r4, r0
 8004884:	0008      	movs	r0, r1
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	f7fc fc05 	bl	8001096 <_close>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d103      	bne.n	8004898 <_close_r+0x1c>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d000      	beq.n	8004898 <_close_r+0x1c>
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	bd70      	pop	{r4, r5, r6, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	2000039c 	.word	0x2000039c

080048a0 <_lseek_r>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	0004      	movs	r4, r0
 80048a4:	0008      	movs	r0, r1
 80048a6:	0011      	movs	r1, r2
 80048a8:	001a      	movs	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	4d05      	ldr	r5, [pc, #20]	@ (80048c4 <_lseek_r+0x24>)
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fc12 	bl	80010d8 <_lseek>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d103      	bne.n	80048c0 <_lseek_r+0x20>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d000      	beq.n	80048c0 <_lseek_r+0x20>
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	2000039c 	.word	0x2000039c

080048c8 <_read_r>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	0004      	movs	r4, r0
 80048cc:	0008      	movs	r0, r1
 80048ce:	0011      	movs	r1, r2
 80048d0:	001a      	movs	r2, r3
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	@ (80048ec <_read_r+0x24>)
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fc fba4 	bl	8001024 <_read>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d103      	bne.n	80048e8 <_read_r+0x20>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d000      	beq.n	80048e8 <_read_r+0x20>
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	2000039c 	.word	0x2000039c

080048f0 <_write_r>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	0004      	movs	r4, r0
 80048f4:	0008      	movs	r0, r1
 80048f6:	0011      	movs	r1, r2
 80048f8:	001a      	movs	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4d05      	ldr	r5, [pc, #20]	@ (8004914 <_write_r+0x24>)
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	f7fc fbad 	bl	800105e <_write>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d103      	bne.n	8004910 <_write_r+0x20>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d000      	beq.n	8004910 <_write_r+0x20>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	2000039c 	.word	0x2000039c

08004918 <__errno>:
 8004918:	4b01      	ldr	r3, [pc, #4]	@ (8004920 <__errno+0x8>)
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	4770      	bx	lr
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	2000001c 	.word	0x2000001c

08004924 <__libc_init_array>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	2600      	movs	r6, #0
 8004928:	4c0c      	ldr	r4, [pc, #48]	@ (800495c <__libc_init_array+0x38>)
 800492a:	4d0d      	ldr	r5, [pc, #52]	@ (8004960 <__libc_init_array+0x3c>)
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	42a6      	cmp	r6, r4
 8004932:	d109      	bne.n	8004948 <__libc_init_array+0x24>
 8004934:	2600      	movs	r6, #0
 8004936:	f000 fd3b 	bl	80053b0 <_init>
 800493a:	4c0a      	ldr	r4, [pc, #40]	@ (8004964 <__libc_init_array+0x40>)
 800493c:	4d0a      	ldr	r5, [pc, #40]	@ (8004968 <__libc_init_array+0x44>)
 800493e:	1b64      	subs	r4, r4, r5
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	42a6      	cmp	r6, r4
 8004944:	d105      	bne.n	8004952 <__libc_init_array+0x2e>
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	00b3      	lsls	r3, r6, #2
 800494a:	58eb      	ldr	r3, [r5, r3]
 800494c:	4798      	blx	r3
 800494e:	3601      	adds	r6, #1
 8004950:	e7ee      	b.n	8004930 <__libc_init_array+0xc>
 8004952:	00b3      	lsls	r3, r6, #2
 8004954:	58eb      	ldr	r3, [r5, r3]
 8004956:	4798      	blx	r3
 8004958:	3601      	adds	r6, #1
 800495a:	e7f2      	b.n	8004942 <__libc_init_array+0x1e>
 800495c:	08005680 	.word	0x08005680
 8004960:	08005680 	.word	0x08005680
 8004964:	08005684 	.word	0x08005684
 8004968:	08005680 	.word	0x08005680

0800496c <__retarget_lock_init_recursive>:
 800496c:	4770      	bx	lr

0800496e <__retarget_lock_acquire_recursive>:
 800496e:	4770      	bx	lr

08004970 <__retarget_lock_release_recursive>:
 8004970:	4770      	bx	lr
	...

08004974 <_free_r>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	0005      	movs	r5, r0
 8004978:	1e0c      	subs	r4, r1, #0
 800497a:	d010      	beq.n	800499e <_free_r+0x2a>
 800497c:	3c04      	subs	r4, #4
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	da00      	bge.n	8004986 <_free_r+0x12>
 8004984:	18e4      	adds	r4, r4, r3
 8004986:	0028      	movs	r0, r5
 8004988:	f000 f8e0 	bl	8004b4c <__malloc_lock>
 800498c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <_free_r+0x90>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d105      	bne.n	80049a0 <_free_r+0x2c>
 8004994:	6063      	str	r3, [r4, #4]
 8004996:	6014      	str	r4, [r2, #0]
 8004998:	0028      	movs	r0, r5
 800499a:	f000 f8df 	bl	8004b5c <__malloc_unlock>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	d908      	bls.n	80049b6 <_free_r+0x42>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	1821      	adds	r1, r4, r0
 80049a8:	428b      	cmp	r3, r1
 80049aa:	d1f3      	bne.n	8004994 <_free_r+0x20>
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	1809      	adds	r1, r1, r0
 80049b2:	6021      	str	r1, [r4, #0]
 80049b4:	e7ee      	b.n	8004994 <_free_r+0x20>
 80049b6:	001a      	movs	r2, r3
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <_free_r+0x4e>
 80049be:	42a3      	cmp	r3, r4
 80049c0:	d9f9      	bls.n	80049b6 <_free_r+0x42>
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	1850      	adds	r0, r2, r1
 80049c6:	42a0      	cmp	r0, r4
 80049c8:	d10b      	bne.n	80049e2 <_free_r+0x6e>
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	1809      	adds	r1, r1, r0
 80049ce:	1850      	adds	r0, r2, r1
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	4283      	cmp	r3, r0
 80049d4:	d1e0      	bne.n	8004998 <_free_r+0x24>
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	1841      	adds	r1, r0, r1
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	6053      	str	r3, [r2, #4]
 80049e0:	e7da      	b.n	8004998 <_free_r+0x24>
 80049e2:	42a0      	cmp	r0, r4
 80049e4:	d902      	bls.n	80049ec <_free_r+0x78>
 80049e6:	230c      	movs	r3, #12
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	e7d5      	b.n	8004998 <_free_r+0x24>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	1821      	adds	r1, r4, r0
 80049f0:	428b      	cmp	r3, r1
 80049f2:	d103      	bne.n	80049fc <_free_r+0x88>
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	1809      	adds	r1, r1, r0
 80049fa:	6021      	str	r1, [r4, #0]
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	6054      	str	r4, [r2, #4]
 8004a00:	e7ca      	b.n	8004998 <_free_r+0x24>
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	200003a8 	.word	0x200003a8

08004a08 <sbrk_aligned>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a48 <sbrk_aligned+0x40>)
 8004a0c:	000d      	movs	r5, r1
 8004a0e:	6831      	ldr	r1, [r6, #0]
 8004a10:	0004      	movs	r4, r0
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d102      	bne.n	8004a1c <sbrk_aligned+0x14>
 8004a16:	f000 fcad 	bl	8005374 <_sbrk_r>
 8004a1a:	6030      	str	r0, [r6, #0]
 8004a1c:	0029      	movs	r1, r5
 8004a1e:	0020      	movs	r0, r4
 8004a20:	f000 fca8 	bl	8005374 <_sbrk_r>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d103      	bne.n	8004a30 <sbrk_aligned+0x28>
 8004a28:	2501      	movs	r5, #1
 8004a2a:	426d      	negs	r5, r5
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	2303      	movs	r3, #3
 8004a32:	1cc5      	adds	r5, r0, #3
 8004a34:	439d      	bics	r5, r3
 8004a36:	42a8      	cmp	r0, r5
 8004a38:	d0f8      	beq.n	8004a2c <sbrk_aligned+0x24>
 8004a3a:	1a29      	subs	r1, r5, r0
 8004a3c:	0020      	movs	r0, r4
 8004a3e:	f000 fc99 	bl	8005374 <_sbrk_r>
 8004a42:	3001      	adds	r0, #1
 8004a44:	d1f2      	bne.n	8004a2c <sbrk_aligned+0x24>
 8004a46:	e7ef      	b.n	8004a28 <sbrk_aligned+0x20>
 8004a48:	200003a4 	.word	0x200003a4

08004a4c <_malloc_r>:
 8004a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4e:	2203      	movs	r2, #3
 8004a50:	1ccb      	adds	r3, r1, #3
 8004a52:	4393      	bics	r3, r2
 8004a54:	3308      	adds	r3, #8
 8004a56:	0005      	movs	r5, r0
 8004a58:	001f      	movs	r7, r3
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d234      	bcs.n	8004ac8 <_malloc_r+0x7c>
 8004a5e:	270c      	movs	r7, #12
 8004a60:	42b9      	cmp	r1, r7
 8004a62:	d833      	bhi.n	8004acc <_malloc_r+0x80>
 8004a64:	0028      	movs	r0, r5
 8004a66:	f000 f871 	bl	8004b4c <__malloc_lock>
 8004a6a:	4e37      	ldr	r6, [pc, #220]	@ (8004b48 <_malloc_r+0xfc>)
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	001c      	movs	r4, r3
 8004a70:	2c00      	cmp	r4, #0
 8004a72:	d12f      	bne.n	8004ad4 <_malloc_r+0x88>
 8004a74:	0039      	movs	r1, r7
 8004a76:	0028      	movs	r0, r5
 8004a78:	f7ff ffc6 	bl	8004a08 <sbrk_aligned>
 8004a7c:	0004      	movs	r4, r0
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d15f      	bne.n	8004b42 <_malloc_r+0xf6>
 8004a82:	6834      	ldr	r4, [r6, #0]
 8004a84:	9400      	str	r4, [sp, #0]
 8004a86:	9b00      	ldr	r3, [sp, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d14a      	bne.n	8004b22 <_malloc_r+0xd6>
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	d052      	beq.n	8004b36 <_malloc_r+0xea>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	0028      	movs	r0, r5
 8004a94:	18e3      	adds	r3, r4, r3
 8004a96:	9900      	ldr	r1, [sp, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	f000 fc6b 	bl	8005374 <_sbrk_r>
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	4283      	cmp	r3, r0
 8004aa2:	d148      	bne.n	8004b36 <_malloc_r+0xea>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	0028      	movs	r0, r5
 8004aa8:	1aff      	subs	r7, r7, r3
 8004aaa:	0039      	movs	r1, r7
 8004aac:	f7ff ffac 	bl	8004a08 <sbrk_aligned>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d040      	beq.n	8004b36 <_malloc_r+0xea>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	19db      	adds	r3, r3, r7
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6833      	ldr	r3, [r6, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	d133      	bne.n	8004b2a <_malloc_r+0xde>
 8004ac2:	9b00      	ldr	r3, [sp, #0]
 8004ac4:	6033      	str	r3, [r6, #0]
 8004ac6:	e019      	b.n	8004afc <_malloc_r+0xb0>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dac9      	bge.n	8004a60 <_malloc_r+0x14>
 8004acc:	230c      	movs	r3, #12
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	1bc9      	subs	r1, r1, r7
 8004ad8:	d420      	bmi.n	8004b1c <_malloc_r+0xd0>
 8004ada:	290b      	cmp	r1, #11
 8004adc:	d90a      	bls.n	8004af4 <_malloc_r+0xa8>
 8004ade:	19e2      	adds	r2, r4, r7
 8004ae0:	6027      	str	r7, [r4, #0]
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	d104      	bne.n	8004af0 <_malloc_r+0xa4>
 8004ae6:	6032      	str	r2, [r6, #0]
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	6011      	str	r1, [r2, #0]
 8004aec:	6053      	str	r3, [r2, #4]
 8004aee:	e005      	b.n	8004afc <_malloc_r+0xb0>
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	e7f9      	b.n	8004ae8 <_malloc_r+0x9c>
 8004af4:	6862      	ldr	r2, [r4, #4]
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	d10e      	bne.n	8004b18 <_malloc_r+0xcc>
 8004afa:	6032      	str	r2, [r6, #0]
 8004afc:	0028      	movs	r0, r5
 8004afe:	f000 f82d 	bl	8004b5c <__malloc_unlock>
 8004b02:	0020      	movs	r0, r4
 8004b04:	2207      	movs	r2, #7
 8004b06:	300b      	adds	r0, #11
 8004b08:	1d23      	adds	r3, r4, #4
 8004b0a:	4390      	bics	r0, r2
 8004b0c:	1ac2      	subs	r2, r0, r3
 8004b0e:	4298      	cmp	r0, r3
 8004b10:	d0df      	beq.n	8004ad2 <_malloc_r+0x86>
 8004b12:	1a1b      	subs	r3, r3, r0
 8004b14:	50a3      	str	r3, [r4, r2]
 8004b16:	e7dc      	b.n	8004ad2 <_malloc_r+0x86>
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	e7ef      	b.n	8004afc <_malloc_r+0xb0>
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	6864      	ldr	r4, [r4, #4]
 8004b20:	e7a6      	b.n	8004a70 <_malloc_r+0x24>
 8004b22:	9c00      	ldr	r4, [sp, #0]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	e7ad      	b.n	8004a86 <_malloc_r+0x3a>
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	d1fb      	bne.n	8004b2a <_malloc_r+0xde>
 8004b32:	2300      	movs	r3, #0
 8004b34:	e7da      	b.n	8004aec <_malloc_r+0xa0>
 8004b36:	230c      	movs	r3, #12
 8004b38:	0028      	movs	r0, r5
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f000 f80e 	bl	8004b5c <__malloc_unlock>
 8004b40:	e7c6      	b.n	8004ad0 <_malloc_r+0x84>
 8004b42:	6007      	str	r7, [r0, #0]
 8004b44:	e7da      	b.n	8004afc <_malloc_r+0xb0>
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	200003a8 	.word	0x200003a8

08004b4c <__malloc_lock>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4802      	ldr	r0, [pc, #8]	@ (8004b58 <__malloc_lock+0xc>)
 8004b50:	f7ff ff0d 	bl	800496e <__retarget_lock_acquire_recursive>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	200003a0 	.word	0x200003a0

08004b5c <__malloc_unlock>:
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	4802      	ldr	r0, [pc, #8]	@ (8004b68 <__malloc_unlock+0xc>)
 8004b60:	f7ff ff06 	bl	8004970 <__retarget_lock_release_recursive>
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	200003a0 	.word	0x200003a0

08004b6c <__sfputc_r>:
 8004b6c:	6893      	ldr	r3, [r2, #8]
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	3b01      	subs	r3, #1
 8004b72:	6093      	str	r3, [r2, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da04      	bge.n	8004b82 <__sfputc_r+0x16>
 8004b78:	6994      	ldr	r4, [r2, #24]
 8004b7a:	42a3      	cmp	r3, r4
 8004b7c:	db07      	blt.n	8004b8e <__sfputc_r+0x22>
 8004b7e:	290a      	cmp	r1, #10
 8004b80:	d005      	beq.n	8004b8e <__sfputc_r+0x22>
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	1c58      	adds	r0, r3, #1
 8004b86:	6010      	str	r0, [r2, #0]
 8004b88:	7019      	strb	r1, [r3, #0]
 8004b8a:	0008      	movs	r0, r1
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	f7ff fdcd 	bl	800472c <__swbuf_r>
 8004b92:	0001      	movs	r1, r0
 8004b94:	e7f9      	b.n	8004b8a <__sfputc_r+0x1e>

08004b96 <__sfputs_r>:
 8004b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b98:	0006      	movs	r6, r0
 8004b9a:	000f      	movs	r7, r1
 8004b9c:	0014      	movs	r4, r2
 8004b9e:	18d5      	adds	r5, r2, r3
 8004ba0:	42ac      	cmp	r4, r5
 8004ba2:	d101      	bne.n	8004ba8 <__sfputs_r+0x12>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e007      	b.n	8004bb8 <__sfputs_r+0x22>
 8004ba8:	7821      	ldrb	r1, [r4, #0]
 8004baa:	003a      	movs	r2, r7
 8004bac:	0030      	movs	r0, r6
 8004bae:	f7ff ffdd 	bl	8004b6c <__sfputc_r>
 8004bb2:	3401      	adds	r4, #1
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d1f3      	bne.n	8004ba0 <__sfputs_r+0xa>
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bbc <_vfiprintf_r>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b0a1      	sub	sp, #132	@ 0x84
 8004bc0:	000f      	movs	r7, r1
 8004bc2:	0015      	movs	r5, r2
 8004bc4:	001e      	movs	r6, r3
 8004bc6:	9003      	str	r0, [sp, #12]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d004      	beq.n	8004bd6 <_vfiprintf_r+0x1a>
 8004bcc:	6a03      	ldr	r3, [r0, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <_vfiprintf_r+0x1a>
 8004bd2:	f7ff fcbb 	bl	800454c <__sinit>
 8004bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d405      	bmi.n	8004be8 <_vfiprintf_r+0x2c>
 8004bdc:	89bb      	ldrh	r3, [r7, #12]
 8004bde:	059b      	lsls	r3, r3, #22
 8004be0:	d402      	bmi.n	8004be8 <_vfiprintf_r+0x2c>
 8004be2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004be4:	f7ff fec3 	bl	800496e <__retarget_lock_acquire_recursive>
 8004be8:	89bb      	ldrh	r3, [r7, #12]
 8004bea:	071b      	lsls	r3, r3, #28
 8004bec:	d502      	bpl.n	8004bf4 <_vfiprintf_r+0x38>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d113      	bne.n	8004c1c <_vfiprintf_r+0x60>
 8004bf4:	0039      	movs	r1, r7
 8004bf6:	9803      	ldr	r0, [sp, #12]
 8004bf8:	f7ff fdda 	bl	80047b0 <__swsetup_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d00d      	beq.n	8004c1c <_vfiprintf_r+0x60>
 8004c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c02:	07db      	lsls	r3, r3, #31
 8004c04:	d503      	bpl.n	8004c0e <_vfiprintf_r+0x52>
 8004c06:	2001      	movs	r0, #1
 8004c08:	4240      	negs	r0, r0
 8004c0a:	b021      	add	sp, #132	@ 0x84
 8004c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c0e:	89bb      	ldrh	r3, [r7, #12]
 8004c10:	059b      	lsls	r3, r3, #22
 8004c12:	d4f8      	bmi.n	8004c06 <_vfiprintf_r+0x4a>
 8004c14:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c16:	f7ff feab 	bl	8004970 <__retarget_lock_release_recursive>
 8004c1a:	e7f4      	b.n	8004c06 <_vfiprintf_r+0x4a>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	ac08      	add	r4, sp, #32
 8004c20:	6163      	str	r3, [r4, #20]
 8004c22:	3320      	adds	r3, #32
 8004c24:	7663      	strb	r3, [r4, #25]
 8004c26:	3310      	adds	r3, #16
 8004c28:	76a3      	strb	r3, [r4, #26]
 8004c2a:	9607      	str	r6, [sp, #28]
 8004c2c:	002e      	movs	r6, r5
 8004c2e:	7833      	ldrb	r3, [r6, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <_vfiprintf_r+0x7c>
 8004c34:	2b25      	cmp	r3, #37	@ 0x25
 8004c36:	d148      	bne.n	8004cca <_vfiprintf_r+0x10e>
 8004c38:	1b73      	subs	r3, r6, r5
 8004c3a:	9305      	str	r3, [sp, #20]
 8004c3c:	42ae      	cmp	r6, r5
 8004c3e:	d00b      	beq.n	8004c58 <_vfiprintf_r+0x9c>
 8004c40:	002a      	movs	r2, r5
 8004c42:	0039      	movs	r1, r7
 8004c44:	9803      	ldr	r0, [sp, #12]
 8004c46:	f7ff ffa6 	bl	8004b96 <__sfputs_r>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d100      	bne.n	8004c50 <_vfiprintf_r+0x94>
 8004c4e:	e0ae      	b.n	8004dae <_vfiprintf_r+0x1f2>
 8004c50:	6963      	ldr	r3, [r4, #20]
 8004c52:	9a05      	ldr	r2, [sp, #20]
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	6163      	str	r3, [r4, #20]
 8004c58:	7833      	ldrb	r3, [r6, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d100      	bne.n	8004c60 <_vfiprintf_r+0xa4>
 8004c5e:	e0a6      	b.n	8004dae <_vfiprintf_r+0x1f2>
 8004c60:	2201      	movs	r2, #1
 8004c62:	2300      	movs	r3, #0
 8004c64:	4252      	negs	r2, r2
 8004c66:	6062      	str	r2, [r4, #4]
 8004c68:	a904      	add	r1, sp, #16
 8004c6a:	3254      	adds	r2, #84	@ 0x54
 8004c6c:	1852      	adds	r2, r2, r1
 8004c6e:	1c75      	adds	r5, r6, #1
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	60e3      	str	r3, [r4, #12]
 8004c74:	60a3      	str	r3, [r4, #8]
 8004c76:	7013      	strb	r3, [r2, #0]
 8004c78:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004c7a:	4b59      	ldr	r3, [pc, #356]	@ (8004de0 <_vfiprintf_r+0x224>)
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	0018      	movs	r0, r3
 8004c80:	7829      	ldrb	r1, [r5, #0]
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	f000 fb88 	bl	8005398 <memchr>
 8004c88:	1c6e      	adds	r6, r5, #1
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d11f      	bne.n	8004cce <_vfiprintf_r+0x112>
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	06d3      	lsls	r3, r2, #27
 8004c92:	d504      	bpl.n	8004c9e <_vfiprintf_r+0xe2>
 8004c94:	2353      	movs	r3, #83	@ 0x53
 8004c96:	a904      	add	r1, sp, #16
 8004c98:	185b      	adds	r3, r3, r1
 8004c9a:	2120      	movs	r1, #32
 8004c9c:	7019      	strb	r1, [r3, #0]
 8004c9e:	0713      	lsls	r3, r2, #28
 8004ca0:	d504      	bpl.n	8004cac <_vfiprintf_r+0xf0>
 8004ca2:	2353      	movs	r3, #83	@ 0x53
 8004ca4:	a904      	add	r1, sp, #16
 8004ca6:	185b      	adds	r3, r3, r1
 8004ca8:	212b      	movs	r1, #43	@ 0x2b
 8004caa:	7019      	strb	r1, [r3, #0]
 8004cac:	782b      	ldrb	r3, [r5, #0]
 8004cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb0:	d016      	beq.n	8004ce0 <_vfiprintf_r+0x124>
 8004cb2:	002e      	movs	r6, r5
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	200a      	movs	r0, #10
 8004cb8:	68e3      	ldr	r3, [r4, #12]
 8004cba:	7832      	ldrb	r2, [r6, #0]
 8004cbc:	1c75      	adds	r5, r6, #1
 8004cbe:	3a30      	subs	r2, #48	@ 0x30
 8004cc0:	2a09      	cmp	r2, #9
 8004cc2:	d950      	bls.n	8004d66 <_vfiprintf_r+0x1aa>
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d111      	bne.n	8004cec <_vfiprintf_r+0x130>
 8004cc8:	e017      	b.n	8004cfa <_vfiprintf_r+0x13e>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7af      	b.n	8004c2e <_vfiprintf_r+0x72>
 8004cce:	9b05      	ldr	r3, [sp, #20]
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	1ac0      	subs	r0, r0, r3
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4083      	lsls	r3, r0
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	0035      	movs	r5, r6
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	e7cc      	b.n	8004c7a <_vfiprintf_r+0xbe>
 8004ce0:	9b07      	ldr	r3, [sp, #28]
 8004ce2:	1d19      	adds	r1, r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	9107      	str	r1, [sp, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db01      	blt.n	8004cf0 <_vfiprintf_r+0x134>
 8004cec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cee:	e004      	b.n	8004cfa <_vfiprintf_r+0x13e>
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	60e3      	str	r3, [r4, #12]
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	7833      	ldrb	r3, [r6, #0]
 8004cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cfe:	d10c      	bne.n	8004d1a <_vfiprintf_r+0x15e>
 8004d00:	7873      	ldrb	r3, [r6, #1]
 8004d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d04:	d134      	bne.n	8004d70 <_vfiprintf_r+0x1b4>
 8004d06:	9b07      	ldr	r3, [sp, #28]
 8004d08:	3602      	adds	r6, #2
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9207      	str	r2, [sp, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da01      	bge.n	8004d18 <_vfiprintf_r+0x15c>
 8004d14:	2301      	movs	r3, #1
 8004d16:	425b      	negs	r3, r3
 8004d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d1a:	4d32      	ldr	r5, [pc, #200]	@ (8004de4 <_vfiprintf_r+0x228>)
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	0028      	movs	r0, r5
 8004d20:	7831      	ldrb	r1, [r6, #0]
 8004d22:	f000 fb39 	bl	8005398 <memchr>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d006      	beq.n	8004d38 <_vfiprintf_r+0x17c>
 8004d2a:	2340      	movs	r3, #64	@ 0x40
 8004d2c:	1b40      	subs	r0, r0, r5
 8004d2e:	4083      	lsls	r3, r0
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	3601      	adds	r6, #1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	7831      	ldrb	r1, [r6, #0]
 8004d3a:	2206      	movs	r2, #6
 8004d3c:	482a      	ldr	r0, [pc, #168]	@ (8004de8 <_vfiprintf_r+0x22c>)
 8004d3e:	1c75      	adds	r5, r6, #1
 8004d40:	7621      	strb	r1, [r4, #24]
 8004d42:	f000 fb29 	bl	8005398 <memchr>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d040      	beq.n	8004dcc <_vfiprintf_r+0x210>
 8004d4a:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <_vfiprintf_r+0x230>)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d122      	bne.n	8004d96 <_vfiprintf_r+0x1da>
 8004d50:	2207      	movs	r2, #7
 8004d52:	9b07      	ldr	r3, [sp, #28]
 8004d54:	3307      	adds	r3, #7
 8004d56:	4393      	bics	r3, r2
 8004d58:	3308      	adds	r3, #8
 8004d5a:	9307      	str	r3, [sp, #28]
 8004d5c:	6963      	ldr	r3, [r4, #20]
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	6163      	str	r3, [r4, #20]
 8004d64:	e762      	b.n	8004c2c <_vfiprintf_r+0x70>
 8004d66:	4343      	muls	r3, r0
 8004d68:	002e      	movs	r6, r5
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	189b      	adds	r3, r3, r2
 8004d6e:	e7a4      	b.n	8004cba <_vfiprintf_r+0xfe>
 8004d70:	2300      	movs	r3, #0
 8004d72:	200a      	movs	r0, #10
 8004d74:	0019      	movs	r1, r3
 8004d76:	3601      	adds	r6, #1
 8004d78:	6063      	str	r3, [r4, #4]
 8004d7a:	7832      	ldrb	r2, [r6, #0]
 8004d7c:	1c75      	adds	r5, r6, #1
 8004d7e:	3a30      	subs	r2, #48	@ 0x30
 8004d80:	2a09      	cmp	r2, #9
 8004d82:	d903      	bls.n	8004d8c <_vfiprintf_r+0x1d0>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0c8      	beq.n	8004d1a <_vfiprintf_r+0x15e>
 8004d88:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d8a:	e7c6      	b.n	8004d1a <_vfiprintf_r+0x15e>
 8004d8c:	4341      	muls	r1, r0
 8004d8e:	002e      	movs	r6, r5
 8004d90:	2301      	movs	r3, #1
 8004d92:	1889      	adds	r1, r1, r2
 8004d94:	e7f1      	b.n	8004d7a <_vfiprintf_r+0x1be>
 8004d96:	aa07      	add	r2, sp, #28
 8004d98:	9200      	str	r2, [sp, #0]
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	003a      	movs	r2, r7
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <_vfiprintf_r+0x234>)
 8004da0:	9803      	ldr	r0, [sp, #12]
 8004da2:	e000      	b.n	8004da6 <_vfiprintf_r+0x1ea>
 8004da4:	bf00      	nop
 8004da6:	9004      	str	r0, [sp, #16]
 8004da8:	9b04      	ldr	r3, [sp, #16]
 8004daa:	3301      	adds	r3, #1
 8004dac:	d1d6      	bne.n	8004d5c <_vfiprintf_r+0x1a0>
 8004dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d405      	bmi.n	8004dc0 <_vfiprintf_r+0x204>
 8004db4:	89bb      	ldrh	r3, [r7, #12]
 8004db6:	059b      	lsls	r3, r3, #22
 8004db8:	d402      	bmi.n	8004dc0 <_vfiprintf_r+0x204>
 8004dba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004dbc:	f7ff fdd8 	bl	8004970 <__retarget_lock_release_recursive>
 8004dc0:	89bb      	ldrh	r3, [r7, #12]
 8004dc2:	065b      	lsls	r3, r3, #25
 8004dc4:	d500      	bpl.n	8004dc8 <_vfiprintf_r+0x20c>
 8004dc6:	e71e      	b.n	8004c06 <_vfiprintf_r+0x4a>
 8004dc8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004dca:	e71e      	b.n	8004c0a <_vfiprintf_r+0x4e>
 8004dcc:	aa07      	add	r2, sp, #28
 8004dce:	9200      	str	r2, [sp, #0]
 8004dd0:	0021      	movs	r1, r4
 8004dd2:	003a      	movs	r2, r7
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <_vfiprintf_r+0x234>)
 8004dd6:	9803      	ldr	r0, [sp, #12]
 8004dd8:	f000 f87c 	bl	8004ed4 <_printf_i>
 8004ddc:	e7e3      	b.n	8004da6 <_vfiprintf_r+0x1ea>
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	08005644 	.word	0x08005644
 8004de4:	0800564a 	.word	0x0800564a
 8004de8:	0800564e 	.word	0x0800564e
 8004dec:	00000000 	.word	0x00000000
 8004df0:	08004b97 	.word	0x08004b97

08004df4 <_printf_common>:
 8004df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004df6:	0016      	movs	r6, r2
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	688a      	ldr	r2, [r1, #8]
 8004dfc:	690b      	ldr	r3, [r1, #16]
 8004dfe:	000c      	movs	r4, r1
 8004e00:	9000      	str	r0, [sp, #0]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	da00      	bge.n	8004e08 <_printf_common+0x14>
 8004e06:	0013      	movs	r3, r2
 8004e08:	0022      	movs	r2, r4
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	3243      	adds	r2, #67	@ 0x43
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	d001      	beq.n	8004e18 <_printf_common+0x24>
 8004e14:	3301      	adds	r3, #1
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	d502      	bpl.n	8004e24 <_printf_common+0x30>
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	3302      	adds	r3, #2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	2306      	movs	r3, #6
 8004e28:	0015      	movs	r5, r2
 8004e2a:	401d      	ands	r5, r3
 8004e2c:	421a      	tst	r2, r3
 8004e2e:	d027      	beq.n	8004e80 <_printf_common+0x8c>
 8004e30:	0023      	movs	r3, r4
 8004e32:	3343      	adds	r3, #67	@ 0x43
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	4193      	sbcs	r3, r2
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	0692      	lsls	r2, r2, #26
 8004e3e:	d430      	bmi.n	8004ea2 <_printf_common+0xae>
 8004e40:	0022      	movs	r2, r4
 8004e42:	9901      	ldr	r1, [sp, #4]
 8004e44:	9800      	ldr	r0, [sp, #0]
 8004e46:	9d08      	ldr	r5, [sp, #32]
 8004e48:	3243      	adds	r2, #67	@ 0x43
 8004e4a:	47a8      	blx	r5
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d025      	beq.n	8004e9c <_printf_common+0xa8>
 8004e50:	2206      	movs	r2, #6
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	2500      	movs	r5, #0
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d105      	bne.n	8004e68 <_printf_common+0x74>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	68e5      	ldr	r5, [r4, #12]
 8004e60:	1aed      	subs	r5, r5, r3
 8004e62:	43eb      	mvns	r3, r5
 8004e64:	17db      	asrs	r3, r3, #31
 8004e66:	401d      	ands	r5, r3
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	dd01      	ble.n	8004e74 <_printf_common+0x80>
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	18ed      	adds	r5, r5, r3
 8004e74:	2600      	movs	r6, #0
 8004e76:	42b5      	cmp	r5, r6
 8004e78:	d120      	bne.n	8004ebc <_printf_common+0xc8>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e010      	b.n	8004ea0 <_printf_common+0xac>
 8004e7e:	3501      	adds	r5, #1
 8004e80:	68e3      	ldr	r3, [r4, #12]
 8004e82:	6832      	ldr	r2, [r6, #0]
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	ddd2      	ble.n	8004e30 <_printf_common+0x3c>
 8004e8a:	0022      	movs	r2, r4
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	9901      	ldr	r1, [sp, #4]
 8004e90:	9800      	ldr	r0, [sp, #0]
 8004e92:	9f08      	ldr	r7, [sp, #32]
 8004e94:	3219      	adds	r2, #25
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1f0      	bne.n	8004e7e <_printf_common+0x8a>
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	4240      	negs	r0, r0
 8004ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ea2:	2030      	movs	r0, #48	@ 0x30
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	3143      	adds	r1, #67	@ 0x43
 8004ea8:	7008      	strb	r0, [r1, #0]
 8004eaa:	0021      	movs	r1, r4
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	3145      	adds	r1, #69	@ 0x45
 8004eb0:	7809      	ldrb	r1, [r1, #0]
 8004eb2:	18a2      	adds	r2, r4, r2
 8004eb4:	3243      	adds	r2, #67	@ 0x43
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	7011      	strb	r1, [r2, #0]
 8004eba:	e7c1      	b.n	8004e40 <_printf_common+0x4c>
 8004ebc:	0022      	movs	r2, r4
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	9901      	ldr	r1, [sp, #4]
 8004ec2:	9800      	ldr	r0, [sp, #0]
 8004ec4:	9f08      	ldr	r7, [sp, #32]
 8004ec6:	321a      	adds	r2, #26
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0e6      	beq.n	8004e9c <_printf_common+0xa8>
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7d1      	b.n	8004e76 <_printf_common+0x82>
	...

08004ed4 <_printf_i>:
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	b08b      	sub	sp, #44	@ 0x2c
 8004ed8:	9206      	str	r2, [sp, #24]
 8004eda:	000a      	movs	r2, r1
 8004edc:	3243      	adds	r2, #67	@ 0x43
 8004ede:	9307      	str	r3, [sp, #28]
 8004ee0:	9005      	str	r0, [sp, #20]
 8004ee2:	9203      	str	r2, [sp, #12]
 8004ee4:	7e0a      	ldrb	r2, [r1, #24]
 8004ee6:	000c      	movs	r4, r1
 8004ee8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004eea:	2a78      	cmp	r2, #120	@ 0x78
 8004eec:	d809      	bhi.n	8004f02 <_printf_i+0x2e>
 8004eee:	2a62      	cmp	r2, #98	@ 0x62
 8004ef0:	d80b      	bhi.n	8004f0a <_printf_i+0x36>
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d100      	bne.n	8004ef8 <_printf_i+0x24>
 8004ef6:	e0bc      	b.n	8005072 <_printf_i+0x19e>
 8004ef8:	497b      	ldr	r1, [pc, #492]	@ (80050e8 <_printf_i+0x214>)
 8004efa:	9104      	str	r1, [sp, #16]
 8004efc:	2a58      	cmp	r2, #88	@ 0x58
 8004efe:	d100      	bne.n	8004f02 <_printf_i+0x2e>
 8004f00:	e090      	b.n	8005024 <_printf_i+0x150>
 8004f02:	0025      	movs	r5, r4
 8004f04:	3542      	adds	r5, #66	@ 0x42
 8004f06:	702a      	strb	r2, [r5, #0]
 8004f08:	e022      	b.n	8004f50 <_printf_i+0x7c>
 8004f0a:	0010      	movs	r0, r2
 8004f0c:	3863      	subs	r0, #99	@ 0x63
 8004f0e:	2815      	cmp	r0, #21
 8004f10:	d8f7      	bhi.n	8004f02 <_printf_i+0x2e>
 8004f12:	f7fb f8f9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004f16:	0016      	.short	0x0016
 8004f18:	fff6001f 	.word	0xfff6001f
 8004f1c:	fff6fff6 	.word	0xfff6fff6
 8004f20:	001ffff6 	.word	0x001ffff6
 8004f24:	fff6fff6 	.word	0xfff6fff6
 8004f28:	fff6fff6 	.word	0xfff6fff6
 8004f2c:	003600a1 	.word	0x003600a1
 8004f30:	fff60080 	.word	0xfff60080
 8004f34:	00b2fff6 	.word	0x00b2fff6
 8004f38:	0036fff6 	.word	0x0036fff6
 8004f3c:	fff6fff6 	.word	0xfff6fff6
 8004f40:	0084      	.short	0x0084
 8004f42:	0025      	movs	r5, r4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	3542      	adds	r5, #66	@ 0x42
 8004f48:	1d11      	adds	r1, r2, #4
 8004f4a:	6019      	str	r1, [r3, #0]
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	702b      	strb	r3, [r5, #0]
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0a0      	b.n	8005096 <_printf_i+0x1c2>
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	6809      	ldr	r1, [r1, #0]
 8004f58:	1d02      	adds	r2, r0, #4
 8004f5a:	060d      	lsls	r5, r1, #24
 8004f5c:	d50b      	bpl.n	8004f76 <_printf_i+0xa2>
 8004f5e:	6806      	ldr	r6, [r0, #0]
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	da03      	bge.n	8004f6e <_printf_i+0x9a>
 8004f66:	232d      	movs	r3, #45	@ 0x2d
 8004f68:	9a03      	ldr	r2, [sp, #12]
 8004f6a:	4276      	negs	r6, r6
 8004f6c:	7013      	strb	r3, [r2, #0]
 8004f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80050e8 <_printf_i+0x214>)
 8004f70:	270a      	movs	r7, #10
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	e018      	b.n	8004fa8 <_printf_i+0xd4>
 8004f76:	6806      	ldr	r6, [r0, #0]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	0649      	lsls	r1, r1, #25
 8004f7c:	d5f1      	bpl.n	8004f62 <_printf_i+0x8e>
 8004f7e:	b236      	sxth	r6, r6
 8004f80:	e7ef      	b.n	8004f62 <_printf_i+0x8e>
 8004f82:	6808      	ldr	r0, [r1, #0]
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	c940      	ldmia	r1!, {r6}
 8004f88:	0605      	lsls	r5, r0, #24
 8004f8a:	d402      	bmi.n	8004f92 <_printf_i+0xbe>
 8004f8c:	0640      	lsls	r0, r0, #25
 8004f8e:	d500      	bpl.n	8004f92 <_printf_i+0xbe>
 8004f90:	b2b6      	uxth	r6, r6
 8004f92:	6019      	str	r1, [r3, #0]
 8004f94:	4b54      	ldr	r3, [pc, #336]	@ (80050e8 <_printf_i+0x214>)
 8004f96:	270a      	movs	r7, #10
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8004f9c:	d100      	bne.n	8004fa0 <_printf_i+0xcc>
 8004f9e:	3f02      	subs	r7, #2
 8004fa0:	0023      	movs	r3, r4
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	3343      	adds	r3, #67	@ 0x43
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	60a3      	str	r3, [r4, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	db03      	blt.n	8004fb8 <_printf_i+0xe4>
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	6022      	str	r2, [r4, #0]
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	d102      	bne.n	8004fc2 <_printf_i+0xee>
 8004fbc:	9d03      	ldr	r5, [sp, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <_printf_i+0x108>
 8004fc2:	9d03      	ldr	r5, [sp, #12]
 8004fc4:	0030      	movs	r0, r6
 8004fc6:	0039      	movs	r1, r7
 8004fc8:	f7fb f92e 	bl	8000228 <__aeabi_uidivmod>
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	3d01      	subs	r5, #1
 8004fd0:	5c5b      	ldrb	r3, [r3, r1]
 8004fd2:	702b      	strb	r3, [r5, #0]
 8004fd4:	0033      	movs	r3, r6
 8004fd6:	0006      	movs	r6, r0
 8004fd8:	429f      	cmp	r7, r3
 8004fda:	d9f3      	bls.n	8004fc4 <_printf_i+0xf0>
 8004fdc:	2f08      	cmp	r7, #8
 8004fde:	d109      	bne.n	8004ff4 <_printf_i+0x120>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	07db      	lsls	r3, r3, #31
 8004fe4:	d506      	bpl.n	8004ff4 <_printf_i+0x120>
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	dc02      	bgt.n	8004ff4 <_printf_i+0x120>
 8004fee:	2330      	movs	r3, #48	@ 0x30
 8004ff0:	3d01      	subs	r5, #1
 8004ff2:	702b      	strb	r3, [r5, #0]
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	1b5b      	subs	r3, r3, r5
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	9b07      	ldr	r3, [sp, #28]
 8004ffc:	0021      	movs	r1, r4
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	9805      	ldr	r0, [sp, #20]
 8005002:	9b06      	ldr	r3, [sp, #24]
 8005004:	aa09      	add	r2, sp, #36	@ 0x24
 8005006:	f7ff fef5 	bl	8004df4 <_printf_common>
 800500a:	3001      	adds	r0, #1
 800500c:	d148      	bne.n	80050a0 <_printf_i+0x1cc>
 800500e:	2001      	movs	r0, #1
 8005010:	4240      	negs	r0, r0
 8005012:	b00b      	add	sp, #44	@ 0x2c
 8005014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005016:	2220      	movs	r2, #32
 8005018:	6809      	ldr	r1, [r1, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	6022      	str	r2, [r4, #0]
 800501e:	2278      	movs	r2, #120	@ 0x78
 8005020:	4932      	ldr	r1, [pc, #200]	@ (80050ec <_printf_i+0x218>)
 8005022:	9104      	str	r1, [sp, #16]
 8005024:	0021      	movs	r1, r4
 8005026:	3145      	adds	r1, #69	@ 0x45
 8005028:	700a      	strb	r2, [r1, #0]
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	c940      	ldmia	r1!, {r6}
 8005030:	0610      	lsls	r0, r2, #24
 8005032:	d402      	bmi.n	800503a <_printf_i+0x166>
 8005034:	0650      	lsls	r0, r2, #25
 8005036:	d500      	bpl.n	800503a <_printf_i+0x166>
 8005038:	b2b6      	uxth	r6, r6
 800503a:	6019      	str	r1, [r3, #0]
 800503c:	07d3      	lsls	r3, r2, #31
 800503e:	d502      	bpl.n	8005046 <_printf_i+0x172>
 8005040:	2320      	movs	r3, #32
 8005042:	4313      	orrs	r3, r2
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2e00      	cmp	r6, #0
 8005048:	d001      	beq.n	800504e <_printf_i+0x17a>
 800504a:	2710      	movs	r7, #16
 800504c:	e7a8      	b.n	8004fa0 <_printf_i+0xcc>
 800504e:	2220      	movs	r2, #32
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	4393      	bics	r3, r2
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	e7f8      	b.n	800504a <_printf_i+0x176>
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	680d      	ldr	r5, [r1, #0]
 800505c:	1d10      	adds	r0, r2, #4
 800505e:	6949      	ldr	r1, [r1, #20]
 8005060:	6018      	str	r0, [r3, #0]
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	062e      	lsls	r6, r5, #24
 8005066:	d501      	bpl.n	800506c <_printf_i+0x198>
 8005068:	6019      	str	r1, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0x19e>
 800506c:	066d      	lsls	r5, r5, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0x194>
 8005070:	8019      	strh	r1, [r3, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	9d03      	ldr	r5, [sp, #12]
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	e7bf      	b.n	8004ffa <_printf_i+0x126>
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	1d11      	adds	r1, r2, #4
 800507e:	6019      	str	r1, [r3, #0]
 8005080:	6815      	ldr	r5, [r2, #0]
 8005082:	2100      	movs	r1, #0
 8005084:	0028      	movs	r0, r5
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	f000 f986 	bl	8005398 <memchr>
 800508c:	2800      	cmp	r0, #0
 800508e:	d001      	beq.n	8005094 <_printf_i+0x1c0>
 8005090:	1b40      	subs	r0, r0, r5
 8005092:	6060      	str	r0, [r4, #4]
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	6123      	str	r3, [r4, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	9a03      	ldr	r2, [sp, #12]
 800509c:	7013      	strb	r3, [r2, #0]
 800509e:	e7ac      	b.n	8004ffa <_printf_i+0x126>
 80050a0:	002a      	movs	r2, r5
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	9906      	ldr	r1, [sp, #24]
 80050a6:	9805      	ldr	r0, [sp, #20]
 80050a8:	9d07      	ldr	r5, [sp, #28]
 80050aa:	47a8      	blx	r5
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0ae      	beq.n	800500e <_printf_i+0x13a>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d415      	bmi.n	80050e2 <_printf_i+0x20e>
 80050b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b8:	68e0      	ldr	r0, [r4, #12]
 80050ba:	4298      	cmp	r0, r3
 80050bc:	daa9      	bge.n	8005012 <_printf_i+0x13e>
 80050be:	0018      	movs	r0, r3
 80050c0:	e7a7      	b.n	8005012 <_printf_i+0x13e>
 80050c2:	0022      	movs	r2, r4
 80050c4:	2301      	movs	r3, #1
 80050c6:	9906      	ldr	r1, [sp, #24]
 80050c8:	9805      	ldr	r0, [sp, #20]
 80050ca:	9e07      	ldr	r6, [sp, #28]
 80050cc:	3219      	adds	r2, #25
 80050ce:	47b0      	blx	r6
 80050d0:	3001      	adds	r0, #1
 80050d2:	d09c      	beq.n	800500e <_printf_i+0x13a>
 80050d4:	3501      	adds	r5, #1
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dcf0      	bgt.n	80050c2 <_printf_i+0x1ee>
 80050e0:	e7e9      	b.n	80050b6 <_printf_i+0x1e2>
 80050e2:	2500      	movs	r5, #0
 80050e4:	e7f7      	b.n	80050d6 <_printf_i+0x202>
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	08005655 	.word	0x08005655
 80050ec:	08005666 	.word	0x08005666

080050f0 <__sflush_r>:
 80050f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f2:	220c      	movs	r2, #12
 80050f4:	5e8b      	ldrsh	r3, [r1, r2]
 80050f6:	0005      	movs	r5, r0
 80050f8:	000c      	movs	r4, r1
 80050fa:	071a      	lsls	r2, r3, #28
 80050fc:	d456      	bmi.n	80051ac <__sflush_r+0xbc>
 80050fe:	684a      	ldr	r2, [r1, #4]
 8005100:	2a00      	cmp	r2, #0
 8005102:	dc02      	bgt.n	800510a <__sflush_r+0x1a>
 8005104:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005106:	2a00      	cmp	r2, #0
 8005108:	dd4e      	ble.n	80051a8 <__sflush_r+0xb8>
 800510a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800510c:	2f00      	cmp	r7, #0
 800510e:	d04b      	beq.n	80051a8 <__sflush_r+0xb8>
 8005110:	2200      	movs	r2, #0
 8005112:	2080      	movs	r0, #128	@ 0x80
 8005114:	682e      	ldr	r6, [r5, #0]
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	001a      	movs	r2, r3
 800511a:	0140      	lsls	r0, r0, #5
 800511c:	6a21      	ldr	r1, [r4, #32]
 800511e:	4002      	ands	r2, r0
 8005120:	4203      	tst	r3, r0
 8005122:	d033      	beq.n	800518c <__sflush_r+0x9c>
 8005124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	075b      	lsls	r3, r3, #29
 800512a:	d506      	bpl.n	800513a <__sflush_r+0x4a>
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <__sflush_r+0x4a>
 8005136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	0028      	movs	r0, r5
 800513e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	47b8      	blx	r7
 8005144:	89a2      	ldrh	r2, [r4, #12]
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d106      	bne.n	8005158 <__sflush_r+0x68>
 800514a:	6829      	ldr	r1, [r5, #0]
 800514c:	291d      	cmp	r1, #29
 800514e:	d846      	bhi.n	80051de <__sflush_r+0xee>
 8005150:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <__sflush_r+0x108>)
 8005152:	410b      	asrs	r3, r1
 8005154:	07db      	lsls	r3, r3, #31
 8005156:	d442      	bmi.n	80051de <__sflush_r+0xee>
 8005158:	2300      	movs	r3, #0
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	04d2      	lsls	r2, r2, #19
 8005162:	d505      	bpl.n	8005170 <__sflush_r+0x80>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <__sflush_r+0x7e>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d100      	bne.n	8005170 <__sflush_r+0x80>
 800516e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005172:	602e      	str	r6, [r5, #0]
 8005174:	2900      	cmp	r1, #0
 8005176:	d017      	beq.n	80051a8 <__sflush_r+0xb8>
 8005178:	0023      	movs	r3, r4
 800517a:	3344      	adds	r3, #68	@ 0x44
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <__sflush_r+0x96>
 8005180:	0028      	movs	r0, r5
 8005182:	f7ff fbf7 	bl	8004974 <_free_r>
 8005186:	2300      	movs	r3, #0
 8005188:	6363      	str	r3, [r4, #52]	@ 0x34
 800518a:	e00d      	b.n	80051a8 <__sflush_r+0xb8>
 800518c:	2301      	movs	r3, #1
 800518e:	0028      	movs	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	0002      	movs	r2, r0
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d1c6      	bne.n	8005126 <__sflush_r+0x36>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0c3      	beq.n	8005126 <__sflush_r+0x36>
 800519e:	2b1d      	cmp	r3, #29
 80051a0:	d001      	beq.n	80051a6 <__sflush_r+0xb6>
 80051a2:	2b16      	cmp	r3, #22
 80051a4:	d11a      	bne.n	80051dc <__sflush_r+0xec>
 80051a6:	602e      	str	r6, [r5, #0]
 80051a8:	2000      	movs	r0, #0
 80051aa:	e01e      	b.n	80051ea <__sflush_r+0xfa>
 80051ac:	690e      	ldr	r6, [r1, #16]
 80051ae:	2e00      	cmp	r6, #0
 80051b0:	d0fa      	beq.n	80051a8 <__sflush_r+0xb8>
 80051b2:	680f      	ldr	r7, [r1, #0]
 80051b4:	600e      	str	r6, [r1, #0]
 80051b6:	1bba      	subs	r2, r7, r6
 80051b8:	9201      	str	r2, [sp, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	079b      	lsls	r3, r3, #30
 80051be:	d100      	bne.n	80051c2 <__sflush_r+0xd2>
 80051c0:	694a      	ldr	r2, [r1, #20]
 80051c2:	60a2      	str	r2, [r4, #8]
 80051c4:	9b01      	ldr	r3, [sp, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	ddee      	ble.n	80051a8 <__sflush_r+0xb8>
 80051ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80051cc:	0032      	movs	r2, r6
 80051ce:	001f      	movs	r7, r3
 80051d0:	0028      	movs	r0, r5
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	47b8      	blx	r7
 80051d8:	2800      	cmp	r0, #0
 80051da:	dc07      	bgt.n	80051ec <__sflush_r+0xfc>
 80051dc:	89a2      	ldrh	r2, [r4, #12]
 80051de:	2340      	movs	r3, #64	@ 0x40
 80051e0:	2001      	movs	r0, #1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b21b      	sxth	r3, r3
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	4240      	negs	r0, r0
 80051ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ec:	9b01      	ldr	r3, [sp, #4]
 80051ee:	1836      	adds	r6, r6, r0
 80051f0:	1a1b      	subs	r3, r3, r0
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	e7e6      	b.n	80051c4 <__sflush_r+0xd4>
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	dfbffffe 	.word	0xdfbffffe

080051fc <_fflush_r>:
 80051fc:	690b      	ldr	r3, [r1, #16]
 80051fe:	b570      	push	{r4, r5, r6, lr}
 8005200:	0005      	movs	r5, r0
 8005202:	000c      	movs	r4, r1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <_fflush_r+0x12>
 8005208:	2500      	movs	r5, #0
 800520a:	0028      	movs	r0, r5
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	2800      	cmp	r0, #0
 8005210:	d004      	beq.n	800521c <_fflush_r+0x20>
 8005212:	6a03      	ldr	r3, [r0, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <_fflush_r+0x20>
 8005218:	f7ff f998 	bl	800454c <__sinit>
 800521c:	220c      	movs	r2, #12
 800521e:	5ea3      	ldrsh	r3, [r4, r2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f1      	beq.n	8005208 <_fflush_r+0xc>
 8005224:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005226:	07d2      	lsls	r2, r2, #31
 8005228:	d404      	bmi.n	8005234 <_fflush_r+0x38>
 800522a:	059b      	lsls	r3, r3, #22
 800522c:	d402      	bmi.n	8005234 <_fflush_r+0x38>
 800522e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005230:	f7ff fb9d 	bl	800496e <__retarget_lock_acquire_recursive>
 8005234:	0028      	movs	r0, r5
 8005236:	0021      	movs	r1, r4
 8005238:	f7ff ff5a 	bl	80050f0 <__sflush_r>
 800523c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800523e:	0005      	movs	r5, r0
 8005240:	07db      	lsls	r3, r3, #31
 8005242:	d4e2      	bmi.n	800520a <_fflush_r+0xe>
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	059b      	lsls	r3, r3, #22
 8005248:	d4df      	bmi.n	800520a <_fflush_r+0xe>
 800524a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800524c:	f7ff fb90 	bl	8004970 <__retarget_lock_release_recursive>
 8005250:	e7db      	b.n	800520a <_fflush_r+0xe>
	...

08005254 <__swhatbuf_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	000e      	movs	r6, r1
 8005258:	001d      	movs	r5, r3
 800525a:	230e      	movs	r3, #14
 800525c:	5ec9      	ldrsh	r1, [r1, r3]
 800525e:	0014      	movs	r4, r2
 8005260:	b096      	sub	sp, #88	@ 0x58
 8005262:	2900      	cmp	r1, #0
 8005264:	da0c      	bge.n	8005280 <__swhatbuf_r+0x2c>
 8005266:	89b2      	ldrh	r2, [r6, #12]
 8005268:	2380      	movs	r3, #128	@ 0x80
 800526a:	0011      	movs	r1, r2
 800526c:	4019      	ands	r1, r3
 800526e:	421a      	tst	r2, r3
 8005270:	d114      	bne.n	800529c <__swhatbuf_r+0x48>
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	2000      	movs	r0, #0
 8005278:	6029      	str	r1, [r5, #0]
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	b016      	add	sp, #88	@ 0x58
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	466a      	mov	r2, sp
 8005282:	f000 f853 	bl	800532c <_fstat_r>
 8005286:	2800      	cmp	r0, #0
 8005288:	dbed      	blt.n	8005266 <__swhatbuf_r+0x12>
 800528a:	23f0      	movs	r3, #240	@ 0xf0
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	4019      	ands	r1, r3
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <__swhatbuf_r+0x50>)
 8005294:	18c9      	adds	r1, r1, r3
 8005296:	424b      	negs	r3, r1
 8005298:	4159      	adcs	r1, r3
 800529a:	e7ea      	b.n	8005272 <__swhatbuf_r+0x1e>
 800529c:	2100      	movs	r1, #0
 800529e:	2340      	movs	r3, #64	@ 0x40
 80052a0:	e7e9      	b.n	8005276 <__swhatbuf_r+0x22>
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	ffffe000 	.word	0xffffe000

080052a8 <__smakebuf_r>:
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	2602      	movs	r6, #2
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	0005      	movs	r5, r0
 80052b0:	000c      	movs	r4, r1
 80052b2:	b085      	sub	sp, #20
 80052b4:	4233      	tst	r3, r6
 80052b6:	d007      	beq.n	80052c8 <__smakebuf_r+0x20>
 80052b8:	0023      	movs	r3, r4
 80052ba:	3347      	adds	r3, #71	@ 0x47
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	2301      	movs	r3, #1
 80052c2:	6163      	str	r3, [r4, #20]
 80052c4:	b005      	add	sp, #20
 80052c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c8:	ab03      	add	r3, sp, #12
 80052ca:	aa02      	add	r2, sp, #8
 80052cc:	f7ff ffc2 	bl	8005254 <__swhatbuf_r>
 80052d0:	9f02      	ldr	r7, [sp, #8]
 80052d2:	9001      	str	r0, [sp, #4]
 80052d4:	0039      	movs	r1, r7
 80052d6:	0028      	movs	r0, r5
 80052d8:	f7ff fbb8 	bl	8004a4c <_malloc_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d108      	bne.n	80052f2 <__smakebuf_r+0x4a>
 80052e0:	220c      	movs	r2, #12
 80052e2:	5ea3      	ldrsh	r3, [r4, r2]
 80052e4:	059a      	lsls	r2, r3, #22
 80052e6:	d4ed      	bmi.n	80052c4 <__smakebuf_r+0x1c>
 80052e8:	2203      	movs	r2, #3
 80052ea:	4393      	bics	r3, r2
 80052ec:	431e      	orrs	r6, r3
 80052ee:	81a6      	strh	r6, [r4, #12]
 80052f0:	e7e2      	b.n	80052b8 <__smakebuf_r+0x10>
 80052f2:	2380      	movs	r3, #128	@ 0x80
 80052f4:	89a2      	ldrh	r2, [r4, #12]
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	6120      	str	r0, [r4, #16]
 8005300:	6167      	str	r7, [r4, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <__smakebuf_r+0x78>
 8005306:	0028      	movs	r0, r5
 8005308:	230e      	movs	r3, #14
 800530a:	5ee1      	ldrsh	r1, [r4, r3]
 800530c:	f000 f820 	bl	8005350 <_isatty_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	d005      	beq.n	8005320 <__smakebuf_r+0x78>
 8005314:	2303      	movs	r3, #3
 8005316:	89a2      	ldrh	r2, [r4, #12]
 8005318:	439a      	bics	r2, r3
 800531a:	3b02      	subs	r3, #2
 800531c:	4313      	orrs	r3, r2
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	9a01      	ldr	r2, [sp, #4]
 8005324:	4313      	orrs	r3, r2
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	e7cc      	b.n	80052c4 <__smakebuf_r+0x1c>
	...

0800532c <_fstat_r>:
 800532c:	2300      	movs	r3, #0
 800532e:	b570      	push	{r4, r5, r6, lr}
 8005330:	4d06      	ldr	r5, [pc, #24]	@ (800534c <_fstat_r+0x20>)
 8005332:	0004      	movs	r4, r0
 8005334:	0008      	movs	r0, r1
 8005336:	0011      	movs	r1, r2
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f7fb feb6 	bl	80010aa <_fstat>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	d103      	bne.n	800534a <_fstat_r+0x1e>
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d000      	beq.n	800534a <_fstat_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	2000039c 	.word	0x2000039c

08005350 <_isatty_r>:
 8005350:	2300      	movs	r3, #0
 8005352:	b570      	push	{r4, r5, r6, lr}
 8005354:	4d06      	ldr	r5, [pc, #24]	@ (8005370 <_isatty_r+0x20>)
 8005356:	0004      	movs	r4, r0
 8005358:	0008      	movs	r0, r1
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	f7fb feb3 	bl	80010c6 <_isatty>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d103      	bne.n	800536c <_isatty_r+0x1c>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d000      	beq.n	800536c <_isatty_r+0x1c>
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	bd70      	pop	{r4, r5, r6, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	2000039c 	.word	0x2000039c

08005374 <_sbrk_r>:
 8005374:	2300      	movs	r3, #0
 8005376:	b570      	push	{r4, r5, r6, lr}
 8005378:	4d06      	ldr	r5, [pc, #24]	@ (8005394 <_sbrk_r+0x20>)
 800537a:	0004      	movs	r4, r0
 800537c:	0008      	movs	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fb feb6 	bl	80010f0 <_sbrk>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d103      	bne.n	8005390 <_sbrk_r+0x1c>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d000      	beq.n	8005390 <_sbrk_r+0x1c>
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	2000039c 	.word	0x2000039c

08005398 <memchr>:
 8005398:	b2c9      	uxtb	r1, r1
 800539a:	1882      	adds	r2, r0, r2
 800539c:	4290      	cmp	r0, r2
 800539e:	d101      	bne.n	80053a4 <memchr+0xc>
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr
 80053a4:	7803      	ldrb	r3, [r0, #0]
 80053a6:	428b      	cmp	r3, r1
 80053a8:	d0fb      	beq.n	80053a2 <memchr+0xa>
 80053aa:	3001      	adds	r0, #1
 80053ac:	e7f6      	b.n	800539c <memchr+0x4>
	...

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

080053c8 <__FLASH_Program_Fast_veneer>:
 80053c8:	b401      	push	{r0}
 80053ca:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <__FLASH_Program_Fast_veneer+0xc>)
 80053cc:	4684      	mov	ip, r0
 80053ce:	bc01      	pop	{r0}
 80053d0:	4760      	bx	ip
 80053d2:	bf00      	nop
 80053d4:	2000006d 	.word	0x2000006d

Disassembly of section .data:

20000000 <BL_Version>:
20000000:	00000001                                ....

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 20000260              ........`.. 

2000001c <_impure_ptr>:
2000001c:	20000020                                 .. 

20000020 <_impure_data>:
20000020:	00000000 20000260 200002c8 20000330     ....`.. ... 0.. 
	...

2000006c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000006c:	b580      	push	{r7, lr}
2000006e:	b088      	sub	sp, #32
20000070:	af00      	add	r7, sp, #0
20000072:	6078      	str	r0, [r7, #4]
20000074:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000076:	231f      	movs	r3, #31
20000078:	18fb      	adds	r3, r7, r3
2000007a:	2200      	movs	r2, #0
2000007c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000082:	683b      	ldr	r3, [r7, #0]
20000084:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000086:	4b1a      	ldr	r3, [pc, #104]	@ (200000f0 <FLASH_Program_Fast+0x84>)
20000088:	695a      	ldr	r2, [r3, #20]
2000008a:	4b19      	ldr	r3, [pc, #100]	@ (200000f0 <FLASH_Program_Fast+0x84>)
2000008c:	2180      	movs	r1, #128	@ 0x80
2000008e:	02c9      	lsls	r1, r1, #11
20000090:	430a      	orrs	r2, r1
20000092:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000094:	f3ef 8310 	mrs	r3, PRIMASK
20000098:	60fb      	str	r3, [r7, #12]
  return(result);
2000009a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000009c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000009e:	b672      	cpsid	i
}
200000a0:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a2:	e00f      	b.n	200000c4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	69bb      	ldr	r3, [r7, #24]
200000a8:	6812      	ldr	r2, [r2, #0]
200000aa:	601a      	str	r2, [r3, #0]
    src += 4U;
200000ac:	697b      	ldr	r3, [r7, #20]
200000ae:	3304      	adds	r3, #4
200000b0:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b2:	69bb      	ldr	r3, [r7, #24]
200000b4:	3304      	adds	r3, #4
200000b6:	61bb      	str	r3, [r7, #24]
    index++;
200000b8:	211f      	movs	r1, #31
200000ba:	187b      	adds	r3, r7, r1
200000bc:	781a      	ldrb	r2, [r3, #0]
200000be:	187b      	adds	r3, r7, r1
200000c0:	3201      	adds	r2, #1
200000c2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c4:	231f      	movs	r3, #31
200000c6:	18fb      	adds	r3, r7, r3
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	2b3f      	cmp	r3, #63	@ 0x3f
200000cc:	d9ea      	bls.n	200000a4 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200000ce:	46c0      	nop			@ (mov r8, r8)
200000d0:	4b07      	ldr	r3, [pc, #28]	@ (200000f0 <FLASH_Program_Fast+0x84>)
200000d2:	691a      	ldr	r2, [r3, #16]
200000d4:	23c0      	movs	r3, #192	@ 0xc0
200000d6:	029b      	lsls	r3, r3, #10
200000d8:	4013      	ands	r3, r2
200000da:	d1f9      	bne.n	200000d0 <FLASH_Program_Fast+0x64>
200000dc:	693b      	ldr	r3, [r7, #16]
200000de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e0:	68bb      	ldr	r3, [r7, #8]
200000e2:	f383 8810 	msr	PRIMASK, r3
}
200000e6:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e8:	46c0      	nop			@ (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b008      	add	sp, #32
200000ee:	bd80      	pop	{r7, pc}
200000f0:	40022000 	.word	0x40022000
